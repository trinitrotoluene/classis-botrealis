// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace PlayerActionType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type None = { tag: "None" };
  export type Attack = { tag: "Attack" };
  export type DestroyPaving = { tag: "DestroyPaving" };
  export type StationaryEmote = { tag: "StationaryEmote" };
  export type Extract = { tag: "Extract" };
  export type PaveTile = { tag: "PaveTile" };
  export type SpawnCargo = { tag: "SpawnCargo" };
  export type Build = { tag: "Build" };
  export type Deconstruct = { tag: "Deconstruct" };
  export type RepairBuilding = { tag: "RepairBuilding" };
  export type ResupplyClaim = { tag: "ResupplyClaim" };
  export type CargoPickUp = { tag: "CargoPickUp" };
  export type Terraform = { tag: "Terraform" };
  export type DeployDeployable = { tag: "DeployDeployable" };
  export type StoreDeployable = { tag: "StoreDeployable" };
  export type Sleep = { tag: "Sleep" };
  export type Teleport = { tag: "Teleport" };
  export type Death = { tag: "Death" };
  export type Climb = { tag: "Climb" };
  export type UseItem = { tag: "UseItem" };
  export type Craft = { tag: "Craft" };
  export type ConvertItems = { tag: "ConvertItems" };
  export type PlayerMove = { tag: "PlayerMove" };
  export type DeployableMove = { tag: "DeployableMove" };
  export type ResupplyEmpireNode = { tag: "ResupplyEmpireNode" };
  export type SetHome = { tag: "SetHome" };
  export type UseElevator = { tag: "UseElevator" };
  export type MobileEmote = { tag: "MobileEmote" };
  export type PlacePillarShaping = { tag: "PlacePillarShaping" };
  export type DestroyPillarShaping = { tag: "DestroyPillarShaping" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const None = { tag: "None" };
  export const Attack = { tag: "Attack" };
  export const DestroyPaving = { tag: "DestroyPaving" };
  export const StationaryEmote = { tag: "StationaryEmote" };
  export const Extract = { tag: "Extract" };
  export const PaveTile = { tag: "PaveTile" };
  export const SpawnCargo = { tag: "SpawnCargo" };
  export const Build = { tag: "Build" };
  export const Deconstruct = { tag: "Deconstruct" };
  export const RepairBuilding = { tag: "RepairBuilding" };
  export const ResupplyClaim = { tag: "ResupplyClaim" };
  export const CargoPickUp = { tag: "CargoPickUp" };
  export const Terraform = { tag: "Terraform" };
  export const DeployDeployable = { tag: "DeployDeployable" };
  export const StoreDeployable = { tag: "StoreDeployable" };
  export const Sleep = { tag: "Sleep" };
  export const Teleport = { tag: "Teleport" };
  export const Death = { tag: "Death" };
  export const Climb = { tag: "Climb" };
  export const UseItem = { tag: "UseItem" };
  export const Craft = { tag: "Craft" };
  export const ConvertItems = { tag: "ConvertItems" };
  export const PlayerMove = { tag: "PlayerMove" };
  export const DeployableMove = { tag: "DeployableMove" };
  export const ResupplyEmpireNode = { tag: "ResupplyEmpireNode" };
  export const SetHome = { tag: "SetHome" };
  export const UseElevator = { tag: "UseElevator" };
  export const MobileEmote = { tag: "MobileEmote" };
  export const PlacePillarShaping = { tag: "PlacePillarShaping" };
  export const DestroyPillarShaping = { tag: "DestroyPillarShaping" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("None", AlgebraicType.createProductType([])),
      new SumTypeVariant("Attack", AlgebraicType.createProductType([])),
      new SumTypeVariant("DestroyPaving", AlgebraicType.createProductType([])),
      new SumTypeVariant("StationaryEmote", AlgebraicType.createProductType([])),
      new SumTypeVariant("Extract", AlgebraicType.createProductType([])),
      new SumTypeVariant("PaveTile", AlgebraicType.createProductType([])),
      new SumTypeVariant("SpawnCargo", AlgebraicType.createProductType([])),
      new SumTypeVariant("Build", AlgebraicType.createProductType([])),
      new SumTypeVariant("Deconstruct", AlgebraicType.createProductType([])),
      new SumTypeVariant("RepairBuilding", AlgebraicType.createProductType([])),
      new SumTypeVariant("ResupplyClaim", AlgebraicType.createProductType([])),
      new SumTypeVariant("CargoPickUp", AlgebraicType.createProductType([])),
      new SumTypeVariant("Terraform", AlgebraicType.createProductType([])),
      new SumTypeVariant("DeployDeployable", AlgebraicType.createProductType([])),
      new SumTypeVariant("StoreDeployable", AlgebraicType.createProductType([])),
      new SumTypeVariant("Sleep", AlgebraicType.createProductType([])),
      new SumTypeVariant("Teleport", AlgebraicType.createProductType([])),
      new SumTypeVariant("Death", AlgebraicType.createProductType([])),
      new SumTypeVariant("Climb", AlgebraicType.createProductType([])),
      new SumTypeVariant("UseItem", AlgebraicType.createProductType([])),
      new SumTypeVariant("Craft", AlgebraicType.createProductType([])),
      new SumTypeVariant("ConvertItems", AlgebraicType.createProductType([])),
      new SumTypeVariant("PlayerMove", AlgebraicType.createProductType([])),
      new SumTypeVariant("DeployableMove", AlgebraicType.createProductType([])),
      new SumTypeVariant("ResupplyEmpireNode", AlgebraicType.createProductType([])),
      new SumTypeVariant("SetHome", AlgebraicType.createProductType([])),
      new SumTypeVariant("UseElevator", AlgebraicType.createProductType([])),
      new SumTypeVariant("MobileEmote", AlgebraicType.createProductType([])),
      new SumTypeVariant("PlacePillarShaping", AlgebraicType.createProductType([])),
      new SumTypeVariant("DestroyPillarShaping", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: PlayerActionType): void {
      PlayerActionType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): PlayerActionType {
      return PlayerActionType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `PlayerActionType`.
export type PlayerActionType = PlayerActionType.None | PlayerActionType.Attack | PlayerActionType.DestroyPaving | PlayerActionType.StationaryEmote | PlayerActionType.Extract | PlayerActionType.PaveTile | PlayerActionType.SpawnCargo | PlayerActionType.Build | PlayerActionType.Deconstruct | PlayerActionType.RepairBuilding | PlayerActionType.ResupplyClaim | PlayerActionType.CargoPickUp | PlayerActionType.Terraform | PlayerActionType.DeployDeployable | PlayerActionType.StoreDeployable | PlayerActionType.Sleep | PlayerActionType.Teleport | PlayerActionType.Death | PlayerActionType.Climb | PlayerActionType.UseItem | PlayerActionType.Craft | PlayerActionType.ConvertItems | PlayerActionType.PlayerMove | PlayerActionType.DeployableMove | PlayerActionType.ResupplyEmpireNode | PlayerActionType.SetHome | PlayerActionType.UseElevator | PlayerActionType.MobileEmote | PlayerActionType.PlacePillarShaping | PlayerActionType.DestroyPillarShaping;

export default PlayerActionType;

