// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace SkillType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type None = { tag: "None" };
  export type Any = { tag: "Any" };
  export type Forestry = { tag: "Forestry" };
  export type Carpentry = { tag: "Carpentry" };
  export type Masonry = { tag: "Masonry" };
  export type Mining = { tag: "Mining" };
  export type Smithing = { tag: "Smithing" };
  export type Scholar = { tag: "Scholar" };
  export type Leatherworking = { tag: "Leatherworking" };
  export type Hunting = { tag: "Hunting" };
  export type Tailoring = { tag: "Tailoring" };
  export type Farming = { tag: "Farming" };
  export type Fishing = { tag: "Fishing" };
  export type Cooking = { tag: "Cooking" };
  export type Foraging = { tag: "Foraging" };
  export type Construction = { tag: "Construction" };
  export type Exploration = { tag: "Exploration" };
  export type Taming = { tag: "Taming" };
  export type Slayer = { tag: "Slayer" };
  export type Trading = { tag: "Trading" };
  export type LoreKeeper = { tag: "LoreKeeper" };
  export type Sailing = { tag: "Sailing" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const None = { tag: "None" };
  export const ANY = { tag: "ANY" };
  export const Forestry = { tag: "Forestry" };
  export const Carpentry = { tag: "Carpentry" };
  export const Masonry = { tag: "Masonry" };
  export const Mining = { tag: "Mining" };
  export const Smithing = { tag: "Smithing" };
  export const Scholar = { tag: "Scholar" };
  export const Leatherworking = { tag: "Leatherworking" };
  export const Hunting = { tag: "Hunting" };
  export const Tailoring = { tag: "Tailoring" };
  export const Farming = { tag: "Farming" };
  export const Fishing = { tag: "Fishing" };
  export const Cooking = { tag: "Cooking" };
  export const Foraging = { tag: "Foraging" };
  export const Construction = { tag: "Construction" };
  export const Exploration = { tag: "Exploration" };
  export const Taming = { tag: "Taming" };
  export const Slayer = { tag: "Slayer" };
  export const Trading = { tag: "Trading" };
  export const LoreKeeper = { tag: "LoreKeeper" };
  export const Sailing = { tag: "Sailing" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("None", AlgebraicType.createProductType([])),
      new SumTypeVariant("ANY", AlgebraicType.createProductType([])),
      new SumTypeVariant("Forestry", AlgebraicType.createProductType([])),
      new SumTypeVariant("Carpentry", AlgebraicType.createProductType([])),
      new SumTypeVariant("Masonry", AlgebraicType.createProductType([])),
      new SumTypeVariant("Mining", AlgebraicType.createProductType([])),
      new SumTypeVariant("Smithing", AlgebraicType.createProductType([])),
      new SumTypeVariant("Scholar", AlgebraicType.createProductType([])),
      new SumTypeVariant("Leatherworking", AlgebraicType.createProductType([])),
      new SumTypeVariant("Hunting", AlgebraicType.createProductType([])),
      new SumTypeVariant("Tailoring", AlgebraicType.createProductType([])),
      new SumTypeVariant("Farming", AlgebraicType.createProductType([])),
      new SumTypeVariant("Fishing", AlgebraicType.createProductType([])),
      new SumTypeVariant("Cooking", AlgebraicType.createProductType([])),
      new SumTypeVariant("Foraging", AlgebraicType.createProductType([])),
      new SumTypeVariant("Construction", AlgebraicType.createProductType([])),
      new SumTypeVariant("Exploration", AlgebraicType.createProductType([])),
      new SumTypeVariant("Taming", AlgebraicType.createProductType([])),
      new SumTypeVariant("Slayer", AlgebraicType.createProductType([])),
      new SumTypeVariant("Trading", AlgebraicType.createProductType([])),
      new SumTypeVariant("LoreKeeper", AlgebraicType.createProductType([])),
      new SumTypeVariant("Sailing", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: SkillType): void {
      SkillType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): SkillType {
      return SkillType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `SkillType`.
export type SkillType = SkillType.None | SkillType.Any | SkillType.Forestry | SkillType.Carpentry | SkillType.Masonry | SkillType.Mining | SkillType.Smithing | SkillType.Scholar | SkillType.Leatherworking | SkillType.Hunting | SkillType.Tailoring | SkillType.Farming | SkillType.Fishing | SkillType.Cooking | SkillType.Foraging | SkillType.Construction | SkillType.Exploration | SkillType.Taming | SkillType.Slayer | SkillType.Trading | SkillType.LoreKeeper | SkillType.Sailing;

export default SkillType;

