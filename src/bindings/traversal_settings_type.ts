// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace TraversalSettings {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type None = { tag: "None" };
  export type FinishMove = { tag: "FinishMove" };
  export type Walk = { tag: "Walk" };
  export type StepUp = { tag: "StepUp" };
  export type Hoist1 = { tag: "Hoist1" };
  export type Down1 = { tag: "Down1" };
  export type WalkSwimTransition = { tag: "WalkSwimTransition" };
  export type SwimHoist = { tag: "SwimHoist" };
  export type Down1Swim = { tag: "Down1Swim" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const None = { tag: "None" };
  export const FinishMove = { tag: "FinishMove" };
  export const Walk = { tag: "Walk" };
  export const StepUp = { tag: "StepUp" };
  export const Hoist1 = { tag: "Hoist1" };
  export const Down1 = { tag: "Down1" };
  export const WalkSwimTransition = { tag: "WalkSwimTransition" };
  export const SwimHoist = { tag: "SwimHoist" };
  export const Down1Swim = { tag: "Down1Swim" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("None", AlgebraicType.createProductType([])),
      new SumTypeVariant("FinishMove", AlgebraicType.createProductType([])),
      new SumTypeVariant("Walk", AlgebraicType.createProductType([])),
      new SumTypeVariant("StepUp", AlgebraicType.createProductType([])),
      new SumTypeVariant("Hoist1", AlgebraicType.createProductType([])),
      new SumTypeVariant("Down1", AlgebraicType.createProductType([])),
      new SumTypeVariant("WalkSwimTransition", AlgebraicType.createProductType([])),
      new SumTypeVariant("SwimHoist", AlgebraicType.createProductType([])),
      new SumTypeVariant("Down1Swim", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: TraversalSettings): void {
      TraversalSettings.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): TraversalSettings {
      return TraversalSettings.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `TraversalSettings`.
export type TraversalSettings = TraversalSettings.None | TraversalSettings.FinishMove | TraversalSettings.Walk | TraversalSettings.StepUp | TraversalSettings.Hoist1 | TraversalSettings.Down1 | TraversalSettings.WalkSwimTransition | TraversalSettings.SwimHoist | TraversalSettings.Down1Swim;

export default TraversalSettings;

