// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { BuildingFunction as __BuildingFunction } from "./building_function_type";
import { FootprintTile as __FootprintTile } from "./footprint_tile_type";
import { BuildingInteractionLevel as __BuildingInteractionLevel } from "./building_interaction_level_type";

export type BuildingDesc = {
  id: number,
  functions: __BuildingFunction[],
  name: string,
  description: string,
  restedBuffDuration: number,
  lightRadius: number,
  modelAssetName: string,
  iconAssetName: string,
  unenterable: boolean,
  wilderness: boolean,
  footprint: __FootprintTile[],
  maxHealth: number,
  ignoreDamage: boolean,
  defenseLevel: number,
  decay: number,
  maintenance: number,
  buildPermission: __BuildingInteractionLevel,
  interactPermission: __BuildingInteractionLevel,
  hasAction: boolean,
  showInCompendium: boolean,
  isRuins: boolean,
  notDeconstructible: boolean,
};

/**
 * A namespace for generated helper functions.
 */
export namespace BuildingDesc {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("id", AlgebraicType.createI32Type()),
      new ProductTypeElement("functions", AlgebraicType.createArrayType(__BuildingFunction.getTypeScriptAlgebraicType())),
      new ProductTypeElement("name", AlgebraicType.createStringType()),
      new ProductTypeElement("description", AlgebraicType.createStringType()),
      new ProductTypeElement("restedBuffDuration", AlgebraicType.createI32Type()),
      new ProductTypeElement("lightRadius", AlgebraicType.createI32Type()),
      new ProductTypeElement("modelAssetName", AlgebraicType.createStringType()),
      new ProductTypeElement("iconAssetName", AlgebraicType.createStringType()),
      new ProductTypeElement("unenterable", AlgebraicType.createBoolType()),
      new ProductTypeElement("wilderness", AlgebraicType.createBoolType()),
      new ProductTypeElement("footprint", AlgebraicType.createArrayType(__FootprintTile.getTypeScriptAlgebraicType())),
      new ProductTypeElement("maxHealth", AlgebraicType.createI32Type()),
      new ProductTypeElement("ignoreDamage", AlgebraicType.createBoolType()),
      new ProductTypeElement("defenseLevel", AlgebraicType.createI32Type()),
      new ProductTypeElement("decay", AlgebraicType.createF32Type()),
      new ProductTypeElement("maintenance", AlgebraicType.createF32Type()),
      new ProductTypeElement("buildPermission", __BuildingInteractionLevel.getTypeScriptAlgebraicType()),
      new ProductTypeElement("interactPermission", __BuildingInteractionLevel.getTypeScriptAlgebraicType()),
      new ProductTypeElement("hasAction", AlgebraicType.createBoolType()),
      new ProductTypeElement("showInCompendium", AlgebraicType.createBoolType()),
      new ProductTypeElement("isRuins", AlgebraicType.createBoolType()),
      new ProductTypeElement("notDeconstructible", AlgebraicType.createBoolType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: BuildingDesc): void {
    BuildingDesc.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): BuildingDesc {
    return BuildingDesc.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


