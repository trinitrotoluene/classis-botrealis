// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace CharacterStatType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type MaxHealth = { tag: "MaxHealth" };
  export type MaxStamina = { tag: "MaxStamina" };
  export type PassiveHealthRegenRate = { tag: "PassiveHealthRegenRate" };
  export type PassiveStaminaRegenRate = { tag: "PassiveStaminaRegenRate" };
  export type MovementMultiplier = { tag: "MovementMultiplier" };
  export type SprintMultiplier = { tag: "SprintMultiplier" };
  export type SprintStaminaDrain = { tag: "SprintStaminaDrain" };
  export type Armor = { tag: "Armor" };
  export type CooldownMultiplier = { tag: "CooldownMultiplier" };
  export type HuntingWeaponPower = { tag: "HuntingWeaponPower" };
  export type Strength = { tag: "Strength" };
  export type ColdProtection = { tag: "ColdProtection" };
  export type HeatProtection = { tag: "HeatProtection" };
  export type Evasion = { tag: "Evasion" };
  export type ToolbeltSlots = { tag: "ToolbeltSlots" };
  export type CraftingSpeed = { tag: "CraftingSpeed" };
  export type GatheringSpeed = { tag: "GatheringSpeed" };
  export type BuildingSpeed = { tag: "BuildingSpeed" };
  export type SatiationRegenRate = { tag: "SatiationRegenRate" };
  export type MaxSatiation = { tag: "MaxSatiation" };
  export type DefenseLevel = { tag: "DefenseLevel" };
  export type ForestrySpeed = { tag: "ForestrySpeed" };
  export type CarpentrySpeed = { tag: "CarpentrySpeed" };
  export type MasonrySpeed = { tag: "MasonrySpeed" };
  export type MiningSpeed = { tag: "MiningSpeed" };
  export type SmithingSpeed = { tag: "SmithingSpeed" };
  export type ScholarSpeed = { tag: "ScholarSpeed" };
  export type LeatherworkingSpeed = { tag: "LeatherworkingSpeed" };
  export type HuntingSpeed = { tag: "HuntingSpeed" };
  export type TailoringSpeed = { tag: "TailoringSpeed" };
  export type FarmingSpeed = { tag: "FarmingSpeed" };
  export type FishingSpeed = { tag: "FishingSpeed" };
  export type CookingSpeed = { tag: "CookingSpeed" };
  export type ForagingSpeed = { tag: "ForagingSpeed" };
  export type ForestryPower = { tag: "ForestryPower" };
  export type CarpentryPower = { tag: "CarpentryPower" };
  export type MasonryPower = { tag: "MasonryPower" };
  export type MiningPower = { tag: "MiningPower" };
  export type SmithingPower = { tag: "SmithingPower" };
  export type ScholarPower = { tag: "ScholarPower" };
  export type LeatherworkingPower = { tag: "LeatherworkingPower" };
  export type HuntingPower = { tag: "HuntingPower" };
  export type TailoringPower = { tag: "TailoringPower" };
  export type FarmingPower = { tag: "FarmingPower" };
  export type FishingPower = { tag: "FishingPower" };
  export type CookingPower = { tag: "CookingPower" };
  export type ForagingPower = { tag: "ForagingPower" };
  export type ActiveHealthRegenRate = { tag: "ActiveHealthRegenRate" };
  export type ActiveStaminaRegenRate = { tag: "ActiveStaminaRegenRate" };
  export type ClimbProficiency = { tag: "ClimbProficiency" };
  export type ExperienceRate = { tag: "ExperienceRate" };
  export type Accuracy = { tag: "Accuracy" };
  export type MaxTeleportationEnergy = { tag: "MaxTeleportationEnergy" };
  export type TeleportationEnergyRegenRate = { tag: "TeleportationEnergyRegenRate" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const MaxHealth = { tag: "MaxHealth" };
  export const MaxStamina = { tag: "MaxStamina" };
  export const PassiveHealthRegenRate = { tag: "PassiveHealthRegenRate" };
  export const PassiveStaminaRegenRate = { tag: "PassiveStaminaRegenRate" };
  export const MovementMultiplier = { tag: "MovementMultiplier" };
  export const SprintMultiplier = { tag: "SprintMultiplier" };
  export const SprintStaminaDrain = { tag: "SprintStaminaDrain" };
  export const Armor = { tag: "Armor" };
  export const CooldownMultiplier = { tag: "CooldownMultiplier" };
  export const HuntingWeaponPower = { tag: "HuntingWeaponPower" };
  export const Strength = { tag: "Strength" };
  export const ColdProtection = { tag: "ColdProtection" };
  export const HeatProtection = { tag: "HeatProtection" };
  export const Evasion = { tag: "Evasion" };
  export const ToolbeltSlots = { tag: "ToolbeltSlots" };
  export const CraftingSpeed = { tag: "CraftingSpeed" };
  export const GatheringSpeed = { tag: "GatheringSpeed" };
  export const BuildingSpeed = { tag: "BuildingSpeed" };
  export const SatiationRegenRate = { tag: "SatiationRegenRate" };
  export const MaxSatiation = { tag: "MaxSatiation" };
  export const DefenseLevel = { tag: "DefenseLevel" };
  export const ForestrySpeed = { tag: "ForestrySpeed" };
  export const CarpentrySpeed = { tag: "CarpentrySpeed" };
  export const MasonrySpeed = { tag: "MasonrySpeed" };
  export const MiningSpeed = { tag: "MiningSpeed" };
  export const SmithingSpeed = { tag: "SmithingSpeed" };
  export const ScholarSpeed = { tag: "ScholarSpeed" };
  export const LeatherworkingSpeed = { tag: "LeatherworkingSpeed" };
  export const HuntingSpeed = { tag: "HuntingSpeed" };
  export const TailoringSpeed = { tag: "TailoringSpeed" };
  export const FarmingSpeed = { tag: "FarmingSpeed" };
  export const FishingSpeed = { tag: "FishingSpeed" };
  export const CookingSpeed = { tag: "CookingSpeed" };
  export const ForagingSpeed = { tag: "ForagingSpeed" };
  export const ForestryPower = { tag: "ForestryPower" };
  export const CarpentryPower = { tag: "CarpentryPower" };
  export const MasonryPower = { tag: "MasonryPower" };
  export const MiningPower = { tag: "MiningPower" };
  export const SmithingPower = { tag: "SmithingPower" };
  export const ScholarPower = { tag: "ScholarPower" };
  export const LeatherworkingPower = { tag: "LeatherworkingPower" };
  export const HuntingPower = { tag: "HuntingPower" };
  export const TailoringPower = { tag: "TailoringPower" };
  export const FarmingPower = { tag: "FarmingPower" };
  export const FishingPower = { tag: "FishingPower" };
  export const CookingPower = { tag: "CookingPower" };
  export const ForagingPower = { tag: "ForagingPower" };
  export const ActiveHealthRegenRate = { tag: "ActiveHealthRegenRate" };
  export const ActiveStaminaRegenRate = { tag: "ActiveStaminaRegenRate" };
  export const ClimbProficiency = { tag: "ClimbProficiency" };
  export const ExperienceRate = { tag: "ExperienceRate" };
  export const Accuracy = { tag: "Accuracy" };
  export const MaxTeleportationEnergy = { tag: "MaxTeleportationEnergy" };
  export const TeleportationEnergyRegenRate = { tag: "TeleportationEnergyRegenRate" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("MaxHealth", AlgebraicType.createProductType([])),
      new SumTypeVariant("MaxStamina", AlgebraicType.createProductType([])),
      new SumTypeVariant("PassiveHealthRegenRate", AlgebraicType.createProductType([])),
      new SumTypeVariant("PassiveStaminaRegenRate", AlgebraicType.createProductType([])),
      new SumTypeVariant("MovementMultiplier", AlgebraicType.createProductType([])),
      new SumTypeVariant("SprintMultiplier", AlgebraicType.createProductType([])),
      new SumTypeVariant("SprintStaminaDrain", AlgebraicType.createProductType([])),
      new SumTypeVariant("Armor", AlgebraicType.createProductType([])),
      new SumTypeVariant("CooldownMultiplier", AlgebraicType.createProductType([])),
      new SumTypeVariant("HuntingWeaponPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("Strength", AlgebraicType.createProductType([])),
      new SumTypeVariant("ColdProtection", AlgebraicType.createProductType([])),
      new SumTypeVariant("HeatProtection", AlgebraicType.createProductType([])),
      new SumTypeVariant("Evasion", AlgebraicType.createProductType([])),
      new SumTypeVariant("ToolbeltSlots", AlgebraicType.createProductType([])),
      new SumTypeVariant("CraftingSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("GatheringSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("BuildingSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("SatiationRegenRate", AlgebraicType.createProductType([])),
      new SumTypeVariant("MaxSatiation", AlgebraicType.createProductType([])),
      new SumTypeVariant("DefenseLevel", AlgebraicType.createProductType([])),
      new SumTypeVariant("ForestrySpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("CarpentrySpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("MasonrySpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("MiningSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("SmithingSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("ScholarSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("LeatherworkingSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("HuntingSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("TailoringSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("FarmingSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("FishingSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("CookingSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("ForagingSpeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("ForestryPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("CarpentryPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("MasonryPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("MiningPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("SmithingPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("ScholarPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("LeatherworkingPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("HuntingPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("TailoringPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("FarmingPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("FishingPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("CookingPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("ForagingPower", AlgebraicType.createProductType([])),
      new SumTypeVariant("ActiveHealthRegenRate", AlgebraicType.createProductType([])),
      new SumTypeVariant("ActiveStaminaRegenRate", AlgebraicType.createProductType([])),
      new SumTypeVariant("ClimbProficiency", AlgebraicType.createProductType([])),
      new SumTypeVariant("ExperienceRate", AlgebraicType.createProductType([])),
      new SumTypeVariant("Accuracy", AlgebraicType.createProductType([])),
      new SumTypeVariant("MaxTeleportationEnergy", AlgebraicType.createProductType([])),
      new SumTypeVariant("TeleportationEnergyRegenRate", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: CharacterStatType): void {
      CharacterStatType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): CharacterStatType {
      return CharacterStatType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `CharacterStatType`.
export type CharacterStatType = CharacterStatType.MaxHealth | CharacterStatType.MaxStamina | CharacterStatType.PassiveHealthRegenRate | CharacterStatType.PassiveStaminaRegenRate | CharacterStatType.MovementMultiplier | CharacterStatType.SprintMultiplier | CharacterStatType.SprintStaminaDrain | CharacterStatType.Armor | CharacterStatType.CooldownMultiplier | CharacterStatType.HuntingWeaponPower | CharacterStatType.Strength | CharacterStatType.ColdProtection | CharacterStatType.HeatProtection | CharacterStatType.Evasion | CharacterStatType.ToolbeltSlots | CharacterStatType.CraftingSpeed | CharacterStatType.GatheringSpeed | CharacterStatType.BuildingSpeed | CharacterStatType.SatiationRegenRate | CharacterStatType.MaxSatiation | CharacterStatType.DefenseLevel | CharacterStatType.ForestrySpeed | CharacterStatType.CarpentrySpeed | CharacterStatType.MasonrySpeed | CharacterStatType.MiningSpeed | CharacterStatType.SmithingSpeed | CharacterStatType.ScholarSpeed | CharacterStatType.LeatherworkingSpeed | CharacterStatType.HuntingSpeed | CharacterStatType.TailoringSpeed | CharacterStatType.FarmingSpeed | CharacterStatType.FishingSpeed | CharacterStatType.CookingSpeed | CharacterStatType.ForagingSpeed | CharacterStatType.ForestryPower | CharacterStatType.CarpentryPower | CharacterStatType.MasonryPower | CharacterStatType.MiningPower | CharacterStatType.SmithingPower | CharacterStatType.ScholarPower | CharacterStatType.LeatherworkingPower | CharacterStatType.HuntingPower | CharacterStatType.TailoringPower | CharacterStatType.FarmingPower | CharacterStatType.FishingPower | CharacterStatType.CookingPower | CharacterStatType.ForagingPower | CharacterStatType.ActiveHealthRegenRate | CharacterStatType.ActiveStaminaRegenRate | CharacterStatType.ClimbProficiency | CharacterStatType.ExperienceRate | CharacterStatType.Accuracy | CharacterStatType.MaxTeleportationEnergy | CharacterStatType.TeleportationEnergyRegenRate;

export default CharacterStatType;

