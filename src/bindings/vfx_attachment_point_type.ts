// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace VfxAttachmentPoint {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Origin = { tag: "Origin" };
  export type Overhead = { tag: "Overhead" };
  export type Head = { tag: "Head" };
  export type Chest = { tag: "Chest" };
  export type MainHand = { tag: "MainHand" };
  export type OffHand = { tag: "OffHand" };
  export type BothHands = { tag: "BothHands" };
  export type Feet = { tag: "Feet" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Origin = { tag: "Origin" };
  export const Overhead = { tag: "Overhead" };
  export const Head = { tag: "Head" };
  export const Chest = { tag: "Chest" };
  export const MainHand = { tag: "MainHand" };
  export const OffHand = { tag: "OffHand" };
  export const BothHands = { tag: "BothHands" };
  export const Feet = { tag: "Feet" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Origin", AlgebraicType.createProductType([])),
      new SumTypeVariant("Overhead", AlgebraicType.createProductType([])),
      new SumTypeVariant("Head", AlgebraicType.createProductType([])),
      new SumTypeVariant("Chest", AlgebraicType.createProductType([])),
      new SumTypeVariant("MainHand", AlgebraicType.createProductType([])),
      new SumTypeVariant("OffHand", AlgebraicType.createProductType([])),
      new SumTypeVariant("BothHands", AlgebraicType.createProductType([])),
      new SumTypeVariant("Feet", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: VfxAttachmentPoint): void {
      VfxAttachmentPoint.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): VfxAttachmentPoint {
      return VfxAttachmentPoint.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `VfxAttachmentPoint`.
export type VfxAttachmentPoint = VfxAttachmentPoint.Origin | VfxAttachmentPoint.Overhead | VfxAttachmentPoint.Head | VfxAttachmentPoint.Chest | VfxAttachmentPoint.MainHand | VfxAttachmentPoint.OffHand | VfxAttachmentPoint.BothHands | VfxAttachmentPoint.Feet;

export default VfxAttachmentPoint;

