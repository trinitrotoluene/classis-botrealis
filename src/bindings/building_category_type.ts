// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace BuildingCategory {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Storage = { tag: "Storage" };
  export type Crafting = { tag: "Crafting" };
  export type Residential = { tag: "Residential" };
  export type TownHall = { tag: "TownHall" };
  export type Wall = { tag: "Wall" };
  export type TradingPost = { tag: "TradingPost" };
  export type Ornamental = { tag: "Ornamental" };
  export type AncientRuins = { tag: "AncientRuins" };
  export type ClaimTotem = { tag: "ClaimTotem" };
  export type TerrraformingBase = { tag: "TerrraformingBase" };
  export type Barter = { tag: "Barter" };
  export type Portal = { tag: "Portal" };
  export type RentTerminal = { tag: "RentTerminal" };
  export type Watchtower = { tag: "Watchtower" };
  export type EmpireFoundry = { tag: "EmpireFoundry" };
  export type Sign = { tag: "Sign" };
  export type Gate = { tag: "Gate" };
  export type Bed = { tag: "Bed" };
  export type Waystone = { tag: "Waystone" };
  export type Bank = { tag: "Bank" };
  export type Elevator = { tag: "Elevator" };
  export type TownMarket = { tag: "TownMarket" };
  export type RecoveryChest = { tag: "RecoveryChest" };
  export type PlayerHousing = { tag: "PlayerHousing" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Storage = { tag: "Storage" };
  export const Crafting = { tag: "Crafting" };
  export const Residential = { tag: "Residential" };
  export const TownHall = { tag: "TownHall" };
  export const Wall = { tag: "Wall" };
  export const TradingPost = { tag: "TradingPost" };
  export const Ornamental = { tag: "Ornamental" };
  export const AncientRuins = { tag: "AncientRuins" };
  export const ClaimTotem = { tag: "ClaimTotem" };
  export const TerrraformingBase = { tag: "TerrraformingBase" };
  export const Barter = { tag: "Barter" };
  export const Portal = { tag: "Portal" };
  export const RentTerminal = { tag: "RentTerminal" };
  export const Watchtower = { tag: "Watchtower" };
  export const EmpireFoundry = { tag: "EmpireFoundry" };
  export const Sign = { tag: "Sign" };
  export const Gate = { tag: "Gate" };
  export const Bed = { tag: "Bed" };
  export const Waystone = { tag: "Waystone" };
  export const Bank = { tag: "Bank" };
  export const Elevator = { tag: "Elevator" };
  export const TownMarket = { tag: "TownMarket" };
  export const RecoveryChest = { tag: "RecoveryChest" };
  export const PlayerHousing = { tag: "PlayerHousing" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Storage", AlgebraicType.createProductType([])),
      new SumTypeVariant("Crafting", AlgebraicType.createProductType([])),
      new SumTypeVariant("Residential", AlgebraicType.createProductType([])),
      new SumTypeVariant("TownHall", AlgebraicType.createProductType([])),
      new SumTypeVariant("Wall", AlgebraicType.createProductType([])),
      new SumTypeVariant("TradingPost", AlgebraicType.createProductType([])),
      new SumTypeVariant("Ornamental", AlgebraicType.createProductType([])),
      new SumTypeVariant("AncientRuins", AlgebraicType.createProductType([])),
      new SumTypeVariant("ClaimTotem", AlgebraicType.createProductType([])),
      new SumTypeVariant("TerrraformingBase", AlgebraicType.createProductType([])),
      new SumTypeVariant("Barter", AlgebraicType.createProductType([])),
      new SumTypeVariant("Portal", AlgebraicType.createProductType([])),
      new SumTypeVariant("RentTerminal", AlgebraicType.createProductType([])),
      new SumTypeVariant("Watchtower", AlgebraicType.createProductType([])),
      new SumTypeVariant("EmpireFoundry", AlgebraicType.createProductType([])),
      new SumTypeVariant("Sign", AlgebraicType.createProductType([])),
      new SumTypeVariant("Gate", AlgebraicType.createProductType([])),
      new SumTypeVariant("Bed", AlgebraicType.createProductType([])),
      new SumTypeVariant("Waystone", AlgebraicType.createProductType([])),
      new SumTypeVariant("Bank", AlgebraicType.createProductType([])),
      new SumTypeVariant("Elevator", AlgebraicType.createProductType([])),
      new SumTypeVariant("TownMarket", AlgebraicType.createProductType([])),
      new SumTypeVariant("RecoveryChest", AlgebraicType.createProductType([])),
      new SumTypeVariant("PlayerHousing", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: BuildingCategory): void {
      BuildingCategory.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): BuildingCategory {
      return BuildingCategory.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `BuildingCategory`.
export type BuildingCategory = BuildingCategory.Storage | BuildingCategory.Crafting | BuildingCategory.Residential | BuildingCategory.TownHall | BuildingCategory.Wall | BuildingCategory.TradingPost | BuildingCategory.Ornamental | BuildingCategory.AncientRuins | BuildingCategory.ClaimTotem | BuildingCategory.TerrraformingBase | BuildingCategory.Barter | BuildingCategory.Portal | BuildingCategory.RentTerminal | BuildingCategory.Watchtower | BuildingCategory.EmpireFoundry | BuildingCategory.Sign | BuildingCategory.Gate | BuildingCategory.Bed | BuildingCategory.Waystone | BuildingCategory.Bank | BuildingCategory.Elevator | BuildingCategory.TownMarket | BuildingCategory.RecoveryChest | BuildingCategory.PlayerHousing;

export default BuildingCategory;

