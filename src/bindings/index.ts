// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AchievementClaim } from "./achievement_claim_reducer.js";
export { AchievementClaim };
import { AcquireKnowledgeFromEntities } from "./acquire_knowledge_from_entities_reducer.js";
export { AcquireKnowledgeFromEntities };
import { AdminAlpha3CompleteOnboarding } from "./admin_alpha_3_complete_onboarding_reducer.js";
export { AdminAlpha3CompleteOnboarding };
import { AdminAlpha3ResetOnboardingToFifthTempleQuest } from "./admin_alpha_3_reset_onboarding_to_fifth_temple_quest_reducer.js";
export { AdminAlpha3ResetOnboardingToFifthTempleQuest };
import { AdminAlpha3ResetOnboardingToFirstExpandQuest } from "./admin_alpha_3_reset_onboarding_to_first_expand_quest_reducer.js";
export { AdminAlpha3ResetOnboardingToFirstExpandQuest };
import { AdminAlpha3ResetOnboardingToFirstTempleQuest } from "./admin_alpha_3_reset_onboarding_to_first_temple_quest_reducer.js";
export { AdminAlpha3ResetOnboardingToFirstTempleQuest };
import { AdminAlpha3ResetOnboardingToFourthExpandQuest } from "./admin_alpha_3_reset_onboarding_to_fourth_expand_quest_reducer.js";
export { AdminAlpha3ResetOnboardingToFourthExpandQuest };
import { AdminAlpha3ResetOnboardingToFourthTempleQuest } from "./admin_alpha_3_reset_onboarding_to_fourth_temple_quest_reducer.js";
export { AdminAlpha3ResetOnboardingToFourthTempleQuest };
import { AdminAlpha3ResetOnboardingToSecondExpandQuest } from "./admin_alpha_3_reset_onboarding_to_second_expand_quest_reducer.js";
export { AdminAlpha3ResetOnboardingToSecondExpandQuest };
import { AdminAlpha3ResetOnboardingToSecondTempleQuest } from "./admin_alpha_3_reset_onboarding_to_second_temple_quest_reducer.js";
export { AdminAlpha3ResetOnboardingToSecondTempleQuest };
import { AdminAlpha3ResetOnboardingToThirdExpandQuest } from "./admin_alpha_3_reset_onboarding_to_third_expand_quest_reducer.js";
export { AdminAlpha3ResetOnboardingToThirdExpandQuest };
import { AdminAlpha3ResetOnboardingToThirdTempleQuest } from "./admin_alpha_3_reset_onboarding_to_third_temple_quest_reducer.js";
export { AdminAlpha3ResetOnboardingToThirdTempleQuest };
import { AdminBroadcastMsgRegion } from "./admin_broadcast_msg_region_reducer.js";
export { AdminBroadcastMsgRegion };
import { AdminCapSkill } from "./admin_cap_skill_reducer.js";
export { AdminCapSkill };
import { AdminCheckClosedListingStates } from "./admin_check_closed_listing_states_reducer.js";
export { AdminCheckClosedListingStates };
import { AdminClearAllResources } from "./admin_clear_all_resources_reducer.js";
export { AdminClearAllResources };
import { AdminClearChunkResources } from "./admin_clear_chunk_resources_reducer.js";
export { AdminClearChunkResources };
import { AdminCollapseRuin } from "./admin_collapse_ruin_reducer.js";
export { AdminCollapseRuin };
import { AdminCollapseRuins } from "./admin_collapse_ruins_reducer.js";
export { AdminCollapseRuins };
import { AdminCompleteAllPassiveCrafts } from "./admin_complete_all_passive_crafts_reducer.js";
export { AdminCompleteAllPassiveCrafts };
import { AdminCountInventoryItems } from "./admin_count_inventory_items_reducer.js";
export { AdminCountInventoryItems };
import { AdminCreateChatMessage } from "./admin_create_chat_message_reducer.js";
export { AdminCreateChatMessage };
import { AdminCreatePlayerReport } from "./admin_create_player_report_reducer.js";
export { AdminCreatePlayerReport };
import { AdminDeleteAllItemsOfType } from "./admin_delete_all_items_of_type_reducer.js";
export { AdminDeleteAllItemsOfType };
import { AdminDeleteChatMessage } from "./admin_delete_chat_message_reducer.js";
export { AdminDeleteChatMessage };
import { AdminDespawnOverworldEnemies } from "./admin_despawn_overworld_enemies_reducer.js";
export { AdminDespawnOverworldEnemies };
import { AdminFindAllPlayersWithItem } from "./admin_find_all_players_with_item_reducer.js";
export { AdminFindAllPlayersWithItem };
import { AdminFindAllPlayersWithItemAboveQuantity } from "./admin_find_all_players_with_item_above_quantity_reducer.js";
export { AdminFindAllPlayersWithItemAboveQuantity };
import { AdminFindItemsInInventories } from "./admin_find_items_in_inventories_reducer.js";
export { AdminFindItemsInInventories };
import { AdminFindItemsInTrades } from "./admin_find_items_in_trades_reducer.js";
export { AdminFindItemsInTrades };
import { AdminGrantCollectibles } from "./admin_grant_collectibles_reducer.js";
export { AdminGrantCollectibles };
import { AdminModifyChatMessage } from "./admin_modify_chat_message_reducer.js";
export { AdminModifyChatMessage };
import { AdminRenameBuilding } from "./admin_rename_building_reducer.js";
export { AdminRenameBuilding };
import { AdminRenameBuildingCoord } from "./admin_rename_building_coord_reducer.js";
export { AdminRenameBuildingCoord };
import { AdminRenameBuildingEntity } from "./admin_rename_building_entity_reducer.js";
export { AdminRenameBuildingEntity };
import { AdminRenameClaim } from "./admin_rename_claim_reducer.js";
export { AdminRenameClaim };
import { AdminRenameClaimEntity } from "./admin_rename_claim_entity_reducer.js";
export { AdminRenameClaimEntity };
import { AdminRenameDeployable } from "./admin_rename_deployable_reducer.js";
export { AdminRenameDeployable };
import { AdminRenameDeployableEntity } from "./admin_rename_deployable_entity_reducer.js";
export { AdminRenameDeployableEntity };
import { AdminResetAllHerdLocations } from "./admin_reset_all_herd_locations_reducer.js";
export { AdminResetAllHerdLocations };
import { AdminResetHerdLocations } from "./admin_reset_herd_locations_reducer.js";
export { AdminResetHerdLocations };
import { AdminResetOnboardingCompletely } from "./admin_reset_onboarding_completely_reducer.js";
export { AdminResetOnboardingCompletely };
import { AdminResourceForceRegen } from "./admin_resource_force_regen_reducer.js";
export { AdminResourceForceRegen };
import { AdminResourcesDeleteVerySlow } from "./admin_resources_delete_very_slow_reducer.js";
export { AdminResourcesDeleteVerySlow };
import { AdminResourcesLogCount } from "./admin_resources_log_count_reducer.js";
export { AdminResourcesLogCount };
import { AdminRestoreAllCollapsedRuins } from "./admin_restore_all_collapsed_ruins_reducer.js";
export { AdminRestoreAllCollapsedRuins };
import { AdminRestorePlayerState } from "./admin_restore_player_state_reducer.js";
export { AdminRestorePlayerState };
import { AdminRestorePlayerStateScheduled } from "./admin_restore_player_state_scheduled_reducer.js";
export { AdminRestorePlayerStateScheduled };
import { AdminSetSignText } from "./admin_set_sign_text_reducer.js";
export { AdminSetSignText };
import { AdminSetSignTextCoord } from "./admin_set_sign_text_coord_reducer.js";
export { AdminSetSignTextCoord };
import { AdminSetSignTextEntity } from "./admin_set_sign_text_entity_reducer.js";
export { AdminSetSignTextEntity };
import { AdminSignOut } from "./admin_sign_out_reducer.js";
export { AdminSignOut };
import { AdminSignOutAllRegion } from "./admin_sign_out_all_region_reducer.js";
export { AdminSignOutAllRegion };
import { AdminSignOutString } from "./admin_sign_out_string_reducer.js";
export { AdminSignOutString };
import { AdminUpdateHousingPortals } from "./admin_update_housing_portals_reducer.js";
export { AdminUpdateHousingPortals };
import { AdminUpdateLightSourceStates } from "./admin_update_light_source_states_reducer.js";
export { AdminUpdateLightSourceStates };
import { Attack } from "./attack_reducer.js";
export { Attack };
import { AttackImpact } from "./attack_impact_reducer.js";
export { AttackImpact };
import { AttackScheduled } from "./attack_scheduled_reducer.js";
export { AttackScheduled };
import { AttackStart } from "./attack_start_reducer.js";
export { AttackStart };
import { AutoLogoutLoop } from "./auto_logout_loop_reducer.js";
export { AutoLogoutLoop };
import { BarterStallOrderAccept } from "./barter_stall_order_accept_reducer.js";
export { BarterStallOrderAccept };
import { BarterStallOrderCreate } from "./barter_stall_order_create_reducer.js";
export { BarterStallOrderCreate };
import { BarterStallOrderDelete } from "./barter_stall_order_delete_reducer.js";
export { BarterStallOrderDelete };
import { BarterStallSetMarketModeEnabled } from "./barter_stall_set_market_mode_enabled_reducer.js";
export { BarterStallSetMarketModeEnabled };
import { BlueprintPlace } from "./blueprint_place_reducer.js";
export { BlueprintPlace };
import { BuildingDecayAgentLoop } from "./building_decay_agent_loop_reducer.js";
export { BuildingDecayAgentLoop };
import { BuildingDeconstruct } from "./building_deconstruct_reducer.js";
export { BuildingDeconstruct };
import { BuildingDeconstructStart } from "./building_deconstruct_start_reducer.js";
export { BuildingDeconstructStart };
import { BuildingDespawn } from "./building_despawn_reducer.js";
export { BuildingDespawn };
import { BuildingMove } from "./building_move_reducer.js";
export { BuildingMove };
import { BuildingRepair } from "./building_repair_reducer.js";
export { BuildingRepair };
import { BuildingRepairStart } from "./building_repair_start_reducer.js";
export { BuildingRepairStart };
import { BuildingSetNickname } from "./building_set_nickname_reducer.js";
export { BuildingSetNickname };
import { BuildingSetSignText } from "./building_set_sign_text_reducer.js";
export { BuildingSetSignText };
import { ChatCleanupAgentInsert } from "./chat_cleanup_agent_insert_reducer.js";
export { ChatCleanupAgentInsert };
import { ChatCleanupAgentLoop } from "./chat_cleanup_agent_loop_reducer.js";
export { ChatCleanupAgentLoop };
import { ChatPostMessage } from "./chat_post_message_reducer.js";
export { ChatPostMessage };
import { CheatBuildingMove } from "./cheat_building_move_reducer.js";
export { CheatBuildingMove };
import { CheatBuildingPlace } from "./cheat_building_place_reducer.js";
export { CheatBuildingPlace };
import { CheatCargoGrant } from "./cheat_cargo_grant_reducer.js";
export { CheatCargoGrant };
import { CheatClaimTakeOwnership } from "./cheat_claim_take_ownership_reducer.js";
export { CheatClaimTakeOwnership };
import { CheatClaimTotemAddSupplies } from "./cheat_claim_totem_add_supplies_reducer.js";
export { CheatClaimTotemAddSupplies };
import { CheatClaimTotemCompleteCurrentResearch } from "./cheat_claim_totem_complete_current_research_reducer.js";
export { CheatClaimTotemCompleteCurrentResearch };
import { CheatClaimTotemResearchAll } from "./cheat_claim_totem_research_all_reducer.js";
export { CheatClaimTotemResearchAll };
import { CheatClearBuffsAndDebuffs } from "./cheat_clear_buffs_and_debuffs_reducer.js";
export { CheatClearBuffsAndDebuffs };
import { CheatCompendiumPlaceEnemy } from "./cheat_compendium_place_enemy_reducer.js";
export { CheatCompendiumPlaceEnemy };
import { CheatCompendiumPlaceResource } from "./cheat_compendium_place_resource_reducer.js";
export { CheatCompendiumPlaceResource };
import { CheatDeleteItem } from "./cheat_delete_item_reducer.js";
export { CheatDeleteItem };
import { CheatDeployableStore } from "./cheat_deployable_store_reducer.js";
export { CheatDeployableStore };
import { CheatDiscoverMap } from "./cheat_discover_map_reducer.js";
export { CheatDiscoverMap };
import { CheatExperienceGrant } from "./cheat_experience_grant_reducer.js";
export { CheatExperienceGrant };
import { CheatGrantKnowledge } from "./cheat_grant_knowledge_reducer.js";
export { CheatGrantKnowledge };
import { CheatGrantTeleportEnergy } from "./cheat_grant_teleport_energy_reducer.js";
export { CheatGrantTeleportEnergy };
import { CheatItemStackGrant } from "./cheat_item_stack_grant_reducer.js";
export { CheatItemStackGrant };
import { CheatItemStackGrantAndEquip } from "./cheat_item_stack_grant_and_equip_reducer.js";
export { CheatItemStackGrantAndEquip };
import { CheatKill } from "./cheat_kill_reducer.js";
export { CheatKill };
import { CheatPavingAddTile } from "./cheat_paving_add_tile_reducer.js";
export { CheatPavingAddTile };
import { CheatPavingDestroy } from "./cheat_paving_destroy_reducer.js";
export { CheatPavingDestroy };
import { CheatPillarShapingAddPillar } from "./cheat_pillar_shaping_add_pillar_reducer.js";
export { CheatPillarShapingAddPillar };
import { CheatPillarShapingDestroy } from "./cheat_pillar_shaping_destroy_reducer.js";
export { CheatPillarShapingDestroy };
import { CheatProjectSiteAddAllMaterials } from "./cheat_project_site_add_all_materials_reducer.js";
export { CheatProjectSiteAddAllMaterials };
import { CheatRemoveEntityBuilding } from "./cheat_remove_entity_building_reducer.js";
export { CheatRemoveEntityBuilding };
import { CheatRemoveEntityEnemy } from "./cheat_remove_entity_enemy_reducer.js";
export { CheatRemoveEntityEnemy };
import { CheatRemoveEntityResource } from "./cheat_remove_entity_resource_reducer.js";
export { CheatRemoveEntityResource };
import { CheatRemoveItemQuantity } from "./cheat_remove_item_quantity_reducer.js";
export { CheatRemoveItemQuantity };
import { CheatSetAiDebugState } from "./cheat_set_ai_debug_state_reducer.js";
export { CheatSetAiDebugState };
import { CheatSpawnLootChest } from "./cheat_spawn_loot_chest_reducer.js";
export { CheatSpawnLootChest };
import { CheatTeleportFloat } from "./cheat_teleport_float_reducer.js";
export { CheatTeleportFloat };
import { CheatTerraform } from "./cheat_terraform_reducer.js";
export { CheatTerraform };
import { CheatToggleActiveCollectible } from "./cheat_toggle_active_collectible_reducer.js";
export { CheatToggleActiveCollectible };
import { CheatWarp } from "./cheat_warp_reducer.js";
export { CheatWarp };
import { ClaimAddMember } from "./claim_add_member_reducer.js";
export { ClaimAddMember };
import { ClaimAddRecruitment } from "./claim_add_recruitment_reducer.js";
export { ClaimAddRecruitment };
import { ClaimAddTile } from "./claim_add_tile_reducer.js";
export { ClaimAddTile };
import { ClaimApplyForRecruitment } from "./claim_apply_for_recruitment_reducer.js";
export { ClaimApplyForRecruitment };
import { ClaimLeave } from "./claim_leave_reducer.js";
export { ClaimLeave };
import { ClaimPurchaseSuppliesFromPlayer } from "./claim_purchase_supplies_from_player_reducer.js";
export { ClaimPurchaseSuppliesFromPlayer };
import { ClaimRemoveMember } from "./claim_remove_member_reducer.js";
export { ClaimRemoveMember };
import { ClaimRemoveRecruitment } from "./claim_remove_recruitment_reducer.js";
export { ClaimRemoveRecruitment };
import { ClaimRemoveTile } from "./claim_remove_tile_reducer.js";
export { ClaimRemoveTile };
import { ClaimRename } from "./claim_rename_reducer.js";
export { ClaimRename };
import { ClaimResupply } from "./claim_resupply_reducer.js";
export { ClaimResupply };
import { ClaimResupplyStart } from "./claim_resupply_start_reducer.js";
export { ClaimResupplyStart };
import { ClaimSetMemberPermissions } from "./claim_set_member_permissions_reducer.js";
export { ClaimSetMemberPermissions };
import { ClaimSetPurchaseSupplyPrice } from "./claim_set_purchase_supply_price_reducer.js";
export { ClaimSetPurchaseSupplyPrice };
import { ClaimSetPurchaseSupplyThreshold } from "./claim_set_purchase_supply_threshold_reducer.js";
export { ClaimSetPurchaseSupplyThreshold };
import { ClaimTakeOwnership } from "./claim_take_ownership_reducer.js";
export { ClaimTakeOwnership };
import { ClaimTechCancel } from "./claim_tech_cancel_reducer.js";
export { ClaimTechCancel };
import { ClaimTechLearn } from "./claim_tech_learn_reducer.js";
export { ClaimTechLearn };
import { ClaimTechUnlockTech } from "./claim_tech_unlock_tech_reducer.js";
export { ClaimTechUnlockTech };
import { ClaimTransferOwnership } from "./claim_transfer_ownership_reducer.js";
export { ClaimTransferOwnership };
import { ClaimTreasuryDeposit } from "./claim_treasury_deposit_reducer.js";
export { ClaimTreasuryDeposit };
import { ClaimWithdrawFromTreasury } from "./claim_withdraw_from_treasury_reducer.js";
export { ClaimWithdrawFromTreasury };
import { ClearStagedStaticData } from "./clear_staged_static_data_reducer.js";
export { ClearStagedStaticData };
import { ClosedListingCollect } from "./closed_listing_collect_reducer.js";
export { ClosedListingCollect };
import { CollectStatsReducer } from "./collect_stats_reducer_reducer.js";
export { CollectStatsReducer };
import { CollectibleActivate } from "./collectible_activate_reducer.js";
export { CollectibleActivate };
import { CommitStagedStaticData } from "./commit_staged_static_data_reducer.js";
export { CommitStagedStaticData };
import { CompleteOnboardingQuest } from "./complete_onboarding_quest_reducer.js";
export { CompleteOnboardingQuest };
import { CompleteOnboardingState } from "./complete_onboarding_state_reducer.js";
export { CompleteOnboardingState };
import { ConvertCollectibleToDeed } from "./convert_collectible_to_deed_reducer.js";
export { ConvertCollectibleToDeed };
import { ConvertDeedToCollectible } from "./convert_deed_to_collectible_reducer.js";
export { ConvertDeedToCollectible };
import { CraftCancel } from "./craft_cancel_reducer.js";
export { CraftCancel };
import { CraftCollect } from "./craft_collect_reducer.js";
export { CraftCollect };
import { CraftCollectAll } from "./craft_collect_all_reducer.js";
export { CraftCollectAll };
import { CraftContinue } from "./craft_continue_reducer.js";
export { CraftContinue };
import { CraftContinueStart } from "./craft_continue_start_reducer.js";
export { CraftContinueStart };
import { CraftInitiate } from "./craft_initiate_reducer.js";
export { CraftInitiate };
import { CraftInitiateStart } from "./craft_initiate_start_reducer.js";
export { CraftInitiateStart };
import { CraftSetPublic } from "./craft_set_public_reducer.js";
export { CraftSetPublic };
import { CurrentVersion } from "./current_version_reducer.js";
export { CurrentVersion };
import { DayNightAgentLoop } from "./day_night_agent_loop_reducer.js";
export { DayNightAgentLoop };
import { DeleteAllNpcs } from "./delete_all_npcs_reducer.js";
export { DeleteAllNpcs };
import { DeployableDeploy } from "./deployable_deploy_reducer.js";
export { DeployableDeploy };
import { DeployableDeployStart } from "./deployable_deploy_start_reducer.js";
export { DeployableDeployStart };
import { DeployableDismount } from "./deployable_dismount_reducer.js";
export { DeployableDismount };
import { DeployableDismountScheduled } from "./deployable_dismount_scheduled_reducer.js";
export { DeployableDismountScheduled };
import { DeployableMount } from "./deployable_mount_reducer.js";
export { DeployableMount };
import { DeployableMove } from "./deployable_move_reducer.js";
export { DeployableMove };
import { DeployableMoveOffBounds } from "./deployable_move_off_bounds_reducer.js";
export { DeployableMoveOffBounds };
import { DeployableMoveOffClaim } from "./deployable_move_off_claim_reducer.js";
export { DeployableMoveOffClaim };
import { DeployableStore } from "./deployable_store_reducer.js";
export { DeployableStore };
import { DeployableStoreStart } from "./deployable_store_start_reducer.js";
export { DeployableStoreStart };
import { DestroyDimensionNetwork } from "./destroy_dimension_network_reducer.js";
export { DestroyDimensionNetwork };
import { DevDeleteWorld } from "./dev_delete_world_reducer.js";
export { DevDeleteWorld };
import { DiscoverEntities } from "./discover_entities_reducer.js";
export { DiscoverEntities };
import { DroppedInventoryDespawn } from "./dropped_inventory_despawn_reducer.js";
export { DroppedInventoryDespawn };
import { DroppedInventoryLoseOwnership } from "./dropped_inventory_lose_ownership_reducer.js";
export { DroppedInventoryLoseOwnership };
import { DuelAgentTimerLoop } from "./duel_agent_timer_loop_reducer.js";
export { DuelAgentTimerLoop };
import { DuelDespawn } from "./duel_despawn_reducer.js";
export { DuelDespawn };
import { Eat } from "./eat_reducer.js";
export { Eat };
import { Emote } from "./emote_reducer.js";
export { Emote };
import { EmoteStart } from "./emote_start_reducer.js";
export { EmoteStart };
import { EmpireAddSiegeSupplies } from "./empire_add_siege_supplies_reducer.js";
export { EmpireAddSiegeSupplies };
import { EmpireClaimJoin } from "./empire_claim_join_reducer.js";
export { EmpireClaimJoin };
import { EmpireCollectHexiteCapsule } from "./empire_collect_hexite_capsule_reducer.js";
export { EmpireCollectHexiteCapsule };
import { EmpireDeploySiegeEngine } from "./empire_deploy_siege_engine_reducer.js";
export { EmpireDeploySiegeEngine };
import { EmpireDeploySiegeEngineStart } from "./empire_deploy_siege_engine_start_reducer.js";
export { EmpireDeploySiegeEngineStart };
import { EmpireQueueSupplies } from "./empire_queue_supplies_reducer.js";
export { EmpireQueueSupplies };
import { EmpireResupplyNode } from "./empire_resupply_node_reducer.js";
export { EmpireResupplyNode };
import { EmpireResupplyNodeStart } from "./empire_resupply_node_start_reducer.js";
export { EmpireResupplyNodeStart };
import { EmpireSiegeDepletedWatchtower } from "./empire_siege_depleted_watchtower_reducer.js";
export { EmpireSiegeDepletedWatchtower };
import { EndGracePeriod } from "./end_grace_period_reducer.js";
export { EndGracePeriod };
import { EnemyClearAggro } from "./enemy_clear_aggro_reducer.js";
export { EnemyClearAggro };
import { EnemyDespawn } from "./enemy_despawn_reducer.js";
export { EnemyDespawn };
import { EnemyDespawnFromMobMonitor } from "./enemy_despawn_from_mob_monitor_reducer.js";
export { EnemyDespawnFromMobMonitor };
import { EnemyDespawnFromMobMonitorBatch } from "./enemy_despawn_from_mob_monitor_batch_reducer.js";
export { EnemyDespawnFromMobMonitorBatch };
import { EnemyMove } from "./enemy_move_reducer.js";
export { EnemyMove };
import { EnemyMoveBatch } from "./enemy_move_batch_reducer.js";
export { EnemyMoveBatch };
import { EnemyRegenAgentLoop } from "./enemy_regen_agent_loop_reducer.js";
export { EnemyRegenAgentLoop };
import { EnemySetHealth } from "./enemy_set_health_reducer.js";
export { EnemySetHealth };
import { EnemySetHealthBatch } from "./enemy_set_health_batch_reducer.js";
export { EnemySetHealthBatch };
import { EnemySpawn } from "./enemy_spawn_reducer.js";
export { EnemySpawn };
import { EnemySpawnBatch } from "./enemy_spawn_batch_reducer.js";
export { EnemySpawnBatch };
import { EnemySpawnLoot } from "./enemy_spawn_loot_reducer.js";
export { EnemySpawnLoot };
import { EnvironmentDebuffAgentLoop } from "./environment_debuff_agent_loop_reducer.js";
export { EnvironmentDebuffAgentLoop };
import { EquipmentAdd } from "./equipment_add_reducer.js";
export { EquipmentAdd };
import { EquipmentRemove } from "./equipment_remove_reducer.js";
export { EquipmentRemove };
import { Extract } from "./extract_reducer.js";
export { Extract };
import { ExtractStart } from "./extract_start_reducer.js";
export { ExtractStart };
import { ForceStartAgents } from "./force_start_agents_reducer.js";
export { ForceStartAgents };
import { GenerateDevIsland } from "./generate_dev_island_reducer.js";
export { GenerateDevIsland };
import { GenerateFlatWorld } from "./generate_flat_world_reducer.js";
export { GenerateFlatWorld };
import { GenerateWorld } from "./generate_world_reducer.js";
export { GenerateWorld };
import { GrowthAgentLoop } from "./growth_agent_loop_reducer.js";
export { GrowthAgentLoop };
import { HideDeployable } from "./hide_deployable_reducer.js";
export { HideDeployable };
import { IdentityConnected } from "./identity_connected_reducer.js";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.js";
export { IdentityDisconnected };
import { ImportAchievementDesc } from "./import_achievement_desc_reducer.js";
export { ImportAchievementDesc };
import { ImportActiveBuffState } from "./import_active_buff_state_reducer.js";
export { ImportActiveBuffState };
import { ImportAdminBroadcast } from "./import_admin_broadcast_reducer.js";
export { ImportAdminBroadcast };
import { ImportAlertDesc } from "./import_alert_desc_reducer.js";
export { ImportAlertDesc };
import { ImportAlertState } from "./import_alert_state_reducer.js";
export { ImportAlertState };
import { ImportAttackOutcomeState } from "./import_attack_outcome_state_reducer.js";
export { ImportAttackOutcomeState };
import { ImportBiomeDesc } from "./import_biome_desc_reducer.js";
export { ImportBiomeDesc };
import { ImportBuffDesc } from "./import_buff_desc_reducer.js";
export { ImportBuffDesc };
import { ImportBuffTypeDesc } from "./import_buff_type_desc_reducer.js";
export { ImportBuffTypeDesc };
import { ImportBuildingClaimDesc } from "./import_building_claim_desc_reducer.js";
export { ImportBuildingClaimDesc };
import { ImportBuildingDesc } from "./import_building_desc_reducer.js";
export { ImportBuildingDesc };
import { ImportBuildingPortalDesc } from "./import_building_portal_desc_reducer.js";
export { ImportBuildingPortalDesc };
import { ImportBuildingRepairsDesc } from "./import_building_repairs_desc_reducer.js";
export { ImportBuildingRepairsDesc };
import { ImportBuildingSpawnDesc } from "./import_building_spawn_desc_reducer.js";
export { ImportBuildingSpawnDesc };
import { ImportBuildingState } from "./import_building_state_reducer.js";
export { ImportBuildingState };
import { ImportBuildingTypeDesc } from "./import_building_type_desc_reducer.js";
export { ImportBuildingTypeDesc };
import { ImportCargoDesc } from "./import_cargo_desc_reducer.js";
export { ImportCargoDesc };
import { ImportCharacterStatDesc } from "./import_character_stat_desc_reducer.js";
export { ImportCharacterStatDesc };
import { ImportCharacterStatsState } from "./import_character_stats_state_reducer.js";
export { ImportCharacterStatsState };
import { ImportChatMessageState } from "./import_chat_message_state_reducer.js";
export { ImportChatMessageState };
import { ImportChestRarityDesc } from "./import_chest_rarity_desc_reducer.js";
export { ImportChestRarityDesc };
import { ImportClaimLocalState } from "./import_claim_local_state_reducer.js";
export { ImportClaimLocalState };
import { ImportClaimRecruitmentState } from "./import_claim_recruitment_state_reducer.js";
export { ImportClaimRecruitmentState };
import { ImportClaimState } from "./import_claim_state_reducer.js";
export { ImportClaimState };
import { ImportClaimTechDesc } from "./import_claim_tech_desc_reducer.js";
export { ImportClaimTechDesc };
import { ImportClaimTechState } from "./import_claim_tech_state_reducer.js";
export { ImportClaimTechState };
import { ImportClaimTileCost } from "./import_claim_tile_cost_reducer.js";
export { ImportClaimTileCost };
import { ImportClaimTileState } from "./import_claim_tile_state_reducer.js";
export { ImportClaimTileState };
import { ImportClimbRequirementDesc } from "./import_climb_requirement_desc_reducer.js";
export { ImportClimbRequirementDesc };
import { ImportClothingDesc } from "./import_clothing_desc_reducer.js";
export { ImportClothingDesc };
import { ImportCollectibleDesc } from "./import_collectible_desc_reducer.js";
export { ImportCollectibleDesc };
import { ImportCombatActionDesc } from "./import_combat_action_desc_reducer.js";
export { ImportCombatActionDesc };
import { ImportCombatState } from "./import_combat_state_reducer.js";
export { ImportCombatState };
import { ImportConfig } from "./import_config_reducer.js";
export { ImportConfig };
import { ImportConstructionRecipeDesc } from "./import_construction_recipe_desc_reducer.js";
export { ImportConstructionRecipeDesc };
import { ImportCraftingRecipeDesc } from "./import_crafting_recipe_desc_reducer.js";
export { ImportCraftingRecipeDesc };
import { ImportDeconstructionRecipeDesc } from "./import_deconstruction_recipe_desc_reducer.js";
export { ImportDeconstructionRecipeDesc };
import { ImportDeployableDesc } from "./import_deployable_desc_reducer.js";
export { ImportDeployableDesc };
import { ImportDeployableState } from "./import_deployable_state_reducer.js";
export { ImportDeployableState };
import { ImportDimensionDescriptionState } from "./import_dimension_description_state_reducer.js";
export { ImportDimensionDescriptionState };
import { ImportDimensionNetworkDescriptionState } from "./import_dimension_network_description_state_reducer.js";
export { ImportDimensionNetworkDescriptionState };
import { ImportDistantVisibleEntityDesc } from "./import_distant_visible_entity_desc_reducer.js";
export { ImportDistantVisibleEntityDesc };
import { ImportDroppedInventoryState } from "./import_dropped_inventory_state_reducer.js";
export { ImportDroppedInventoryState };
import { ImportElevatorDesc } from "./import_elevator_desc_reducer.js";
export { ImportElevatorDesc };
import { ImportEmoteDesc } from "./import_emote_desc_reducer.js";
export { ImportEmoteDesc };
import { ImportEmpireColorsDesc } from "./import_empire_colors_desc_reducer.js";
export { ImportEmpireColorsDesc };
import { ImportEmpireIconDesc } from "./import_empire_icon_desc_reducer.js";
export { ImportEmpireIconDesc };
import { ImportEmpireNotificationDesc } from "./import_empire_notification_desc_reducer.js";
export { ImportEmpireNotificationDesc };
import { ImportEmpireRankDesc } from "./import_empire_rank_desc_reducer.js";
export { ImportEmpireRankDesc };
import { ImportEmpireSuppliesDesc } from "./import_empire_supplies_desc_reducer.js";
export { ImportEmpireSuppliesDesc };
import { ImportEmpireTerritoryDesc } from "./import_empire_territory_desc_reducer.js";
export { ImportEmpireTerritoryDesc };
import { ImportEnemyAiParamsDesc } from "./import_enemy_ai_params_desc_reducer.js";
export { ImportEnemyAiParamsDesc };
import { ImportEnemyDesc } from "./import_enemy_desc_reducer.js";
export { ImportEnemyDesc };
import { ImportEnemyState } from "./import_enemy_state_reducer.js";
export { ImportEnemyState };
import { ImportEnvironmentDebuffDesc } from "./import_environment_debuff_desc_reducer.js";
export { ImportEnvironmentDebuffDesc };
import { ImportEquipmentDesc } from "./import_equipment_desc_reducer.js";
export { ImportEquipmentDesc };
import { ImportEquipmentState } from "./import_equipment_state_reducer.js";
export { ImportEquipmentState };
import { ImportExperienceState } from "./import_experience_state_reducer.js";
export { ImportExperienceState };
import { ImportExplorationChunksState } from "./import_exploration_chunks_state_reducer.js";
export { ImportExplorationChunksState };
import { ImportExtractionRecipeDesc } from "./import_extraction_recipe_desc_reducer.js";
export { ImportExtractionRecipeDesc };
import { ImportFoodDesc } from "./import_food_desc_reducer.js";
export { ImportFoodDesc };
import { ImportFootprintTileState } from "./import_footprint_tile_state_reducer.js";
export { ImportFootprintTileState };
import { ImportGateDesc } from "./import_gate_desc_reducer.js";
export { ImportGateDesc };
import { ImportGlobals } from "./import_globals_reducer.js";
export { ImportGlobals };
import { ImportGrowthState } from "./import_growth_state_reducer.js";
export { ImportGrowthState };
import { ImportHealthState } from "./import_health_state_reducer.js";
export { ImportHealthState };
import { ImportHerdCache } from "./import_herd_cache_reducer.js";
export { ImportHerdCache };
import { ImportHexiteExchangeEntryDesc } from "./import_hexite_exchange_entry_desc_reducer.js";
export { ImportHexiteExchangeEntryDesc };
import { ImportIdentityRole } from "./import_identity_role_reducer.js";
export { ImportIdentityRole };
import { ImportInteriorCollapseTriggerState } from "./import_interior_collapse_trigger_state_reducer.js";
export { ImportInteriorCollapseTriggerState };
import { ImportInteriorEnvironmentDesc } from "./import_interior_environment_desc_reducer.js";
export { ImportInteriorEnvironmentDesc };
import { ImportInteriorInstanceDesc } from "./import_interior_instance_desc_reducer.js";
export { ImportInteriorInstanceDesc };
import { ImportInteriorNetworkDesc } from "./import_interior_network_desc_reducer.js";
export { ImportInteriorNetworkDesc };
import { ImportInteriorPortalConnectionsDesc } from "./import_interior_portal_connections_desc_reducer.js";
export { ImportInteriorPortalConnectionsDesc };
import { ImportInteriorShapeDesc } from "./import_interior_shape_desc_reducer.js";
export { ImportInteriorShapeDesc };
import { ImportInteriorSpawnDesc } from "./import_interior_spawn_desc_reducer.js";
export { ImportInteriorSpawnDesc };
import { ImportInventoryState } from "./import_inventory_state_reducer.js";
export { ImportInventoryState };
import { ImportItemConversionRecipeDesc } from "./import_item_conversion_recipe_desc_reducer.js";
export { ImportItemConversionRecipeDesc };
import { ImportItemDesc } from "./import_item_desc_reducer.js";
export { ImportItemDesc };
import { ImportItemListDesc } from "./import_item_list_desc_reducer.js";
export { ImportItemListDesc };
import { ImportKnowledgeAchievementState } from "./import_knowledge_achievement_state_reducer.js";
export { ImportKnowledgeAchievementState };
import { ImportKnowledgeBattleActionState } from "./import_knowledge_battle_action_state_reducer.js";
export { ImportKnowledgeBattleActionState };
import { ImportKnowledgeBuildingState } from "./import_knowledge_building_state_reducer.js";
export { ImportKnowledgeBuildingState };
import { ImportKnowledgeCargoState } from "./import_knowledge_cargo_state_reducer.js";
export { ImportKnowledgeCargoState };
import { ImportKnowledgeConstructionState } from "./import_knowledge_construction_state_reducer.js";
export { ImportKnowledgeConstructionState };
import { ImportKnowledgeCraftState } from "./import_knowledge_craft_state_reducer.js";
export { ImportKnowledgeCraftState };
import { ImportKnowledgeDeployableState } from "./import_knowledge_deployable_state_reducer.js";
export { ImportKnowledgeDeployableState };
import { ImportKnowledgeEnemyState } from "./import_knowledge_enemy_state_reducer.js";
export { ImportKnowledgeEnemyState };
import { ImportKnowledgeExtractState } from "./import_knowledge_extract_state_reducer.js";
export { ImportKnowledgeExtractState };
import { ImportKnowledgeItemState } from "./import_knowledge_item_state_reducer.js";
export { ImportKnowledgeItemState };
import { ImportKnowledgeLoreState } from "./import_knowledge_lore_state_reducer.js";
export { ImportKnowledgeLoreState };
import { ImportKnowledgeNpcState } from "./import_knowledge_npc_state_reducer.js";
export { ImportKnowledgeNpcState };
import { ImportKnowledgePavingState } from "./import_knowledge_paving_state_reducer.js";
export { ImportKnowledgePavingState };
import { ImportKnowledgePillarShapingState } from "./import_knowledge_pillar_shaping_state_reducer.js";
export { ImportKnowledgePillarShapingState };
import { ImportKnowledgeResourcePlacementState } from "./import_knowledge_resource_placement_state_reducer.js";
export { ImportKnowledgeResourcePlacementState };
import { ImportKnowledgeResourceState } from "./import_knowledge_resource_state_reducer.js";
export { ImportKnowledgeResourceState };
import { ImportKnowledgeRuinsState } from "./import_knowledge_ruins_state_reducer.js";
export { ImportKnowledgeRuinsState };
import { ImportKnowledgeScrollDesc } from "./import_knowledge_scroll_desc_reducer.js";
export { ImportKnowledgeScrollDesc };
import { ImportKnowledgeScrollTypeDesc } from "./import_knowledge_scroll_type_desc_reducer.js";
export { ImportKnowledgeScrollTypeDesc };
import { ImportKnowledgeSecondaryState } from "./import_knowledge_secondary_state_reducer.js";
export { ImportKnowledgeSecondaryState };
import { ImportKnowledgeStatModifierDesc } from "./import_knowledge_stat_modifier_desc_reducer.js";
export { ImportKnowledgeStatModifierDesc };
import { ImportKnowledgeVaultState } from "./import_knowledge_vault_state_reducer.js";
export { ImportKnowledgeVaultState };
import { ImportLocationCache } from "./import_location_cache_reducer.js";
export { ImportLocationCache };
import { ImportLocationState } from "./import_location_state_reducer.js";
export { ImportLocationState };
import { ImportLootChestDesc } from "./import_loot_chest_desc_reducer.js";
export { ImportLootChestDesc };
import { ImportLootChestState } from "./import_loot_chest_state_reducer.js";
export { ImportLootChestState };
import { ImportLootRarityDesc } from "./import_loot_rarity_desc_reducer.js";
export { ImportLootRarityDesc };
import { ImportLootTableDesc } from "./import_loot_table_desc_reducer.js";
export { ImportLootTableDesc };
import { ImportMobileEntityState } from "./import_mobile_entity_state_reducer.js";
export { ImportMobileEntityState };
import { ImportMountingState } from "./import_mounting_state_reducer.js";
export { ImportMountingState };
import { ImportNpcDesc } from "./import_npc_desc_reducer.js";
export { ImportNpcDesc };
import { ImportNpcState } from "./import_npc_state_reducer.js";
export { ImportNpcState };
import { ImportOnboardingRewardDesc } from "./import_onboarding_reward_desc_reducer.js";
export { ImportOnboardingRewardDesc };
import { ImportOnboardingState } from "./import_onboarding_state_reducer.js";
export { ImportOnboardingState };
import { ImportParametersDesc } from "./import_parameters_desc_reducer.js";
export { ImportParametersDesc };
import { ImportPathfindingDesc } from "./import_pathfinding_desc_reducer.js";
export { ImportPathfindingDesc };
import { ImportPavedTileState } from "./import_paved_tile_state_reducer.js";
export { ImportPavedTileState };
import { ImportPavingTileDesc } from "./import_paving_tile_desc_reducer.js";
export { ImportPavingTileDesc };
import { ImportPillarShapingDesc } from "./import_pillar_shaping_desc_reducer.js";
export { ImportPillarShapingDesc };
import { ImportPlayerActionDesc } from "./import_player_action_desc_reducer.js";
export { ImportPlayerActionDesc };
import { ImportPlayerActionState } from "./import_player_action_state_reducer.js";
export { ImportPlayerActionState };
import { ImportPlayerHousingDesc } from "./import_player_housing_desc_reducer.js";
export { ImportPlayerHousingDesc };
import { ImportPlayerPrefsState } from "./import_player_prefs_state_reducer.js";
export { ImportPlayerPrefsState };
import { ImportPlayerState } from "./import_player_state_reducer.js";
export { ImportPlayerState };
import { ImportPortalState } from "./import_portal_state_reducer.js";
export { ImportPortalState };
import { ImportPrivateParametersDesc } from "./import_private_parameters_desc_reducer.js";
export { ImportPrivateParametersDesc };
import { ImportProgressiveActionState } from "./import_progressive_action_state_reducer.js";
export { ImportProgressiveActionState };
import { ImportProjectSiteState } from "./import_project_site_state_reducer.js";
export { ImportProjectSiteState };
import { ImportRentState } from "./import_rent_state_reducer.js";
export { ImportRentState };
import { ImportReservedNameDesc } from "./import_reserved_name_desc_reducer.js";
export { ImportReservedNameDesc };
import { ImportResourceClumpDesc } from "./import_resource_clump_desc_reducer.js";
export { ImportResourceClumpDesc };
import { ImportResourceCount } from "./import_resource_count_reducer.js";
export { ImportResourceCount };
import { ImportResourceDesc } from "./import_resource_desc_reducer.js";
export { ImportResourceDesc };
import { ImportResourceGrowthRecipeDesc } from "./import_resource_growth_recipe_desc_reducer.js";
export { ImportResourceGrowthRecipeDesc };
import { ImportResourcePlacementRecipeDesc } from "./import_resource_placement_recipe_desc_reducer.js";
export { ImportResourcePlacementRecipeDesc };
import { ImportResourceState } from "./import_resource_state_reducer.js";
export { ImportResourceState };
import { ImportResourcesLog } from "./import_resources_log_reducer.js";
export { ImportResourcesLog };
import { ImportSatiationState } from "./import_satiation_state_reducer.js";
export { ImportSatiationState };
import { ImportSecondaryKnowledgeDesc } from "./import_secondary_knowledge_desc_reducer.js";
export { ImportSecondaryKnowledgeDesc };
import { ImportServerIdentity } from "./import_server_identity_reducer.js";
export { ImportServerIdentity };
import { ImportSignedInPlayerState } from "./import_signed_in_player_state_reducer.js";
export { ImportSignedInPlayerState };
import { ImportSkillDesc } from "./import_skill_desc_reducer.js";
export { ImportSkillDesc };
import { ImportStaminaState } from "./import_stamina_state_reducer.js";
export { ImportStaminaState };
import { ImportTargetState } from "./import_target_state_reducer.js";
export { ImportTargetState };
import { ImportTargetableState } from "./import_targetable_state_reducer.js";
export { ImportTargetableState };
import { ImportTargetingMatrixDesc } from "./import_targeting_matrix_desc_reducer.js";
export { ImportTargetingMatrixDesc };
import { ImportTeleportItemDesc } from "./import_teleport_item_desc_reducer.js";
export { ImportTeleportItemDesc };
import { ImportTerraformRecipeDesc } from "./import_terraform_recipe_desc_reducer.js";
export { ImportTerraformRecipeDesc };
import { ImportTerrainChunkState } from "./import_terrain_chunk_state_reducer.js";
export { ImportTerrainChunkState };
import { ImportToolDesc } from "./import_tool_desc_reducer.js";
export { ImportToolDesc };
import { ImportToolTypeDesc } from "./import_tool_type_desc_reducer.js";
export { ImportToolTypeDesc };
import { ImportTradeOrderState } from "./import_trade_order_state_reducer.js";
export { ImportTradeOrderState };
import { ImportTradeSessionState } from "./import_trade_session_state_reducer.js";
export { ImportTradeSessionState };
import { ImportTravelerTaskDesc } from "./import_traveler_task_desc_reducer.js";
export { ImportTravelerTaskDesc };
import { ImportTravelerTradeOrderDesc } from "./import_traveler_trade_order_desc_reducer.js";
export { ImportTravelerTradeOrderDesc };
import { ImportUserModerationState } from "./import_user_moderation_state_reducer.js";
export { ImportUserModerationState };
import { ImportUserState } from "./import_user_state_reducer.js";
export { ImportUserState };
import { ImportVaultState } from "./import_vault_state_reducer.js";
export { ImportVaultState };
import { ImportWallDesc } from "./import_wall_desc_reducer.js";
export { ImportWallDesc };
import { ImportWeaponDesc } from "./import_weapon_desc_reducer.js";
export { ImportWeaponDesc };
import { ImportWeaponTypeDesc } from "./import_weapon_type_desc_reducer.js";
export { ImportWeaponTypeDesc };
import { ImportWorldRegionNameState } from "./import_world_region_name_state_reducer.js";
export { ImportWorldRegionNameState };
import { ImportWorldRegionState } from "./import_world_region_state_reducer.js";
export { ImportWorldRegionState };
import { InsertDeveloperIdentity } from "./insert_developer_identity_reducer.js";
export { InsertDeveloperIdentity };
import { InsertResourcesLog } from "./insert_resources_log_reducer.js";
export { InsertResourcesLog };
import { InsertTerrainChunk } from "./insert_terrain_chunk_reducer.js";
export { InsertTerrainChunk };
import { InteriorSetCollapsed } from "./interior_set_collapsed_reducer.js";
export { InteriorSetCollapsed };
import { InteriorSetCollapsedScheduled } from "./interior_set_collapsed_scheduled_reducer.js";
export { InteriorSetCollapsedScheduled };
import { InventoryCreatePersonal } from "./inventory_create_personal_reducer.js";
export { InventoryCreatePersonal };
import { InventorySort } from "./inventory_sort_reducer.js";
export { InventorySort };
import { ItemConvert } from "./item_convert_reducer.js";
export { ItemConvert };
import { ItemConvertStart } from "./item_convert_start_reducer.js";
export { ItemConvertStart };
import { ItemDrop } from "./item_drop_reducer.js";
export { ItemDrop };
import { ItemPickUp } from "./item_pick_up_reducer.js";
export { ItemPickUp };
import { ItemStackMove } from "./item_stack_move_reducer.js";
export { ItemStackMove };
import { ItemStackMoveAll } from "./item_stack_move_all_reducer.js";
export { ItemStackMoveAll };
import { ItemStackSplit } from "./item_stack_split_reducer.js";
export { ItemStackSplit };
import { ItemUse } from "./item_use_reducer.js";
export { ItemUse };
import { ItemUseStart } from "./item_use_start_reducer.js";
export { ItemUseStart };
import { LoadConfig } from "./load_config_reducer.js";
export { LoadConfig };
import { LogClaimMemberLeaderboard } from "./log_claim_member_leaderboard_reducer.js";
export { LogClaimMemberLeaderboard };
import { LogClaimTierLeaderboard } from "./log_claim_tier_leaderboard_reducer.js";
export { LogClaimTierLeaderboard };
import { LootChestDespawn } from "./loot_chest_despawn_reducer.js";
export { LootChestDespawn };
import { LootChestSpawn } from "./loot_chest_spawn_reducer.js";
export { LootChestSpawn };
import { NpcAiAgentLoop } from "./npc_ai_agent_loop_reducer.js";
export { NpcAiAgentLoop };
import { OnDurabilityZero } from "./on_durability_zero_reducer.js";
export { OnDurabilityZero };
import { OnInterModuleMessageProcessed } from "./on_inter_module_message_processed_reducer.js";
export { OnInterModuleMessageProcessed };
import { OrderCancel } from "./order_cancel_reducer.js";
export { OrderCancel };
import { OrderCollect } from "./order_collect_reducer.js";
export { OrderCollect };
import { OrderEditBuyOrder } from "./order_edit_buy_order_reducer.js";
export { OrderEditBuyOrder };
import { OrderEditSellOrder } from "./order_edit_sell_order_reducer.js";
export { OrderEditSellOrder };
import { OrderPostBuyOrder } from "./order_post_buy_order_reducer.js";
export { OrderPostBuyOrder };
import { OrderPostSellOrder } from "./order_post_sell_order_reducer.js";
export { OrderPostSellOrder };
import { PassiveCraftCancel } from "./passive_craft_cancel_reducer.js";
export { PassiveCraftCancel };
import { PassiveCraftCollect } from "./passive_craft_collect_reducer.js";
export { PassiveCraftCollect };
import { PassiveCraftCollectAll } from "./passive_craft_collect_all_reducer.js";
export { PassiveCraftCollectAll };
import { PassiveCraftProcess } from "./passive_craft_process_reducer.js";
export { PassiveCraftProcess };
import { PassiveCraftQueue } from "./passive_craft_queue_reducer.js";
export { PassiveCraftQueue };
import { PausePlayTimer } from "./pause_play_timer_reducer.js";
export { PausePlayTimer };
import { PavingDestroyTile } from "./paving_destroy_tile_reducer.js";
export { PavingDestroyTile };
import { PavingDestroyTileStart } from "./paving_destroy_tile_start_reducer.js";
export { PavingDestroyTileStart };
import { PavingPlaceTile } from "./paving_place_tile_reducer.js";
export { PavingPlaceTile };
import { PavingPlaceTileStart } from "./paving_place_tile_start_reducer.js";
export { PavingPlaceTileStart };
import { PermissionEdit } from "./permission_edit_reducer.js";
export { PermissionEdit };
import { PillarShapingDestroy } from "./pillar_shaping_destroy_reducer.js";
export { PillarShapingDestroy };
import { PillarShapingDestroyStart } from "./pillar_shaping_destroy_start_reducer.js";
export { PillarShapingDestroyStart };
import { PillarShapingPlacePillar } from "./pillar_shaping_place_pillar_reducer.js";
export { PillarShapingPlacePillar };
import { PillarShapingPlacePillarStart } from "./pillar_shaping_place_pillar_start_reducer.js";
export { PillarShapingPlacePillarStart };
import { PlayerActionCancel } from "./player_action_cancel_reducer.js";
export { PlayerActionCancel };
import { PlayerCancelRegionTransfer } from "./player_cancel_region_transfer_reducer.js";
export { PlayerCancelRegionTransfer };
import { PlayerClearActionState } from "./player_clear_action_state_reducer.js";
export { PlayerClearActionState };
import { PlayerClimb } from "./player_climb_reducer.js";
export { PlayerClimb };
import { PlayerClimbStart } from "./player_climb_start_reducer.js";
export { PlayerClimbStart };
import { PlayerCompleteTask } from "./player_complete_task_reducer.js";
export { PlayerCompleteTask };
import { PlayerDeathStart } from "./player_death_start_reducer.js";
export { PlayerDeathStart };
import { PlayerDismissAlert } from "./player_dismiss_alert_reducer.js";
export { PlayerDismissAlert };
import { PlayerDuelInitiate } from "./player_duel_initiate_reducer.js";
export { PlayerDuelInitiate };
import { PlayerElevatorArrive } from "./player_elevator_arrive_reducer.js";
export { PlayerElevatorArrive };
import { PlayerHousingChangeEntrance } from "./player_housing_change_entrance_reducer.js";
export { PlayerHousingChangeEntrance };
import { PlayerHousingEnter } from "./player_housing_enter_reducer.js";
export { PlayerHousingEnter };
import { PlayerHousingEvictPlayer } from "./player_housing_evict_player_reducer.js";
export { PlayerHousingEvictPlayer };
import { PlayerHousingEvictPlayerComplete } from "./player_housing_evict_player_complete_reducer.js";
export { PlayerHousingEvictPlayerComplete };
import { PlayerHousingIncomeAgentLoop } from "./player_housing_income_agent_loop_reducer.js";
export { PlayerHousingIncomeAgentLoop };
import { PlayerHousingRequestAccess } from "./player_housing_request_access_reducer.js";
export { PlayerHousingRequestAccess };
import { PlayerHousingUpdate } from "./player_housing_update_reducer.js";
export { PlayerHousingUpdate };
import { PlayerMove } from "./player_move_reducer.js";
export { PlayerMove };
import { PlayerNotificationEventReducer } from "./player_notification_event_reducer_reducer.js";
export { PlayerNotificationEventReducer };
import { PlayerQueueJoin } from "./player_queue_join_reducer.js";
export { PlayerQueueJoin };
import { PlayerQueueLeave } from "./player_queue_leave_reducer.js";
export { PlayerQueueLeave };
import { PlayerRegenAgentLoop } from "./player_regen_agent_loop_reducer.js";
export { PlayerRegenAgentLoop };
import { PlayerRegionCrossover } from "./player_region_crossover_reducer.js";
export { PlayerRegionCrossover };
import { PlayerRegionTransferEventReducer } from "./player_region_transfer_event_reducer_reducer.js";
export { PlayerRegionTransferEventReducer };
import { PlayerRespawn } from "./player_respawn_reducer.js";
export { PlayerRespawn };
import { PlayerSetDefaultDeployable } from "./player_set_default_deployable_reducer.js";
export { PlayerSetDefaultDeployable };
import { PlayerSetNameOutcomeEventReducer } from "./player_set_name_outcome_event_reducer_reducer.js";
export { PlayerSetNameOutcomeEventReducer };
import { PlayerTeleportHome } from "./player_teleport_home_reducer.js";
export { PlayerTeleportHome };
import { PlayerTeleportHomeStart } from "./player_teleport_home_start_reducer.js";
export { PlayerTeleportHomeStart };
import { PlayerTeleportWaystone } from "./player_teleport_waystone_reducer.js";
export { PlayerTeleportWaystone };
import { PlayerTeleportWaystoneStart } from "./player_teleport_waystone_start_reducer.js";
export { PlayerTeleportWaystoneStart };
import { PlayerUseElevator } from "./player_use_elevator_reducer.js";
export { PlayerUseElevator };
import { PlayerVoteConclude } from "./player_vote_conclude_reducer.js";
export { PlayerVoteConclude };
import { PocketSwapContents } from "./pocket_swap_contents_reducer.js";
export { PocketSwapContents };
import { PortalEnter } from "./portal_enter_reducer.js";
export { PortalEnter };
import { ProcessInterModuleMessage } from "./process_inter_module_message_reducer.js";
export { ProcessInterModuleMessage };
import { ProjectSiteAddMaterials } from "./project_site_add_materials_reducer.js";
export { ProjectSiteAddMaterials };
import { ProjectSiteAdvanceProject } from "./project_site_advance_project_reducer.js";
export { ProjectSiteAdvanceProject };
import { ProjectSiteAdvanceProjectStart } from "./project_site_advance_project_start_reducer.js";
export { ProjectSiteAdvanceProjectStart };
import { ProjectSiteCancel } from "./project_site_cancel_reducer.js";
export { ProjectSiteCancel };
import { ProjectSitePlace } from "./project_site_place_reducer.js";
export { ProjectSitePlace };
import { RegionPopuplationAgentLoop } from "./region_popuplation_agent_loop_reducer.js";
export { RegionPopuplationAgentLoop };
import { RentAddListing } from "./rent_add_listing_reducer.js";
export { RentAddListing };
import { RentAddTenant } from "./rent_add_tenant_reducer.js";
export { RentAddTenant };
import { RentCollectEvictionFee } from "./rent_collect_eviction_fee_reducer.js";
export { RentCollectEvictionFee };
import { RentCollectorAgentLoop } from "./rent_collector_agent_loop_reducer.js";
export { RentCollectorAgentLoop };
import { RentDepositCoins } from "./rent_deposit_coins_reducer.js";
export { RentDepositCoins };
import { RentEvict } from "./rent_evict_reducer.js";
export { RentEvict };
import { RentEvictTerm } from "./rent_evict_term_reducer.js";
export { RentEvictTerm };
import { RentPurchase } from "./rent_purchase_reducer.js";
export { RentPurchase };
import { RentRemoveTenant } from "./rent_remove_tenant_reducer.js";
export { RentRemoveTenant };
import { RentSetDailyRate } from "./rent_set_daily_rate_reducer.js";
export { RentSetDailyRate };
import { RentTerminate } from "./rent_terminate_reducer.js";
export { RentTerminate };
import { RentUnlist } from "./rent_unlist_reducer.js";
export { RentUnlist };
import { ReportChatMessage } from "./report_chat_message_reducer.js";
export { ReportChatMessage };
import { ReportPlayer } from "./report_player_reducer.js";
export { ReportPlayer };
import { ResetChunkIndex } from "./reset_chunk_index_reducer.js";
export { ResetChunkIndex };
import { ResetChunkIndexWithDimension } from "./reset_chunk_index_with_dimension_reducer.js";
export { ResetChunkIndexWithDimension };
import { ResetMobileEntityPosition } from "./reset_mobile_entity_position_reducer.js";
export { ResetMobileEntityPosition };
import { ResetOnboarding } from "./reset_onboarding_reducer.js";
export { ResetOnboarding };
import { ResourceSpawnScheduled } from "./resource_spawn_scheduled_reducer.js";
export { ResourceSpawnScheduled };
import { ResourcesRegen } from "./resources_regen_reducer.js";
export { ResourcesRegen };
import { RespawnInteriorNpcs } from "./respawn_interior_npcs_reducer.js";
export { RespawnInteriorNpcs };
import { RespawnResourceInChunk } from "./respawn_resource_in_chunk_reducer.js";
export { RespawnResourceInChunk };
import { RetrieveLostItem } from "./retrieve_lost_item_reducer.js";
export { RetrieveLostItem };
import { ScrollRead } from "./scroll_read_reducer.js";
export { ScrollRead };
import { SearchForClosestBuilding } from "./search_for_closest_building_reducer.js";
export { SearchForClosestBuilding };
import { SearchForClosestBuildingType } from "./search_for_closest_building_type_reducer.js";
export { SearchForClosestBuildingType };
import { ServerTeleportPlayer } from "./server_teleport_player_reducer.js";
export { ServerTeleportPlayer };
import { SetHome } from "./set_home_reducer.js";
export { SetHome };
import { SignIn } from "./sign_in_reducer.js";
export { SignIn };
import { SignOut } from "./sign_out_reducer.js";
export { SignOut };
import { Sleep } from "./sleep_reducer.js";
export { Sleep };
import { StageAchievementDesc } from "./stage_achievement_desc_reducer.js";
export { StageAchievementDesc };
import { StageAlertDesc } from "./stage_alert_desc_reducer.js";
export { StageAlertDesc };
import { StageBiomeDesc } from "./stage_biome_desc_reducer.js";
export { StageBiomeDesc };
import { StageBuffDesc } from "./stage_buff_desc_reducer.js";
export { StageBuffDesc };
import { StageBuffTypeDesc } from "./stage_buff_type_desc_reducer.js";
export { StageBuffTypeDesc };
import { StageBuildingClaimDesc } from "./stage_building_claim_desc_reducer.js";
export { StageBuildingClaimDesc };
import { StageBuildingDesc } from "./stage_building_desc_reducer.js";
export { StageBuildingDesc };
import { StageBuildingPortalDesc } from "./stage_building_portal_desc_reducer.js";
export { StageBuildingPortalDesc };
import { StageBuildingRepairsDesc } from "./stage_building_repairs_desc_reducer.js";
export { StageBuildingRepairsDesc };
import { StageBuildingSpawnDesc } from "./stage_building_spawn_desc_reducer.js";
export { StageBuildingSpawnDesc };
import { StageBuildingTypeDesc } from "./stage_building_type_desc_reducer.js";
export { StageBuildingTypeDesc };
import { StageCargoDesc } from "./stage_cargo_desc_reducer.js";
export { StageCargoDesc };
import { StageCharacterStatDesc } from "./stage_character_stat_desc_reducer.js";
export { StageCharacterStatDesc };
import { StageChestRarityDesc } from "./stage_chest_rarity_desc_reducer.js";
export { StageChestRarityDesc };
import { StageClaimTechDesc } from "./stage_claim_tech_desc_reducer.js";
export { StageClaimTechDesc };
import { StageClaimTileCost } from "./stage_claim_tile_cost_reducer.js";
export { StageClaimTileCost };
import { StageClimbRequirementDesc } from "./stage_climb_requirement_desc_reducer.js";
export { StageClimbRequirementDesc };
import { StageClothingDesc } from "./stage_clothing_desc_reducer.js";
export { StageClothingDesc };
import { StageCollectibleDesc } from "./stage_collectible_desc_reducer.js";
export { StageCollectibleDesc };
import { StageCombatActionDesc } from "./stage_combat_action_desc_reducer.js";
export { StageCombatActionDesc };
import { StageConstructionRecipeDesc } from "./stage_construction_recipe_desc_reducer.js";
export { StageConstructionRecipeDesc };
import { StageCraftingRecipeDesc } from "./stage_crafting_recipe_desc_reducer.js";
export { StageCraftingRecipeDesc };
import { StageDeconstructionRecipeDesc } from "./stage_deconstruction_recipe_desc_reducer.js";
export { StageDeconstructionRecipeDesc };
import { StageDeployableDesc } from "./stage_deployable_desc_reducer.js";
export { StageDeployableDesc };
import { StageDistantVisibleEntityDesc } from "./stage_distant_visible_entity_desc_reducer.js";
export { StageDistantVisibleEntityDesc };
import { StageElevatorDesc } from "./stage_elevator_desc_reducer.js";
export { StageElevatorDesc };
import { StageEmoteDesc } from "./stage_emote_desc_reducer.js";
export { StageEmoteDesc };
import { StageEmpireColorsDesc } from "./stage_empire_colors_desc_reducer.js";
export { StageEmpireColorsDesc };
import { StageEmpireIconDesc } from "./stage_empire_icon_desc_reducer.js";
export { StageEmpireIconDesc };
import { StageEmpireNotificationDesc } from "./stage_empire_notification_desc_reducer.js";
export { StageEmpireNotificationDesc };
import { StageEmpireRankDesc } from "./stage_empire_rank_desc_reducer.js";
export { StageEmpireRankDesc };
import { StageEmpireSuppliesDesc } from "./stage_empire_supplies_desc_reducer.js";
export { StageEmpireSuppliesDesc };
import { StageEmpireTerritoryDesc } from "./stage_empire_territory_desc_reducer.js";
export { StageEmpireTerritoryDesc };
import { StageEnemyAiParamsDesc } from "./stage_enemy_ai_params_desc_reducer.js";
export { StageEnemyAiParamsDesc };
import { StageEnemyDesc } from "./stage_enemy_desc_reducer.js";
export { StageEnemyDesc };
import { StageEnvironmentDebuffDesc } from "./stage_environment_debuff_desc_reducer.js";
export { StageEnvironmentDebuffDesc };
import { StageEquipmentDesc } from "./stage_equipment_desc_reducer.js";
export { StageEquipmentDesc };
import { StageExtractionRecipeDesc } from "./stage_extraction_recipe_desc_reducer.js";
export { StageExtractionRecipeDesc };
import { StageFoodDesc } from "./stage_food_desc_reducer.js";
export { StageFoodDesc };
import { StageGateDesc } from "./stage_gate_desc_reducer.js";
export { StageGateDesc };
import { StageHexiteExchangeEntryDesc } from "./stage_hexite_exchange_entry_desc_reducer.js";
export { StageHexiteExchangeEntryDesc };
import { StageInteriorEnvironmentDesc } from "./stage_interior_environment_desc_reducer.js";
export { StageInteriorEnvironmentDesc };
import { StageInteriorInstanceDesc } from "./stage_interior_instance_desc_reducer.js";
export { StageInteriorInstanceDesc };
import { StageInteriorNetworkDesc } from "./stage_interior_network_desc_reducer.js";
export { StageInteriorNetworkDesc };
import { StageInteriorPortalConnectionsDesc } from "./stage_interior_portal_connections_desc_reducer.js";
export { StageInteriorPortalConnectionsDesc };
import { StageInteriorShapeDesc } from "./stage_interior_shape_desc_reducer.js";
export { StageInteriorShapeDesc };
import { StageInteriorSpawnDesc } from "./stage_interior_spawn_desc_reducer.js";
export { StageInteriorSpawnDesc };
import { StageItemConversionRecipeDesc } from "./stage_item_conversion_recipe_desc_reducer.js";
export { StageItemConversionRecipeDesc };
import { StageItemDesc } from "./stage_item_desc_reducer.js";
export { StageItemDesc };
import { StageItemListDesc } from "./stage_item_list_desc_reducer.js";
export { StageItemListDesc };
import { StageKnowledgeScrollDesc } from "./stage_knowledge_scroll_desc_reducer.js";
export { StageKnowledgeScrollDesc };
import { StageKnowledgeScrollTypeDesc } from "./stage_knowledge_scroll_type_desc_reducer.js";
export { StageKnowledgeScrollTypeDesc };
import { StageKnowledgeStatModifierDesc } from "./stage_knowledge_stat_modifier_desc_reducer.js";
export { StageKnowledgeStatModifierDesc };
import { StageLootChestDesc } from "./stage_loot_chest_desc_reducer.js";
export { StageLootChestDesc };
import { StageLootRarityDesc } from "./stage_loot_rarity_desc_reducer.js";
export { StageLootRarityDesc };
import { StageLootTableDesc } from "./stage_loot_table_desc_reducer.js";
export { StageLootTableDesc };
import { StageNpcDesc } from "./stage_npc_desc_reducer.js";
export { StageNpcDesc };
import { StageOnboardingRewardDesc } from "./stage_onboarding_reward_desc_reducer.js";
export { StageOnboardingRewardDesc };
import { StageParametersDesc } from "./stage_parameters_desc_reducer.js";
export { StageParametersDesc };
import { StagePathfindingDesc } from "./stage_pathfinding_desc_reducer.js";
export { StagePathfindingDesc };
import { StagePavingTileDesc } from "./stage_paving_tile_desc_reducer.js";
export { StagePavingTileDesc };
import { StagePillarShapingDesc } from "./stage_pillar_shaping_desc_reducer.js";
export { StagePillarShapingDesc };
import { StagePlayerActionDesc } from "./stage_player_action_desc_reducer.js";
export { StagePlayerActionDesc };
import { StagePlayerHousingDesc } from "./stage_player_housing_desc_reducer.js";
export { StagePlayerHousingDesc };
import { StagePrivateParametersDesc } from "./stage_private_parameters_desc_reducer.js";
export { StagePrivateParametersDesc };
import { StageReservedNameDesc } from "./stage_reserved_name_desc_reducer.js";
export { StageReservedNameDesc };
import { StageResourceClumpDesc } from "./stage_resource_clump_desc_reducer.js";
export { StageResourceClumpDesc };
import { StageResourceDesc } from "./stage_resource_desc_reducer.js";
export { StageResourceDesc };
import { StageResourceGrowthRecipeDesc } from "./stage_resource_growth_recipe_desc_reducer.js";
export { StageResourceGrowthRecipeDesc };
import { StageResourcePlacementRecipeDesc } from "./stage_resource_placement_recipe_desc_reducer.js";
export { StageResourcePlacementRecipeDesc };
import { StageSecondaryKnowledgeDesc } from "./stage_secondary_knowledge_desc_reducer.js";
export { StageSecondaryKnowledgeDesc };
import { StageSkillDesc } from "./stage_skill_desc_reducer.js";
export { StageSkillDesc };
import { StageTargetingMatrixDesc } from "./stage_targeting_matrix_desc_reducer.js";
export { StageTargetingMatrixDesc };
import { StageTeleportItemDesc } from "./stage_teleport_item_desc_reducer.js";
export { StageTeleportItemDesc };
import { StageTerraformRecipeDesc } from "./stage_terraform_recipe_desc_reducer.js";
export { StageTerraformRecipeDesc };
import { StageToolDesc } from "./stage_tool_desc_reducer.js";
export { StageToolDesc };
import { StageToolTypeDesc } from "./stage_tool_type_desc_reducer.js";
export { StageToolTypeDesc };
import { StageTravelerTaskDesc } from "./stage_traveler_task_desc_reducer.js";
export { StageTravelerTaskDesc };
import { StageTravelerTradeOrderDesc } from "./stage_traveler_trade_order_desc_reducer.js";
export { StageTravelerTradeOrderDesc };
import { StageWallDesc } from "./stage_wall_desc_reducer.js";
export { StageWallDesc };
import { StageWeaponDesc } from "./stage_weapon_desc_reducer.js";
export { StageWeaponDesc };
import { StageWeaponTypeDesc } from "./stage_weapon_type_desc_reducer.js";
export { StageWeaponTypeDesc };
import { StartAgents } from "./start_agents_reducer.js";
export { StartAgents };
import { StartGeneratingWorld } from "./start_generating_world_reducer.js";
export { StartGeneratingWorld };
import { StartOnboardingQuest } from "./start_onboarding_quest_reducer.js";
export { StartOnboardingQuest };
import { StarvingAgentLoop } from "./starving_agent_loop_reducer.js";
export { StarvingAgentLoop };
import { StopAgents } from "./stop_agents_reducer.js";
export { StopAgents };
import { SynchronizeTime } from "./synchronize_time_reducer.js";
export { SynchronizeTime };
import { TargetUpdate } from "./target_update_reducer.js";
export { TargetUpdate };
import { TeleportationEnergyRegenAgentLoop } from "./teleportation_energy_regen_agent_loop_reducer.js";
export { TeleportationEnergyRegenAgentLoop };
import { Terraform } from "./terraform_reducer.js";
export { Terraform };
import { TerraformCancel } from "./terraform_cancel_reducer.js";
export { TerraformCancel };
import { TerraformSetFinalTarget } from "./terraform_set_final_target_reducer.js";
export { TerraformSetFinalTarget };
import { TerraformStart } from "./terraform_start_reducer.js";
export { TerraformStart };
import { TradeAccept } from "./trade_accept_reducer.js";
export { TradeAccept };
import { TradeAcceptSession } from "./trade_accept_session_reducer.js";
export { TradeAcceptSession };
import { TradeAddItem } from "./trade_add_item_reducer.js";
export { TradeAddItem };
import { TradeCancelServer } from "./trade_cancel_server_reducer.js";
export { TradeCancelServer };
import { TradeDecline } from "./trade_decline_reducer.js";
export { TradeDecline };
import { TradeDeclineSession } from "./trade_decline_session_reducer.js";
export { TradeDeclineSession };
import { TradeInitiateSession } from "./trade_initiate_session_reducer.js";
export { TradeInitiateSession };
import { TradeRemoveItem } from "./trade_remove_item_reducer.js";
export { TradeRemoveItem };
import { TradeSessionsAgentLoop } from "./trade_sessions_agent_loop_reducer.js";
export { TradeSessionsAgentLoop };
import { TradeSwapPockets } from "./trade_swap_pockets_reducer.js";
export { TradeSwapPockets };
import { TransferPlayerDelayed } from "./transfer_player_delayed_reducer.js";
export { TransferPlayerDelayed };
import { TravelerTaskAgentLoop } from "./traveler_task_agent_loop_reducer.js";
export { TravelerTaskAgentLoop };
import { UpdateScheduledTimersFromStaticData } from "./update_scheduled_timers_from_static_data_reducer.js";
export { UpdateScheduledTimersFromStaticData };

// Import and reexport all table handle types
import { AIDebugStateTableHandle } from "./a_i_debug_state_table.js";
export { AIDebugStateTableHandle };
import { AchievementDescTableHandle } from "./achievement_desc_table.js";
export { AchievementDescTableHandle };
import { ActionStateTableHandle } from "./action_state_table.js";
export { ActionStateTableHandle };
import { ActiveBuffStateTableHandle } from "./active_buff_state_table.js";
export { ActiveBuffStateTableHandle };
import { AdminBroadcastTableHandle } from "./admin_broadcast_table.js";
export { AdminBroadcastTableHandle };
import { AdminClearResourceTimerTableHandle } from "./admin_clear_resource_timer_table.js";
export { AdminClearResourceTimerTableHandle };
import { AdminRestorePlayerStateTimerTableHandle } from "./admin_restore_player_state_timer_table.js";
export { AdminRestorePlayerStateTimerTableHandle };
import { AlertDescTableHandle } from "./alert_desc_table.js";
export { AlertDescTableHandle };
import { AlertStateTableHandle } from "./alert_state_table.js";
export { AlertStateTableHandle };
import { AttachedHerdsStateTableHandle } from "./attached_herds_state_table.js";
export { AttachedHerdsStateTableHandle };
import { AttackImpactTimerTableHandle } from "./attack_impact_timer_table.js";
export { AttackImpactTimerTableHandle };
import { AttackOutcomeStateTableHandle } from "./attack_outcome_state_table.js";
export { AttackOutcomeStateTableHandle };
import { AttackTimerTableHandle } from "./attack_timer_table.js";
export { AttackTimerTableHandle };
import { AutoClaimStateTableHandle } from "./auto_claim_state_table.js";
export { AutoClaimStateTableHandle };
import { AutoLogoutLoopTimerTableHandle } from "./auto_logout_loop_timer_table.js";
export { AutoLogoutLoopTimerTableHandle };
import { BarterStallStateTableHandle } from "./barter_stall_state_table.js";
export { BarterStallStateTableHandle };
import { BiomeDescTableHandle } from "./biome_desc_table.js";
export { BiomeDescTableHandle };
import { BlockedIdentityTableHandle } from "./blocked_identity_table.js";
export { BlockedIdentityTableHandle };
import { BuffDescTableHandle } from "./buff_desc_table.js";
export { BuffDescTableHandle };
import { BuffTypeDescTableHandle } from "./buff_type_desc_table.js";
export { BuffTypeDescTableHandle };
import { BuildingClaimDescTableHandle } from "./building_claim_desc_table.js";
export { BuildingClaimDescTableHandle };
import { BuildingDecayLoopTimerTableHandle } from "./building_decay_loop_timer_table.js";
export { BuildingDecayLoopTimerTableHandle };
import { BuildingDescTableHandle } from "./building_desc_table.js";
export { BuildingDescTableHandle };
import { BuildingDespawnTimerTableHandle } from "./building_despawn_timer_table.js";
export { BuildingDespawnTimerTableHandle };
import { BuildingFunctionTypeMappingDescTableHandle } from "./building_function_type_mapping_desc_table.js";
export { BuildingFunctionTypeMappingDescTableHandle };
import { BuildingNicknameStateTableHandle } from "./building_nickname_state_table.js";
export { BuildingNicknameStateTableHandle };
import { BuildingPortalDescTableHandle } from "./building_portal_desc_table.js";
export { BuildingPortalDescTableHandle };
import { BuildingRepairsDescTableHandle } from "./building_repairs_desc_table.js";
export { BuildingRepairsDescTableHandle };
import { BuildingSpawnDescTableHandle } from "./building_spawn_desc_table.js";
export { BuildingSpawnDescTableHandle };
import { BuildingStateTableHandle } from "./building_state_table.js";
export { BuildingStateTableHandle };
import { BuildingTypeDescTableHandle } from "./building_type_desc_table.js";
export { BuildingTypeDescTableHandle };
import { BuyOrderStateTableHandle } from "./buy_order_state_table.js";
export { BuyOrderStateTableHandle };
import { CargoDescTableHandle } from "./cargo_desc_table.js";
export { CargoDescTableHandle };
import { CharacterStatDescTableHandle } from "./character_stat_desc_table.js";
export { CharacterStatDescTableHandle };
import { CharacterStatsStateTableHandle } from "./character_stats_state_table.js";
export { CharacterStatsStateTableHandle };
import { ChatCleanupTimerTableHandle } from "./chat_cleanup_timer_table.js";
export { ChatCleanupTimerTableHandle };
import { ChatMessageStateTableHandle } from "./chat_message_state_table.js";
export { ChatMessageStateTableHandle };
import { ChestRarityDescTableHandle } from "./chest_rarity_desc_table.js";
export { ChestRarityDescTableHandle };
import { ClaimLocalStateTableHandle } from "./claim_local_state_table.js";
export { ClaimLocalStateTableHandle };
import { ClaimMemberStateTableHandle } from "./claim_member_state_table.js";
export { ClaimMemberStateTableHandle };
import { ClaimRecruitmentStateTableHandle } from "./claim_recruitment_state_table.js";
export { ClaimRecruitmentStateTableHandle };
import { ClaimStateTableHandle } from "./claim_state_table.js";
export { ClaimStateTableHandle };
import { ClaimTechDescTableHandle } from "./claim_tech_desc_table.js";
export { ClaimTechDescTableHandle };
import { ClaimTechStateTableHandle } from "./claim_tech_state_table.js";
export { ClaimTechStateTableHandle };
import { ClaimTechUnlockTimerTableHandle } from "./claim_tech_unlock_timer_table.js";
export { ClaimTechUnlockTimerTableHandle };
import { ClaimTileCostTableHandle } from "./claim_tile_cost_table.js";
export { ClaimTileCostTableHandle };
import { ClaimTileStateTableHandle } from "./claim_tile_state_table.js";
export { ClaimTileStateTableHandle };
import { ClimbRequirementDescTableHandle } from "./climb_requirement_desc_table.js";
export { ClimbRequirementDescTableHandle };
import { ClosedListingStateTableHandle } from "./closed_listing_state_table.js";
export { ClosedListingStateTableHandle };
import { ClothingDescTableHandle } from "./clothing_desc_table.js";
export { ClothingDescTableHandle };
import { CollectStatsTimerTableHandle } from "./collect_stats_timer_table.js";
export { CollectStatsTimerTableHandle };
import { CollectibleDescTableHandle } from "./collectible_desc_table.js";
export { CollectibleDescTableHandle };
import { CombatActionDescTableHandle } from "./combat_action_desc_table.js";
export { CombatActionDescTableHandle };
import { CombatStateTableHandle } from "./combat_state_table.js";
export { CombatStateTableHandle };
import { ConfigTableHandle } from "./config_table.js";
export { ConfigTableHandle };
import { ConstructionRecipeDescTableHandle } from "./construction_recipe_desc_table.js";
export { ConstructionRecipeDescTableHandle };
import { CraftingRecipeDescTableHandle } from "./crafting_recipe_desc_table.js";
export { CraftingRecipeDescTableHandle };
import { DayNightLoopTimerTableHandle } from "./day_night_loop_timer_table.js";
export { DayNightLoopTimerTableHandle };
import { DeconstructionRecipeDescTableHandle } from "./deconstruction_recipe_desc_table.js";
export { DeconstructionRecipeDescTableHandle };
import { DeployableCollectibleStateTableHandle } from "./deployable_collectible_state_table.js";
export { DeployableCollectibleStateTableHandle };
import { DeployableDescTableHandle } from "./deployable_desc_table.js";
export { DeployableDescTableHandle };
import { DeployableDismountTimerTableHandle } from "./deployable_dismount_timer_table.js";
export { DeployableDismountTimerTableHandle };
import { DeployableStateTableHandle } from "./deployable_state_table.js";
export { DeployableStateTableHandle };
import { DestroyDimensionNetworkTimerTableHandle } from "./destroy_dimension_network_timer_table.js";
export { DestroyDimensionNetworkTimerTableHandle };
import { DeveloperTableHandle } from "./developer_table.js";
export { DeveloperTableHandle };
import { DimensionDescriptionStateTableHandle } from "./dimension_description_state_table.js";
export { DimensionDescriptionStateTableHandle };
import { DimensionNetworkStateTableHandle } from "./dimension_network_state_table.js";
export { DimensionNetworkStateTableHandle };
import { DistantVisibleEntityTableHandle } from "./distant_visible_entity_table.js";
export { DistantVisibleEntityTableHandle };
import { DistantVisibleEntityDescTableHandle } from "./distant_visible_entity_desc_table.js";
export { DistantVisibleEntityDescTableHandle };
import { DroppedInventoryDespawnTimerTableHandle } from "./dropped_inventory_despawn_timer_table.js";
export { DroppedInventoryDespawnTimerTableHandle };
import { DroppedInventoryOwnershipTimerTableHandle } from "./dropped_inventory_ownership_timer_table.js";
export { DroppedInventoryOwnershipTimerTableHandle };
import { DroppedInventoryStateTableHandle } from "./dropped_inventory_state_table.js";
export { DroppedInventoryStateTableHandle };
import { DuelAgentTimerTableHandle } from "./duel_agent_timer_table.js";
export { DuelAgentTimerTableHandle };
import { DuelDespawnTimerTableHandle } from "./duel_despawn_timer_table.js";
export { DuelDespawnTimerTableHandle };
import { DuelStateTableHandle } from "./duel_state_table.js";
export { DuelStateTableHandle };
import { ElevatorDescTableHandle } from "./elevator_desc_table.js";
export { ElevatorDescTableHandle };
import { EmoteDescTableHandle } from "./emote_desc_table.js";
export { EmoteDescTableHandle };
import { EmpireChunkStateTableHandle } from "./empire_chunk_state_table.js";
export { EmpireChunkStateTableHandle };
import { EmpireColorDescTableHandle } from "./empire_color_desc_table.js";
export { EmpireColorDescTableHandle };
import { EmpireExpansionStateTableHandle } from "./empire_expansion_state_table.js";
export { EmpireExpansionStateTableHandle };
import { EmpireIconDescTableHandle } from "./empire_icon_desc_table.js";
export { EmpireIconDescTableHandle };
import { EmpireNodeSiegeStateTableHandle } from "./empire_node_siege_state_table.js";
export { EmpireNodeSiegeStateTableHandle };
import { EmpireNodeStateTableHandle } from "./empire_node_state_table.js";
export { EmpireNodeStateTableHandle };
import { EmpireNotificationDescTableHandle } from "./empire_notification_desc_table.js";
export { EmpireNotificationDescTableHandle };
import { EmpirePlayerDataStateTableHandle } from "./empire_player_data_state_table.js";
export { EmpirePlayerDataStateTableHandle };
import { EmpireRankDescTableHandle } from "./empire_rank_desc_table.js";
export { EmpireRankDescTableHandle };
import { EmpireRankStateTableHandle } from "./empire_rank_state_table.js";
export { EmpireRankStateTableHandle };
import { EmpireSettlementStateTableHandle } from "./empire_settlement_state_table.js";
export { EmpireSettlementStateTableHandle };
import { EmpireStateTableHandle } from "./empire_state_table.js";
export { EmpireStateTableHandle };
import { EmpireSuppliesDescTableHandle } from "./empire_supplies_desc_table.js";
export { EmpireSuppliesDescTableHandle };
import { EmpireTerritoryDescTableHandle } from "./empire_territory_desc_table.js";
export { EmpireTerritoryDescTableHandle };
import { EndGracePeriodTimerTableHandle } from "./end_grace_period_timer_table.js";
export { EndGracePeriodTimerTableHandle };
import { EnemyAiParamsDescTableHandle } from "./enemy_ai_params_desc_table.js";
export { EnemyAiParamsDescTableHandle };
import { EnemyDescTableHandle } from "./enemy_desc_table.js";
export { EnemyDescTableHandle };
import { EnemyDespawnTimerTableHandle } from "./enemy_despawn_timer_table.js";
export { EnemyDespawnTimerTableHandle };
import { EnemyMobMonitorStateTableHandle } from "./enemy_mob_monitor_state_table.js";
export { EnemyMobMonitorStateTableHandle };
import { EnemyRegenLoopTimerTableHandle } from "./enemy_regen_loop_timer_table.js";
export { EnemyRegenLoopTimerTableHandle };
import { EnemyStateTableHandle } from "./enemy_state_table.js";
export { EnemyStateTableHandle };
import { EnvironmentDebuffDescTableHandle } from "./environment_debuff_desc_table.js";
export { EnvironmentDebuffDescTableHandle };
import { EnvironmentDebuffLoopTimerTableHandle } from "./environment_debuff_loop_timer_table.js";
export { EnvironmentDebuffLoopTimerTableHandle };
import { EquipmentDescTableHandle } from "./equipment_desc_table.js";
export { EquipmentDescTableHandle };
import { EquipmentStateTableHandle } from "./equipment_state_table.js";
export { EquipmentStateTableHandle };
import { ExperienceStateTableHandle } from "./experience_state_table.js";
export { ExperienceStateTableHandle };
import { ExplorationChunksStateTableHandle } from "./exploration_chunks_state_table.js";
export { ExplorationChunksStateTableHandle };
import { ExtractOutcomeStateTableHandle } from "./extract_outcome_state_table.js";
export { ExtractOutcomeStateTableHandle };
import { ExtractionRecipeDescTableHandle } from "./extraction_recipe_desc_table.js";
export { ExtractionRecipeDescTableHandle };
import { FoodDescTableHandle } from "./food_desc_table.js";
export { FoodDescTableHandle };
import { FootprintTileStateTableHandle } from "./footprint_tile_state_table.js";
export { FootprintTileStateTableHandle };
import { ForceGenerateTypesTableHandle } from "./force_generate_types_table.js";
export { ForceGenerateTypesTableHandle };
import { GateDescTableHandle } from "./gate_desc_table.js";
export { GateDescTableHandle };
import { GlobalSearchStateTableHandle } from "./global_search_state_table.js";
export { GlobalSearchStateTableHandle };
import { GlobalsTableHandle } from "./globals_table.js";
export { GlobalsTableHandle };
import { GrowthLoopTimerTableHandle } from "./growth_loop_timer_table.js";
export { GrowthLoopTimerTableHandle };
import { GrowthStateTableHandle } from "./growth_state_table.js";
export { GrowthStateTableHandle };
import { HealthStateTableHandle } from "./health_state_table.js";
export { HealthStateTableHandle };
import { HerdStateTableHandle } from "./herd_state_table.js";
export { HerdStateTableHandle };
import { HexiteExchangeEntryDescTableHandle } from "./hexite_exchange_entry_desc_table.js";
export { HexiteExchangeEntryDescTableHandle };
import { HideDeployableTimerTableHandle } from "./hide_deployable_timer_table.js";
export { HideDeployableTimerTableHandle };
import { IdentityRoleTableHandle } from "./identity_role_table.js";
export { IdentityRoleTableHandle };
import { InterModuleMessageTableHandle } from "./inter_module_message_table.js";
export { InterModuleMessageTableHandle };
import { InterModuleMessageCounterTableHandle } from "./inter_module_message_counter_table.js";
export { InterModuleMessageCounterTableHandle };
import { InterModuleResponseMessageCounterTableHandle } from "./inter_module_response_message_counter_table.js";
export { InterModuleResponseMessageCounterTableHandle };
import { InteriorCollapseTriggerStateTableHandle } from "./interior_collapse_trigger_state_table.js";
export { InteriorCollapseTriggerStateTableHandle };
import { InteriorEnvironmentDescTableHandle } from "./interior_environment_desc_table.js";
export { InteriorEnvironmentDescTableHandle };
import { InteriorInstanceDescTableHandle } from "./interior_instance_desc_table.js";
export { InteriorInstanceDescTableHandle };
import { InteriorNetworkDescTableHandle } from "./interior_network_desc_table.js";
export { InteriorNetworkDescTableHandle };
import { InteriorPortalConnectionsDescTableHandle } from "./interior_portal_connections_desc_table.js";
export { InteriorPortalConnectionsDescTableHandle };
import { InteriorSetCollapsedTimerTableHandle } from "./interior_set_collapsed_timer_table.js";
export { InteriorSetCollapsedTimerTableHandle };
import { InteriorShapeDescTableHandle } from "./interior_shape_desc_table.js";
export { InteriorShapeDescTableHandle };
import { InteriorSpawnDescTableHandle } from "./interior_spawn_desc_table.js";
export { InteriorSpawnDescTableHandle };
import { InventoryStateTableHandle } from "./inventory_state_table.js";
export { InventoryStateTableHandle };
import { ItemConversionRecipeDescTableHandle } from "./item_conversion_recipe_desc_table.js";
export { ItemConversionRecipeDescTableHandle };
import { ItemDescTableHandle } from "./item_desc_table.js";
export { ItemDescTableHandle };
import { ItemListDescTableHandle } from "./item_list_desc_table.js";
export { ItemListDescTableHandle };
import { KnowledgeAchievementStateTableHandle } from "./knowledge_achievement_state_table.js";
export { KnowledgeAchievementStateTableHandle };
import { KnowledgeBattleActionStateTableHandle } from "./knowledge_battle_action_state_table.js";
export { KnowledgeBattleActionStateTableHandle };
import { KnowledgeBuildingStateTableHandle } from "./knowledge_building_state_table.js";
export { KnowledgeBuildingStateTableHandle };
import { KnowledgeCargoStateTableHandle } from "./knowledge_cargo_state_table.js";
export { KnowledgeCargoStateTableHandle };
import { KnowledgeClaimStateTableHandle } from "./knowledge_claim_state_table.js";
export { KnowledgeClaimStateTableHandle };
import { KnowledgeConstructionStateTableHandle } from "./knowledge_construction_state_table.js";
export { KnowledgeConstructionStateTableHandle };
import { KnowledgeCraftStateTableHandle } from "./knowledge_craft_state_table.js";
export { KnowledgeCraftStateTableHandle };
import { KnowledgeDeployableStateTableHandle } from "./knowledge_deployable_state_table.js";
export { KnowledgeDeployableStateTableHandle };
import { KnowledgeEnemyStateTableHandle } from "./knowledge_enemy_state_table.js";
export { KnowledgeEnemyStateTableHandle };
import { KnowledgeExtractStateTableHandle } from "./knowledge_extract_state_table.js";
export { KnowledgeExtractStateTableHandle };
import { KnowledgeItemStateTableHandle } from "./knowledge_item_state_table.js";
export { KnowledgeItemStateTableHandle };
import { KnowledgeLoreStateTableHandle } from "./knowledge_lore_state_table.js";
export { KnowledgeLoreStateTableHandle };
import { KnowledgeNpcStateTableHandle } from "./knowledge_npc_state_table.js";
export { KnowledgeNpcStateTableHandle };
import { KnowledgePavingStateTableHandle } from "./knowledge_paving_state_table.js";
export { KnowledgePavingStateTableHandle };
import { KnowledgePillarShapingStateTableHandle } from "./knowledge_pillar_shaping_state_table.js";
export { KnowledgePillarShapingStateTableHandle };
import { KnowledgeResourcePlacementStateTableHandle } from "./knowledge_resource_placement_state_table.js";
export { KnowledgeResourcePlacementStateTableHandle };
import { KnowledgeResourceStateTableHandle } from "./knowledge_resource_state_table.js";
export { KnowledgeResourceStateTableHandle };
import { KnowledgeRuinsStateTableHandle } from "./knowledge_ruins_state_table.js";
export { KnowledgeRuinsStateTableHandle };
import { KnowledgeScrollDescTableHandle } from "./knowledge_scroll_desc_table.js";
export { KnowledgeScrollDescTableHandle };
import { KnowledgeScrollTypeDescTableHandle } from "./knowledge_scroll_type_desc_table.js";
export { KnowledgeScrollTypeDescTableHandle };
import { KnowledgeSecondaryStateTableHandle } from "./knowledge_secondary_state_table.js";
export { KnowledgeSecondaryStateTableHandle };
import { KnowledgeStatModifierDescTableHandle } from "./knowledge_stat_modifier_desc_table.js";
export { KnowledgeStatModifierDescTableHandle };
import { KnowledgeVaultStateTableHandle } from "./knowledge_vault_state_table.js";
export { KnowledgeVaultStateTableHandle };
import { LightSourceStateTableHandle } from "./light_source_state_table.js";
export { LightSourceStateTableHandle };
import { LocationCacheTableHandle } from "./location_cache_table.js";
export { LocationCacheTableHandle };
import { LocationStateTableHandle } from "./location_state_table.js";
export { LocationStateTableHandle };
import { LootChestDescTableHandle } from "./loot_chest_desc_table.js";
export { LootChestDescTableHandle };
import { LootChestDespawnTimerTableHandle } from "./loot_chest_despawn_timer_table.js";
export { LootChestDespawnTimerTableHandle };
import { LootChestSpawnTimerTableHandle } from "./loot_chest_spawn_timer_table.js";
export { LootChestSpawnTimerTableHandle };
import { LootChestStateTableHandle } from "./loot_chest_state_table.js";
export { LootChestStateTableHandle };
import { LootRarityDescTableHandle } from "./loot_rarity_desc_table.js";
export { LootRarityDescTableHandle };
import { LootTableDescTableHandle } from "./loot_table_desc_table.js";
export { LootTableDescTableHandle };
import { LostItemsStateTableHandle } from "./lost_items_state_table.js";
export { LostItemsStateTableHandle };
import { MobileEntityStateTableHandle } from "./mobile_entity_state_table.js";
export { MobileEntityStateTableHandle };
import { ModerationActionLogEntryTableHandle } from "./moderation_action_log_entry_table.js";
export { ModerationActionLogEntryTableHandle };
import { MountingStateTableHandle } from "./mounting_state_table.js";
export { MountingStateTableHandle };
import { MoveValidationStrikeCounterStateTableHandle } from "./move_validation_strike_counter_state_table.js";
export { MoveValidationStrikeCounterStateTableHandle };
import { NpcAiLoopTimerTableHandle } from "./npc_ai_loop_timer_table.js";
export { NpcAiLoopTimerTableHandle };
import { NpcDescTableHandle } from "./npc_desc_table.js";
export { NpcDescTableHandle };
import { NpcStateTableHandle } from "./npc_state_table.js";
export { NpcStateTableHandle };
import { OnDurabilityZeroTimerTableHandle } from "./on_durability_zero_timer_table.js";
export { OnDurabilityZeroTimerTableHandle };
import { OnboardingRewardDescTableHandle } from "./onboarding_reward_desc_table.js";
export { OnboardingRewardDescTableHandle };
import { OnboardingStateTableHandle } from "./onboarding_state_table.js";
export { OnboardingStateTableHandle };
import { ParametersDescTableHandle } from "./parameters_desc_table.js";
export { ParametersDescTableHandle };
import { ParametersPlayerMoveDescTableHandle } from "./parameters_player_move_desc_table.js";
export { ParametersPlayerMoveDescTableHandle };
import { PartialExperienceStateTableHandle } from "./partial_experience_state_table.js";
export { PartialExperienceStateTableHandle };
import { PassiveCraftStateTableHandle } from "./passive_craft_state_table.js";
export { PassiveCraftStateTableHandle };
import { PassiveCraftTimerTableHandle } from "./passive_craft_timer_table.js";
export { PassiveCraftTimerTableHandle };
import { PathfindingDescTableHandle } from "./pathfinding_desc_table.js";
export { PathfindingDescTableHandle };
import { PavedTileStateTableHandle } from "./paved_tile_state_table.js";
export { PavedTileStateTableHandle };
import { PavingTileDescTableHandle } from "./paving_tile_desc_table.js";
export { PavingTileDescTableHandle };
import { PermissionStateTableHandle } from "./permission_state_table.js";
export { PermissionStateTableHandle };
import { PillarShapingDescTableHandle } from "./pillar_shaping_desc_table.js";
export { PillarShapingDescTableHandle };
import { PillarShapingStateTableHandle } from "./pillar_shaping_state_table.js";
export { PillarShapingStateTableHandle };
import { PlayerActionDescTableHandle } from "./player_action_desc_table.js";
export { PlayerActionDescTableHandle };
import { PlayerActionStateTableHandle } from "./player_action_state_table.js";
export { PlayerActionStateTableHandle };
import { PlayerDeathTimerTableHandle } from "./player_death_timer_table.js";
export { PlayerDeathTimerTableHandle };
import { PlayerHousingDescTableHandle } from "./player_housing_desc_table.js";
export { PlayerHousingDescTableHandle };
import { PlayerHousingEvictPlayerTimerTableHandle } from "./player_housing_evict_player_timer_table.js";
export { PlayerHousingEvictPlayerTimerTableHandle };
import { PlayerHousingIncomeLoopTimerTableHandle } from "./player_housing_income_loop_timer_table.js";
export { PlayerHousingIncomeLoopTimerTableHandle };
import { PlayerHousingStateTableHandle } from "./player_housing_state_table.js";
export { PlayerHousingStateTableHandle };
import { PlayerLowercaseUsernameStateTableHandle } from "./player_lowercase_username_state_table.js";
export { PlayerLowercaseUsernameStateTableHandle };
import { PlayerNoteStateTableHandle } from "./player_note_state_table.js";
export { PlayerNoteStateTableHandle };
import { PlayerNotificationEventTableHandle } from "./player_notification_event_table.js";
export { PlayerNotificationEventTableHandle };
import { PlayerPrefsStateTableHandle } from "./player_prefs_state_table.js";
export { PlayerPrefsStateTableHandle };
import { PlayerQueueStateTableHandle } from "./player_queue_state_table.js";
export { PlayerQueueStateTableHandle };
import { PlayerRegenLoopTimerTableHandle } from "./player_regen_loop_timer_table.js";
export { PlayerRegenLoopTimerTableHandle };
import { PlayerRegionTransferEventTableHandle } from "./player_region_transfer_event_table.js";
export { PlayerRegionTransferEventTableHandle };
import { PlayerReportStateTableHandle } from "./player_report_state_table.js";
export { PlayerReportStateTableHandle };
import { PlayerReportStateTimestampTableHandle } from "./player_report_state_timestamp_table.js";
export { PlayerReportStateTimestampTableHandle };
import { PlayerSetNameOutcomeEventTableHandle } from "./player_set_name_outcome_event_table.js";
export { PlayerSetNameOutcomeEventTableHandle };
import { PlayerStateTableHandle } from "./player_state_table.js";
export { PlayerStateTableHandle };
import { PlayerTimestampStateTableHandle } from "./player_timestamp_state_table.js";
export { PlayerTimestampStateTableHandle };
import { PlayerUseElevatorTimerTableHandle } from "./player_use_elevator_timer_table.js";
export { PlayerUseElevatorTimerTableHandle };
import { PlayerUsernameStateTableHandle } from "./player_username_state_table.js";
export { PlayerUsernameStateTableHandle };
import { PlayerVoteConcludeTimerTableHandle } from "./player_vote_conclude_timer_table.js";
export { PlayerVoteConcludeTimerTableHandle };
import { PlayerVoteStateTableHandle } from "./player_vote_state_table.js";
export { PlayerVoteStateTableHandle };
import { PortalStateTableHandle } from "./portal_state_table.js";
export { PortalStateTableHandle };
import { PrivateParametersDescTableHandle } from "./private_parameters_desc_table.js";
export { PrivateParametersDescTableHandle };
import { ProgressiveActionStateTableHandle } from "./progressive_action_state_table.js";
export { ProgressiveActionStateTableHandle };
import { ProjectSiteStateTableHandle } from "./project_site_state_table.js";
export { ProjectSiteStateTableHandle };
import { PublicProgressiveActionStateTableHandle } from "./public_progressive_action_state_table.js";
export { PublicProgressiveActionStateTableHandle };
import { RegionConnectionInfoTableHandle } from "./region_connection_info_table.js";
export { RegionConnectionInfoTableHandle };
import { RegionPopulationInfoTableHandle } from "./region_population_info_table.js";
export { RegionPopulationInfoTableHandle };
import { RegionPopuplationLoopTimerTableHandle } from "./region_popuplation_loop_timer_table.js";
export { RegionPopuplationLoopTimerTableHandle };
import { RegionSignInParametersTableHandle } from "./region_sign_in_parameters_table.js";
export { RegionSignInParametersTableHandle };
import { RentCollectorLoopTimerTableHandle } from "./rent_collector_loop_timer_table.js";
export { RentCollectorLoopTimerTableHandle };
import { RentEvictTimerTableHandle } from "./rent_evict_timer_table.js";
export { RentEvictTimerTableHandle };
import { RentStateTableHandle } from "./rent_state_table.js";
export { RentStateTableHandle };
import { ReservedNameDescTableHandle } from "./reserved_name_desc_table.js";
export { ReservedNameDescTableHandle };
import { ResetChunkIndexTimerTableHandle } from "./reset_chunk_index_timer_table.js";
export { ResetChunkIndexTimerTableHandle };
import { ResetMobileEntityTimerTableHandle } from "./reset_mobile_entity_timer_table.js";
export { ResetMobileEntityTimerTableHandle };
import { ResourceClumpDescTableHandle } from "./resource_clump_desc_table.js";
export { ResourceClumpDescTableHandle };
import { ResourceCountTableHandle } from "./resource_count_table.js";
export { ResourceCountTableHandle };
import { ResourceDescTableHandle } from "./resource_desc_table.js";
export { ResourceDescTableHandle };
import { ResourceGrowthRecipeDescTableHandle } from "./resource_growth_recipe_desc_table.js";
export { ResourceGrowthRecipeDescTableHandle };
import { ResourceHealthStateTableHandle } from "./resource_health_state_table.js";
export { ResourceHealthStateTableHandle };
import { ResourcePlacementRecipeDescTableHandle } from "./resource_placement_recipe_desc_table.js";
export { ResourcePlacementRecipeDescTableHandle };
import { ResourceSpawnTimerTableHandle } from "./resource_spawn_timer_table.js";
export { ResourceSpawnTimerTableHandle };
import { ResourceStateTableHandle } from "./resource_state_table.js";
export { ResourceStateTableHandle };
import { ResourcesLogTableHandle } from "./resources_log_table.js";
export { ResourcesLogTableHandle };
import { ResourcesRegenLoopTimerTableHandle } from "./resources_regen_loop_timer_table.js";
export { ResourcesRegenLoopTimerTableHandle };
import { RespawnResourceInChunkTimerTableHandle } from "./respawn_resource_in_chunk_timer_table.js";
export { RespawnResourceInChunkTimerTableHandle };
import { RezSickLongTermStateTableHandle } from "./rez_sick_long_term_state_table.js";
export { RezSickLongTermStateTableHandle };
import { SatiationStateTableHandle } from "./satiation_state_table.js";
export { SatiationStateTableHandle };
import { SecondaryKnowledgeDescTableHandle } from "./secondary_knowledge_desc_table.js";
export { SecondaryKnowledgeDescTableHandle };
import { SellOrderStateTableHandle } from "./sell_order_state_table.js";
export { SellOrderStateTableHandle };
import { ServerIdentityTableHandle } from "./server_identity_table.js";
export { ServerIdentityTableHandle };
import { SignedInPlayerStateTableHandle } from "./signed_in_player_state_table.js";
export { SignedInPlayerStateTableHandle };
import { SingleResourceClumpInfoTableHandle } from "./single_resource_clump_info_table.js";
export { SingleResourceClumpInfoTableHandle };
import { SingleResourceToClumpDescTableHandle } from "./single_resource_to_clump_desc_table.js";
export { SingleResourceToClumpDescTableHandle };
import { SkillDescTableHandle } from "./skill_desc_table.js";
export { SkillDescTableHandle };
import { StagedStaticDataTableHandle } from "./staged_static_data_table.js";
export { StagedStaticDataTableHandle };
import { StaminaStateTableHandle } from "./stamina_state_table.js";
export { StaminaStateTableHandle };
import { StarvingLoopTimerTableHandle } from "./starving_loop_timer_table.js";
export { StarvingLoopTimerTableHandle };
import { StarvingPlayerStateTableHandle } from "./starving_player_state_table.js";
export { StarvingPlayerStateTableHandle };
import { TargetStateTableHandle } from "./target_state_table.js";
export { TargetStateTableHandle };
import { TargetableStateTableHandle } from "./targetable_state_table.js";
export { TargetableStateTableHandle };
import { TargetingMatrixDescTableHandle } from "./targeting_matrix_desc_table.js";
export { TargetingMatrixDescTableHandle };
import { TeleportItemDescTableHandle } from "./teleport_item_desc_table.js";
export { TeleportItemDescTableHandle };
import { TeleportPlayerTimerTableHandle } from "./teleport_player_timer_table.js";
export { TeleportPlayerTimerTableHandle };
import { TeleportationEnergyRegenLoopTimerTableHandle } from "./teleportation_energy_regen_loop_timer_table.js";
export { TeleportationEnergyRegenLoopTimerTableHandle };
import { TeleportationEnergyStateTableHandle } from "./teleportation_energy_state_table.js";
export { TeleportationEnergyStateTableHandle };
import { TerraformProgressStateTableHandle } from "./terraform_progress_state_table.js";
export { TerraformProgressStateTableHandle };
import { TerraformRecipeDescTableHandle } from "./terraform_recipe_desc_table.js";
export { TerraformRecipeDescTableHandle };
import { TerrainChunkStateTableHandle } from "./terrain_chunk_state_table.js";
export { TerrainChunkStateTableHandle };
import { TheGreatPlaceholderTableTableHandle } from "./the_great_placeholder_table_table.js";
export { TheGreatPlaceholderTableTableHandle };
import { ThreatStateTableHandle } from "./threat_state_table.js";
export { ThreatStateTableHandle };
import { ToolDescTableHandle } from "./tool_desc_table.js";
export { ToolDescTableHandle };
import { ToolTypeDescTableHandle } from "./tool_type_desc_table.js";
export { ToolTypeDescTableHandle };
import { ToolbarStateTableHandle } from "./toolbar_state_table.js";
export { ToolbarStateTableHandle };
import { TradeOrderStateTableHandle } from "./trade_order_state_table.js";
export { TradeOrderStateTableHandle };
import { TradeSessionLoopTimerTableHandle } from "./trade_session_loop_timer_table.js";
export { TradeSessionLoopTimerTableHandle };
import { TradeSessionStateTableHandle } from "./trade_session_state_table.js";
export { TradeSessionStateTableHandle };
import { TransferPlayerTimerTableHandle } from "./transfer_player_timer_table.js";
export { TransferPlayerTimerTableHandle };
import { TravelerTaskDescTableHandle } from "./traveler_task_desc_table.js";
export { TravelerTaskDescTableHandle };
import { TravelerTaskLoopTimerTableHandle } from "./traveler_task_loop_timer_table.js";
export { TravelerTaskLoopTimerTableHandle };
import { TravelerTaskStateTableHandle } from "./traveler_task_state_table.js";
export { TravelerTaskStateTableHandle };
import { TravelerTradeOrderDescTableHandle } from "./traveler_trade_order_desc_table.js";
export { TravelerTradeOrderDescTableHandle };
import { UnclaimedCollectiblesStateTableHandle } from "./unclaimed_collectibles_state_table.js";
export { UnclaimedCollectiblesStateTableHandle };
import { UnclaimedShardsStateTableHandle } from "./unclaimed_shards_state_table.js";
export { UnclaimedShardsStateTableHandle };
import { UserAuthenticationStateTableHandle } from "./user_authentication_state_table.js";
export { UserAuthenticationStateTableHandle };
import { UserModerationStateTableHandle } from "./user_moderation_state_table.js";
export { UserModerationStateTableHandle };
import { UserPreviousRegionStateTableHandle } from "./user_previous_region_state_table.js";
export { UserPreviousRegionStateTableHandle };
import { UserStateTableHandle } from "./user_state_table.js";
export { UserStateTableHandle };
import { VaultStateTableHandle } from "./vault_state_table.js";
export { VaultStateTableHandle };
import { WallDescTableHandle } from "./wall_desc_table.js";
export { WallDescTableHandle };
import { WeaponDescTableHandle } from "./weapon_desc_table.js";
export { WeaponDescTableHandle };
import { WeaponTypeDescTableHandle } from "./weapon_type_desc_table.js";
export { WeaponTypeDescTableHandle };
import { WorldRegionNameStateTableHandle } from "./world_region_name_state_table.js";
export { WorldRegionNameStateTableHandle };
import { WorldRegionStateTableHandle } from "./world_region_state_table.js";
export { WorldRegionStateTableHandle };

// Import and reexport all types
import { AiDebugState } from "./ai_debug_state_type.js";
export { AiDebugState };
import { AchievementDesc } from "./achievement_desc_type.js";
export { AchievementDesc };
import { ActionCooldown } from "./action_cooldown_type.js";
export { ActionCooldown };
import { ActionState } from "./action_state_type.js";
export { ActionState };
import { ActiveBuff } from "./active_buff_type.js";
export { ActiveBuff };
import { ActiveBuffState } from "./active_buff_state_type.js";
export { ActiveBuffState };
import { AdminBroadcast } from "./admin_broadcast_type.js";
export { AdminBroadcast };
import { AdminBroadcastMessageMsg } from "./admin_broadcast_message_msg_type.js";
export { AdminBroadcastMessageMsg };
import { AdminClearResourceTimer } from "./admin_clear_resource_timer_type.js";
export { AdminClearResourceTimer };
import { AdminRestorePlayerStateTimer } from "./admin_restore_player_state_timer_type.js";
export { AdminRestorePlayerStateTimer };
import { AlertDesc } from "./alert_desc_type.js";
export { AlertDesc };
import { AlertState } from "./alert_state_type.js";
export { AlertState };
import { AlertType } from "./alert_type_type.js";
export { AlertType };
import { AttachedHerdsState } from "./attached_herds_state_type.js";
export { AttachedHerdsState };
import { AttackImpactTimer } from "./attack_impact_timer_type.js";
export { AttackImpactTimer };
import { AttackOutcomeState } from "./attack_outcome_state_type.js";
export { AttackOutcomeState };
import { AttackTimer } from "./attack_timer_type.js";
export { AttackTimer };
import { AuctionListingState } from "./auction_listing_state_type.js";
export { AuctionListingState };
import { AutoClaimState } from "./auto_claim_state_type.js";
export { AutoClaimState };
import { AutoLogoutLoopTimer } from "./auto_logout_loop_timer_type.js";
export { AutoLogoutLoopTimer };
import { BarterStallSetMarketModeEnabledRequest } from "./barter_stall_set_market_mode_enabled_request_type.js";
export { BarterStallSetMarketModeEnabledRequest };
import { BarterStallState } from "./barter_stall_state_type.js";
export { BarterStallState };
import { Biome } from "./biome_type.js";
export { Biome };
import { BiomeDesc } from "./biome_desc_type.js";
export { BiomeDesc };
import { BlockedIdentity } from "./blocked_identity_type.js";
export { BlockedIdentity };
import { BlockedIdentityOp } from "./blocked_identity_op_type.js";
export { BlockedIdentityOp };
import { BuffCategory } from "./buff_category_type.js";
export { BuffCategory };
import { BuffDesc } from "./buff_desc_type.js";
export { BuffDesc };
import { BuffEffect } from "./buff_effect_type.js";
export { BuffEffect };
import { BuffTypeDesc } from "./buff_type_desc_type.js";
export { BuffTypeDesc };
import { BuildingCategory } from "./building_category_type.js";
export { BuildingCategory };
import { BuildingClaimDesc } from "./building_claim_desc_type.js";
export { BuildingClaimDesc };
import { BuildingDecayLoopTimer } from "./building_decay_loop_timer_type.js";
export { BuildingDecayLoopTimer };
import { BuildingDesc } from "./building_desc_type.js";
export { BuildingDesc };
import { BuildingDespawnTimer } from "./building_despawn_timer_type.js";
export { BuildingDespawnTimer };
import { BuildingFunction } from "./building_function_type.js";
export { BuildingFunction };
import { BuildingFunctionTypeMappingDesc } from "./building_function_type_mapping_desc_type.js";
export { BuildingFunctionTypeMappingDesc };
import { BuildingInteractionLevel } from "./building_interaction_level_type.js";
export { BuildingInteractionLevel };
import { BuildingNicknameState } from "./building_nickname_state_type.js";
export { BuildingNicknameState };
import { BuildingNicknameStateOp } from "./building_nickname_state_op_type.js";
export { BuildingNicknameStateOp };
import { BuildingPortalDesc } from "./building_portal_desc_type.js";
export { BuildingPortalDesc };
import { BuildingRepairsDesc } from "./building_repairs_desc_type.js";
export { BuildingRepairsDesc };
import { BuildingRequirement } from "./building_requirement_type.js";
export { BuildingRequirement };
import { BuildingSetSignTextRequest } from "./building_set_sign_text_request_type.js";
export { BuildingSetSignTextRequest };
import { BuildingSpawnDesc } from "./building_spawn_desc_type.js";
export { BuildingSpawnDesc };
import { BuildingSpawnType } from "./building_spawn_type_type.js";
export { BuildingSpawnType };
import { BuildingState } from "./building_state_type.js";
export { BuildingState };
import { BuildingStateOp } from "./building_state_op_type.js";
export { BuildingStateOp };
import { BuildingTypeDesc } from "./building_type_desc_type.js";
export { BuildingTypeDesc };
import { CappedLevelRequirement } from "./capped_level_requirement_type.js";
export { CappedLevelRequirement };
import { CargoDesc } from "./cargo_desc_type.js";
export { CargoDesc };
import { CharacterStatDesc } from "./character_stat_desc_type.js";
export { CharacterStatDesc };
import { CharacterStatType } from "./character_stat_type_type.js";
export { CharacterStatType };
import { CharacterStatsState } from "./character_stats_state_type.js";
export { CharacterStatsState };
import { ChatChannel } from "./chat_channel_type.js";
export { ChatChannel };
import { ChatCleanupTimer } from "./chat_cleanup_timer_type.js";
export { ChatCleanupTimer };
import { ChatMessageState } from "./chat_message_state_type.js";
export { ChatMessageState };
import { CheatCargoGrantRequest } from "./cheat_cargo_grant_request_type.js";
export { CheatCargoGrantRequest };
import { CheatCompendiumEnemyPlaceRequest } from "./cheat_compendium_enemy_place_request_type.js";
export { CheatCompendiumEnemyPlaceRequest };
import { CheatCompendiumItemPlaceRequest } from "./cheat_compendium_item_place_request_type.js";
export { CheatCompendiumItemPlaceRequest };
import { CheatDiscoverMapRequest } from "./cheat_discover_map_request_type.js";
export { CheatDiscoverMapRequest };
import { CheatExperienceGrantRequest } from "./cheat_experience_grant_request_type.js";
export { CheatExperienceGrantRequest };
import { CheatGrantKnowledgeRequest } from "./cheat_grant_knowledge_request_type.js";
export { CheatGrantKnowledgeRequest };
import { CheatSetDebugAiStateRequest } from "./cheat_set_debug_ai_state_request_type.js";
export { CheatSetDebugAiStateRequest };
import { CheatSpawnLootChestRequest } from "./cheat_spawn_loot_chest_request_type.js";
export { CheatSpawnLootChestRequest };
import { CheatTeleportFloatRequest } from "./cheat_teleport_float_request_type.js";
export { CheatTeleportFloatRequest };
import { CheatToggleActiveCollectibleRequest } from "./cheat_toggle_active_collectible_request_type.js";
export { CheatToggleActiveCollectibleRequest };
import { CheatWarpRequest } from "./cheat_warp_request_type.js";
export { CheatWarpRequest };
import { ChestLootRarity } from "./chest_loot_rarity_type.js";
export { ChestLootRarity };
import { ChestRarityDesc } from "./chest_rarity_desc_type.js";
export { ChestRarityDesc };
import { ChunkCoordinatesMessage } from "./chunk_coordinates_message_type.js";
export { ChunkCoordinatesMessage };
import { ClaimCreateEmpireSettlementMsg } from "./claim_create_empire_settlement_msg_type.js";
export { ClaimCreateEmpireSettlementMsg };
import { ClaimLocalState } from "./claim_local_state_type.js";
export { ClaimLocalState };
import { ClaimMemberState } from "./claim_member_state_type.js";
export { ClaimMemberState };
import { ClaimMemberStateOp } from "./claim_member_state_op_type.js";
export { ClaimMemberStateOp };
import { ClaimPermission } from "./claim_permission_type.js";
export { ClaimPermission };
import { ClaimPurchaseSuppliesFromPlayerRequest } from "./claim_purchase_supplies_from_player_request_type.js";
export { ClaimPurchaseSuppliesFromPlayerRequest };
import { ClaimRecruitmentState } from "./claim_recruitment_state_type.js";
export { ClaimRecruitmentState };
import { ClaimResupplyRequest } from "./claim_resupply_request_type.js";
export { ClaimResupplyRequest };
import { ClaimSetPurchaseSupplyPriceRequest } from "./claim_set_purchase_supply_price_request_type.js";
export { ClaimSetPurchaseSupplyPriceRequest };
import { ClaimSetPurchaseSupplyThresholdRequest } from "./claim_set_purchase_supply_threshold_request_type.js";
export { ClaimSetPurchaseSupplyThresholdRequest };
import { ClaimState } from "./claim_state_type.js";
export { ClaimState };
import { ClaimStateOp } from "./claim_state_op_type.js";
export { ClaimStateOp };
import { ClaimTechDesc } from "./claim_tech_desc_type.js";
export { ClaimTechDesc };
import { ClaimTechState } from "./claim_tech_state_type.js";
export { ClaimTechState };
import { ClaimTechUnlockTimer } from "./claim_tech_unlock_timer_type.js";
export { ClaimTechUnlockTimer };
import { ClaimTileCost } from "./claim_tile_cost_type.js";
export { ClaimTileCost };
import { ClaimTileState } from "./claim_tile_state_type.js";
export { ClaimTileState };
import { ClaimType } from "./claim_type_type.js";
export { ClaimType };
import { ClimbRequirementDesc } from "./climb_requirement_desc_type.js";
export { ClimbRequirementDesc };
import { ClosedListingState } from "./closed_listing_state_type.js";
export { ClosedListingState };
import { ClothingDesc } from "./clothing_desc_type.js";
export { ClothingDesc };
import { ClothingMask } from "./clothing_mask_type.js";
export { ClothingMask };
import { ClothingVisual } from "./clothing_visual_type.js";
export { ClothingVisual };
import { CollectStatsTimer } from "./collect_stats_timer_type.js";
export { CollectStatsTimer };
import { CollectibleDesc } from "./collectible_desc_type.js";
export { CollectibleDesc };
import { CollectibleType } from "./collectible_type_type.js";
export { CollectibleType };
import { CombatActionDesc } from "./combat_action_desc_type.js";
export { CombatActionDesc };
import { CombatState } from "./combat_state_type.js";
export { CombatState };
import { CommonRng } from "./common_rng_type.js";
export { CommonRng };
import { Config } from "./config_type.js";
export { Config };
import { ConstructionRecipeDesc } from "./construction_recipe_desc_type.js";
export { ConstructionRecipeDesc };
import { CraftingRecipeDesc } from "./crafting_recipe_desc_type.js";
export { CraftingRecipeDesc };
import { CreatePlayerReportRequest } from "./create_player_report_request_type.js";
export { CreatePlayerReportRequest };
import { CsvStatEntry } from "./csv_stat_entry_type.js";
export { CsvStatEntry };
import { DayNightLoopTimer } from "./day_night_loop_timer_type.js";
export { DayNightLoopTimer };
import { DeconstructionRecipeDesc } from "./deconstruction_recipe_desc_type.js";
export { DeconstructionRecipeDesc };
import { DeleteEmpireMsg } from "./delete_empire_msg_type.js";
export { DeleteEmpireMsg };
import { DeployableCollectibleState } from "./deployable_collectible_state_type.js";
export { DeployableCollectibleState };
import { DeployableDeployRequest } from "./deployable_deploy_request_type.js";
export { DeployableDeployRequest };
import { DeployableDesc } from "./deployable_desc_type.js";
export { DeployableDesc };
import { DeployableDismountTimer } from "./deployable_dismount_timer_type.js";
export { DeployableDismountTimer };
import { DeployableState } from "./deployable_state_type.js";
export { DeployableState };
import { DeployableStoreRequest } from "./deployable_store_request_type.js";
export { DeployableStoreRequest };
import { DeployableType } from "./deployable_type_type.js";
export { DeployableType };
import { DestroyDimensionNetworkTimer } from "./destroy_dimension_network_timer_type.js";
export { DestroyDimensionNetworkTimer };
import { Developer } from "./developer_type.js";
export { Developer };
import { DimensionDescriptionState } from "./dimension_description_state_type.js";
export { DimensionDescriptionState };
import { DimensionNetworkState } from "./dimension_network_state_type.js";
export { DimensionNetworkState };
import { DimensionType } from "./dimension_type_type.js";
export { DimensionType };
import { DistantVisibleEntity } from "./distant_visible_entity_type.js";
export { DistantVisibleEntity };
import { DistantVisibleEntityDesc } from "./distant_visible_entity_desc_type.js";
export { DistantVisibleEntityDesc };
import { DroppedInventoryDespawnTimer } from "./dropped_inventory_despawn_timer_type.js";
export { DroppedInventoryDespawnTimer };
import { DroppedInventoryOwnershipTimer } from "./dropped_inventory_ownership_timer_type.js";
export { DroppedInventoryOwnershipTimer };
import { DroppedInventoryState } from "./dropped_inventory_state_type.js";
export { DroppedInventoryState };
import { DuelAgentTimer } from "./duel_agent_timer_type.js";
export { DuelAgentTimer };
import { DuelDespawnTimer } from "./duel_despawn_timer_type.js";
export { DuelDespawnTimer };
import { DuelState } from "./duel_state_type.js";
export { DuelState };
import { ElevatorDesc } from "./elevator_desc_type.js";
export { ElevatorDesc };
import { EmoteDesc } from "./emote_desc_type.js";
export { EmoteDesc };
import { EmpireAddSiegeSuppliesRequest } from "./empire_add_siege_supplies_request_type.js";
export { EmpireAddSiegeSuppliesRequest };
import { EmpireChunkState } from "./empire_chunk_state_type.js";
export { EmpireChunkState };
import { EmpireChunkStateOp } from "./empire_chunk_state_op_type.js";
export { EmpireChunkStateOp };
import { EmpireClaimJoinMsg } from "./empire_claim_join_msg_type.js";
export { EmpireClaimJoinMsg };
import { EmpireCollectHexiteCapsuleMsg } from "./empire_collect_hexite_capsule_msg_type.js";
export { EmpireCollectHexiteCapsuleMsg };
import { EmpireCollectHexiteCapsuleRequest } from "./empire_collect_hexite_capsule_request_type.js";
export { EmpireCollectHexiteCapsuleRequest };
import { EmpireColorDesc } from "./empire_color_desc_type.js";
export { EmpireColorDesc };
import { EmpireCreateBuildingMsg } from "./empire_create_building_msg_type.js";
export { EmpireCreateBuildingMsg };
import { EmpireExpansionState } from "./empire_expansion_state_type.js";
export { EmpireExpansionState };
import { EmpireExpansionStateOp } from "./empire_expansion_state_op_type.js";
export { EmpireExpansionStateOp };
import { EmpireIconDesc } from "./empire_icon_desc_type.js";
export { EmpireIconDesc };
import { EmpireNodeSiegeState } from "./empire_node_siege_state_type.js";
export { EmpireNodeSiegeState };
import { EmpireNodeSiegeStateOp } from "./empire_node_siege_state_op_type.js";
export { EmpireNodeSiegeStateOp };
import { EmpireNodeState } from "./empire_node_state_type.js";
export { EmpireNodeState };
import { EmpireNodeStateOp } from "./empire_node_state_op_type.js";
export { EmpireNodeStateOp };
import { EmpireNotificationDesc } from "./empire_notification_desc_type.js";
export { EmpireNotificationDesc };
import { EmpireNotificationType } from "./empire_notification_type_type.js";
export { EmpireNotificationType };
import { EmpirePlayerDataState } from "./empire_player_data_state_type.js";
export { EmpirePlayerDataState };
import { EmpirePlayerDataStateOp } from "./empire_player_data_state_op_type.js";
export { EmpirePlayerDataStateOp };
import { EmpireQueueSuppliesMsg } from "./empire_queue_supplies_msg_type.js";
export { EmpireQueueSuppliesMsg };
import { EmpireQueueSuppliesRequest } from "./empire_queue_supplies_request_type.js";
export { EmpireQueueSuppliesRequest };
import { EmpireRankDesc } from "./empire_rank_desc_type.js";
export { EmpireRankDesc };
import { EmpireRankState } from "./empire_rank_state_type.js";
export { EmpireRankState };
import { EmpireRankStateOp } from "./empire_rank_state_op_type.js";
export { EmpireRankStateOp };
import { EmpireRemoveCrownMsg } from "./empire_remove_crown_msg_type.js";
export { EmpireRemoveCrownMsg };
import { EmpireResupplyNodeMsg } from "./empire_resupply_node_msg_type.js";
export { EmpireResupplyNodeMsg };
import { EmpireResupplyNodeRequest } from "./empire_resupply_node_request_type.js";
export { EmpireResupplyNodeRequest };
import { EmpireSettlementState } from "./empire_settlement_state_type.js";
export { EmpireSettlementState };
import { EmpireSettlementStateOp } from "./empire_settlement_state_op_type.js";
export { EmpireSettlementStateOp };
import { EmpireSiegeAddSuppliesMsg } from "./empire_siege_add_supplies_msg_type.js";
export { EmpireSiegeAddSuppliesMsg };
import { EmpireStartSiegeMsg } from "./empire_start_siege_msg_type.js";
export { EmpireStartSiegeMsg };
import { EmpireStartSiegeRequest } from "./empire_start_siege_request_type.js";
export { EmpireStartSiegeRequest };
import { EmpireState } from "./empire_state_type.js";
export { EmpireState };
import { EmpireStateOp } from "./empire_state_op_type.js";
export { EmpireStateOp };
import { EmpireSuppliesDesc } from "./empire_supplies_desc_type.js";
export { EmpireSuppliesDesc };
import { EmpireTerritoryDesc } from "./empire_territory_desc_type.js";
export { EmpireTerritoryDesc };
import { EmpireUpdateEmperorCrownMsg } from "./empire_update_emperor_crown_msg_type.js";
export { EmpireUpdateEmperorCrownMsg };
import { EndGracePeriodTimer } from "./end_grace_period_timer_type.js";
export { EndGracePeriodTimer };
import { EnemyAiParamsDesc } from "./enemy_ai_params_desc_type.js";
export { EnemyAiParamsDesc };
import { EnemyClearAggroRequest } from "./enemy_clear_aggro_request_type.js";
export { EnemyClearAggroRequest };
import { EnemyDesc } from "./enemy_desc_type.js";
export { EnemyDesc };
import { EnemyDespawnTimer } from "./enemy_despawn_timer_type.js";
export { EnemyDespawnTimer };
import { EnemyMobMonitorState } from "./enemy_mob_monitor_state_type.js";
export { EnemyMobMonitorState };
import { EnemyMoveRequest } from "./enemy_move_request_type.js";
export { EnemyMoveRequest };
import { EnemyRegenLoopTimer } from "./enemy_regen_loop_timer_type.js";
export { EnemyRegenLoopTimer };
import { EnemySetHealthRequest } from "./enemy_set_health_request_type.js";
export { EnemySetHealthRequest };
import { EnemySpawnLootRequest } from "./enemy_spawn_loot_request_type.js";
export { EnemySpawnLootRequest };
import { EnemySpawnRequest } from "./enemy_spawn_request_type.js";
export { EnemySpawnRequest };
import { EnemyState } from "./enemy_state_type.js";
export { EnemyState };
import { EnemyStatus } from "./enemy_status_type.js";
export { EnemyStatus };
import { EnemyType } from "./enemy_type_type.js";
export { EnemyType };
import { EntityAttackRequest } from "./entity_attack_request_type.js";
export { EntityAttackRequest };
import { EntityType } from "./entity_type_type.js";
export { EntityType };
import { EnvironmentDebuffDesc } from "./environment_debuff_desc_type.js";
export { EnvironmentDebuffDesc };
import { EnvironmentDebuffLoopTimer } from "./environment_debuff_loop_timer_type.js";
export { EnvironmentDebuffLoopTimer };
import { EnvironmentResistanceType } from "./environment_resistance_type_type.js";
export { EnvironmentResistanceType };
import { EquipmentDesc } from "./equipment_desc_type.js";
export { EquipmentDesc };
import { EquipmentSlot } from "./equipment_slot_type.js";
export { EquipmentSlot };
import { EquipmentSlotType } from "./equipment_slot_type_type.js";
export { EquipmentSlotType };
import { EquipmentState } from "./equipment_state_type.js";
export { EquipmentState };
import { EquipmentVisualType } from "./equipment_visual_type_type.js";
export { EquipmentVisualType };
import { ExperienceStack } from "./experience_stack_type.js";
export { ExperienceStack };
import { ExperienceStackF32 } from "./experience_stack_f_32_type.js";
export { ExperienceStackF32 };
import { ExperienceState } from "./experience_state_type.js";
export { ExperienceState };
import { ExplorationChunksState } from "./exploration_chunks_state_type.js";
export { ExplorationChunksState };
import { ExtractOutcomeState } from "./extract_outcome_state_type.js";
export { ExtractOutcomeState };
import { ExtractionRecipeDesc } from "./extraction_recipe_desc_type.js";
export { ExtractionRecipeDesc };
import { FloatHexTileMessage } from "./float_hex_tile_message_type.js";
export { FloatHexTileMessage };
import { FoodDesc } from "./food_desc_type.js";
export { FoodDesc };
import { FootprintTile } from "./footprint_tile_type.js";
export { FootprintTile };
import { FootprintTileState } from "./footprint_tile_state_type.js";
export { FootprintTileState };
import { FootprintType } from "./footprint_type_type.js";
export { FootprintType };
import { ForceGenerateTypes } from "./force_generate_types_type.js";
export { ForceGenerateTypes };
import { GateDesc } from "./gate_desc_type.js";
export { GateDesc };
import { GlobalDeleteEmpireBuildingMsg } from "./global_delete_empire_building_msg_type.js";
export { GlobalDeleteEmpireBuildingMsg };
import { GlobalSearchState } from "./global_search_state_type.js";
export { GlobalSearchState };
import { Globals } from "./globals_type.js";
export { Globals };
import { GracePeriodType } from "./grace_period_type_type.js";
export { GracePeriodType };
import { GrantHubItemMsg } from "./grant_hub_item_msg_type.js";
export { GrantHubItemMsg };
import { GrowthLoopTimer } from "./growth_loop_timer_type.js";
export { GrowthLoopTimer };
import { GrowthState } from "./growth_state_type.js";
export { GrowthState };
import { HandEquipmentVisual } from "./hand_equipment_visual_type.js";
export { HandEquipmentVisual };
import { HealthState } from "./health_state_type.js";
export { HealthState };
import { HerdState } from "./herd_state_type.js";
export { HerdState };
import { HexDirection } from "./hex_direction_type.js";
export { HexDirection };
import { HexiteExchangeEntryDesc } from "./hexite_exchange_entry_desc_type.js";
export { HexiteExchangeEntryDesc };
import { HideDeployableTimer } from "./hide_deployable_timer_type.js";
export { HideDeployableTimer };
import { HubItemType } from "./hub_item_type_type.js";
export { HubItemType };
import { IdentityRole } from "./identity_role_type.js";
export { IdentityRole };
import { IdentityRoleOp } from "./identity_role_op_type.js";
export { IdentityRoleOp };
import { InputItemStack } from "./input_item_stack_type.js";
export { InputItemStack };
import { InterModuleMessage } from "./inter_module_message_type.js";
export { InterModuleMessage };
import { InterModuleMessageCounter } from "./inter_module_message_counter_type.js";
export { InterModuleMessageCounter };
import { InterModuleResponseMessageCounter } from "./inter_module_response_message_counter_type.js";
export { InterModuleResponseMessageCounter };
import { InterModuleTableUpdates } from "./inter_module_table_updates_type.js";
export { InterModuleTableUpdates };
import { InteriorCollapseTriggerState } from "./interior_collapse_trigger_state_type.js";
export { InteriorCollapseTriggerState };
import { InteriorEnvironmentDesc } from "./interior_environment_desc_type.js";
export { InteriorEnvironmentDesc };
import { InteriorInstanceDesc } from "./interior_instance_desc_type.js";
export { InteriorInstanceDesc };
import { InteriorNetworkDesc } from "./interior_network_desc_type.js";
export { InteriorNetworkDesc };
import { InteriorPortalConnectionsDesc } from "./interior_portal_connections_desc_type.js";
export { InteriorPortalConnectionsDesc };
import { InteriorSetCollapsedTimer } from "./interior_set_collapsed_timer_type.js";
export { InteriorSetCollapsedTimer };
import { InteriorShapeDesc } from "./interior_shape_desc_type.js";
export { InteriorShapeDesc };
import { InteriorSpawnDesc } from "./interior_spawn_desc_type.js";
export { InteriorSpawnDesc };
import { InteriorSpawnType } from "./interior_spawn_type_type.js";
export { InteriorSpawnType };
import { InventoryState } from "./inventory_state_type.js";
export { InventoryState };
import { ItemConversionLocationContext } from "./item_conversion_location_context_type.js";
export { ItemConversionLocationContext };
import { ItemConversionRecipeDesc } from "./item_conversion_recipe_desc_type.js";
export { ItemConversionRecipeDesc };
import { ItemDesc } from "./item_desc_type.js";
export { ItemDesc };
import { ItemListDesc } from "./item_list_desc_type.js";
export { ItemListDesc };
import { ItemListPossibility } from "./item_list_possibility_type.js";
export { ItemListPossibility };
import { ItemStack } from "./item_stack_type.js";
export { ItemStack };
import { ItemType } from "./item_type_type.js";
export { ItemType };
import { KnowledgeAchievementState } from "./knowledge_achievement_state_type.js";
export { KnowledgeAchievementState };
import { KnowledgeBattleActionState } from "./knowledge_battle_action_state_type.js";
export { KnowledgeBattleActionState };
import { KnowledgeBuildingState } from "./knowledge_building_state_type.js";
export { KnowledgeBuildingState };
import { KnowledgeCargoState } from "./knowledge_cargo_state_type.js";
export { KnowledgeCargoState };
import { KnowledgeClaimState } from "./knowledge_claim_state_type.js";
export { KnowledgeClaimState };
import { KnowledgeConstructionState } from "./knowledge_construction_state_type.js";
export { KnowledgeConstructionState };
import { KnowledgeCraftState } from "./knowledge_craft_state_type.js";
export { KnowledgeCraftState };
import { KnowledgeDeployableState } from "./knowledge_deployable_state_type.js";
export { KnowledgeDeployableState };
import { KnowledgeEnemyState } from "./knowledge_enemy_state_type.js";
export { KnowledgeEnemyState };
import { KnowledgeEntityEntry } from "./knowledge_entity_entry_type.js";
export { KnowledgeEntityEntry };
import { KnowledgeEntry } from "./knowledge_entry_type.js";
export { KnowledgeEntry };
import { KnowledgeExtractState } from "./knowledge_extract_state_type.js";
export { KnowledgeExtractState };
import { KnowledgeItemState } from "./knowledge_item_state_type.js";
export { KnowledgeItemState };
import { KnowledgeLocationEntry } from "./knowledge_location_entry_type.js";
export { KnowledgeLocationEntry };
import { KnowledgeLoreState } from "./knowledge_lore_state_type.js";
export { KnowledgeLoreState };
import { KnowledgeNpcState } from "./knowledge_npc_state_type.js";
export { KnowledgeNpcState };
import { KnowledgePavingState } from "./knowledge_paving_state_type.js";
export { KnowledgePavingState };
import { KnowledgePillarShapingState } from "./knowledge_pillar_shaping_state_type.js";
export { KnowledgePillarShapingState };
import { KnowledgeResourcePlacementState } from "./knowledge_resource_placement_state_type.js";
export { KnowledgeResourcePlacementState };
import { KnowledgeResourceState } from "./knowledge_resource_state_type.js";
export { KnowledgeResourceState };
import { KnowledgeRuinsState } from "./knowledge_ruins_state_type.js";
export { KnowledgeRuinsState };
import { KnowledgeScrollDesc } from "./knowledge_scroll_desc_type.js";
export { KnowledgeScrollDesc };
import { KnowledgeScrollTypeDesc } from "./knowledge_scroll_type_desc_type.js";
export { KnowledgeScrollTypeDesc };
import { KnowledgeSecondaryState } from "./knowledge_secondary_state_type.js";
export { KnowledgeSecondaryState };
import { KnowledgeStatModifierDesc } from "./knowledge_stat_modifier_desc_type.js";
export { KnowledgeStatModifierDesc };
import { KnowledgeState } from "./knowledge_state_type.js";
export { KnowledgeState };
import { KnowledgeVaultState } from "./knowledge_vault_state_type.js";
export { KnowledgeVaultState };
import { LargeHexTileMessage } from "./large_hex_tile_message_type.js";
export { LargeHexTileMessage };
import { LevelRequirement } from "./level_requirement_type.js";
export { LevelRequirement };
import { LightSourceState } from "./light_source_state_type.js";
export { LightSourceState };
import { LocationCache } from "./location_cache_type.js";
export { LocationCache };
import { LocationState } from "./location_state_type.js";
export { LocationState };
import { LocationStateOp } from "./location_state_op_type.js";
export { LocationStateOp };
import { LootChestDesc } from "./loot_chest_desc_type.js";
export { LootChestDesc };
import { LootChestDespawnTimer } from "./loot_chest_despawn_timer_type.js";
export { LootChestDespawnTimer };
import { LootChestSpawnTimer } from "./loot_chest_spawn_timer_type.js";
export { LootChestSpawnTimer };
import { LootChestState } from "./loot_chest_state_type.js";
export { LootChestState };
import { LootRarityDesc } from "./loot_rarity_desc_type.js";
export { LootRarityDesc };
import { LootTableDesc } from "./loot_table_desc_type.js";
export { LootTableDesc };
import { LostItemsState } from "./lost_items_state_type.js";
export { LostItemsState };
import { MessageContents } from "./message_contents_type.js";
export { MessageContents };
import { MobileEntityState } from "./mobile_entity_state_type.js";
export { MobileEntityState };
import { ModerationActionLogEntry } from "./moderation_action_log_entry_type.js";
export { ModerationActionLogEntry };
import { MountingState } from "./mounting_state_type.js";
export { MountingState };
import { MoveValidationParamsDesc } from "./move_validation_params_desc_type.js";
export { MoveValidationParamsDesc };
import { MoveValidationStrikeCounterState } from "./move_validation_strike_counter_state_type.js";
export { MoveValidationStrikeCounterState };
import { MovementSpeed } from "./movement_speed_type.js";
export { MovementSpeed };
import { MovementType } from "./movement_type_type.js";
export { MovementType };
import { NotificationSeverity } from "./notification_severity_type.js";
export { NotificationSeverity };
import { NpcAiLoopTimer } from "./npc_ai_loop_timer_type.js";
export { NpcAiLoopTimer };
import { NpcDesc } from "./npc_desc_type.js";
export { NpcDesc };
import { NpcState } from "./npc_state_type.js";
export { NpcState };
import { NpcType } from "./npc_type_type.js";
export { NpcType };
import { OffsetCoordinatesFloat } from "./offset_coordinates_float_type.js";
export { OffsetCoordinatesFloat };
import { OffsetCoordinatesLargeMessage } from "./offset_coordinates_large_message_type.js";
export { OffsetCoordinatesLargeMessage };
import { OffsetCoordinatesSmallMessage } from "./offset_coordinates_small_message_type.js";
export { OffsetCoordinatesSmallMessage };
import { OnClaimMembersChangedMsg } from "./on_claim_members_changed_msg_type.js";
export { OnClaimMembersChangedMsg };
import { OnDeployableRecoveredMsg } from "./on_deployable_recovered_msg_type.js";
export { OnDeployableRecoveredMsg };
import { OnDurabilityZeroTimer } from "./on_durability_zero_timer_type.js";
export { OnDurabilityZeroTimer };
import { OnEmpireBuildingDeletedMsg } from "./on_empire_building_deleted_msg_type.js";
export { OnEmpireBuildingDeletedMsg };
import { OnPlayerJoinedEmpireMsg } from "./on_player_joined_empire_msg_type.js";
export { OnPlayerJoinedEmpireMsg };
import { OnPlayerLeftEmpireMsg } from "./on_player_left_empire_msg_type.js";
export { OnPlayerLeftEmpireMsg };
import { OnPlayerNameSetMsg } from "./on_player_name_set_msg_type.js";
export { OnPlayerNameSetMsg };
import { OnRegionPlayerCreatedMsg } from "./on_region_player_created_msg_type.js";
export { OnRegionPlayerCreatedMsg };
import { OnboardingRewardDesc } from "./onboarding_reward_desc_type.js";
export { OnboardingRewardDesc };
import { OnboardingState } from "./onboarding_state_type.js";
export { OnboardingState };
import { OnlineTimestamp } from "./online_timestamp_type.js";
export { OnlineTimestamp };
import { ParametersDesc } from "./parameters_desc_type.js";
export { ParametersDesc };
import { ParametersPlayerMoveDesc } from "./parameters_player_move_desc_type.js";
export { ParametersPlayerMoveDesc };
import { PartialExperienceState } from "./partial_experience_state_type.js";
export { PartialExperienceState };
import { PassiveCraftState } from "./passive_craft_state_type.js";
export { PassiveCraftState };
import { PassiveCraftStatus } from "./passive_craft_status_type.js";
export { PassiveCraftStatus };
import { PassiveCraftTimer } from "./passive_craft_timer_type.js";
export { PassiveCraftTimer };
import { PathfindingDesc } from "./pathfinding_desc_type.js";
export { PathfindingDesc };
import { PathfindingTraversalOption } from "./pathfinding_traversal_option_type.js";
export { PathfindingTraversalOption };
import { PavedTileState } from "./paved_tile_state_type.js";
export { PavedTileState };
import { PavingTileDesc } from "./paving_tile_desc_type.js";
export { PavingTileDesc };
import { Permission } from "./permission_type.js";
export { Permission };
import { PermissionGroup } from "./permission_group_type.js";
export { PermissionGroup };
import { PermissionState } from "./permission_state_type.js";
export { PermissionState };
import { PillarShapingDesc } from "./pillar_shaping_desc_type.js";
export { PillarShapingDesc };
import { PillarShapingState } from "./pillar_shaping_state_type.js";
export { PillarShapingState };
import { PlayerAchievementClaimRequest } from "./player_achievement_claim_request_type.js";
export { PlayerAchievementClaimRequest };
import { PlayerAcquireKnowledgeFromEntitiesRequest } from "./player_acquire_knowledge_from_entities_request_type.js";
export { PlayerAcquireKnowledgeFromEntitiesRequest };
import { PlayerActionDesc } from "./player_action_desc_type.js";
export { PlayerActionDesc };
import { PlayerActionLayer } from "./player_action_layer_type.js";
export { PlayerActionLayer };
import { PlayerActionResult } from "./player_action_result_type.js";
export { PlayerActionResult };
import { PlayerActionState } from "./player_action_state_type.js";
export { PlayerActionState };
import { PlayerActionType } from "./player_action_type_type.js";
export { PlayerActionType };
import { PlayerBarterStallOrderAccept } from "./player_barter_stall_order_accept_type.js";
export { PlayerBarterStallOrderAccept };
import { PlayerBarterStallOrderCreateRequest } from "./player_barter_stall_order_create_request_type.js";
export { PlayerBarterStallOrderCreateRequest };
import { PlayerBarterStallOrderDeleteRequest } from "./player_barter_stall_order_delete_request_type.js";
export { PlayerBarterStallOrderDeleteRequest };
import { PlayerBuildingDeconstructRequest } from "./player_building_deconstruct_request_type.js";
export { PlayerBuildingDeconstructRequest };
import { PlayerBuildingMoveRequest } from "./player_building_move_request_type.js";
export { PlayerBuildingMoveRequest };
import { PlayerBuildingRepairRequest } from "./player_building_repair_request_type.js";
export { PlayerBuildingRepairRequest };
import { PlayerBuildingSetNicknameRequest } from "./player_building_set_nickname_request_type.js";
export { PlayerBuildingSetNicknameRequest };
import { PlayerChatPostMessageRequest } from "./player_chat_post_message_request_type.js";
export { PlayerChatPostMessageRequest };
import { PlayerClaimAddMemberRequest } from "./player_claim_add_member_request_type.js";
export { PlayerClaimAddMemberRequest };
import { PlayerClaimAddRecruitmentRequest } from "./player_claim_add_recruitment_request_type.js";
export { PlayerClaimAddRecruitmentRequest };
import { PlayerClaimAddTileRequest } from "./player_claim_add_tile_request_type.js";
export { PlayerClaimAddTileRequest };
import { PlayerClaimApplyForRecruitmentRequest } from "./player_claim_apply_for_recruitment_request_type.js";
export { PlayerClaimApplyForRecruitmentRequest };
import { PlayerClaimDepositToTreasuryRequest } from "./player_claim_deposit_to_treasury_request_type.js";
export { PlayerClaimDepositToTreasuryRequest };
import { PlayerClaimLeaveRequest } from "./player_claim_leave_request_type.js";
export { PlayerClaimLeaveRequest };
import { PlayerClaimRemoveMemberRequest } from "./player_claim_remove_member_request_type.js";
export { PlayerClaimRemoveMemberRequest };
import { PlayerClaimRemoveRecruitmentRequest } from "./player_claim_remove_recruitment_request_type.js";
export { PlayerClaimRemoveRecruitmentRequest };
import { PlayerClaimRemoveTileRequest } from "./player_claim_remove_tile_request_type.js";
export { PlayerClaimRemoveTileRequest };
import { PlayerClaimRenameRequest } from "./player_claim_rename_request_type.js";
export { PlayerClaimRenameRequest };
import { PlayerClaimSetMemberPermissionsRequest } from "./player_claim_set_member_permissions_request_type.js";
export { PlayerClaimSetMemberPermissionsRequest };
import { PlayerClaimTakeOwnershipRequest } from "./player_claim_take_ownership_request_type.js";
export { PlayerClaimTakeOwnershipRequest };
import { PlayerClaimTechCancelRequest } from "./player_claim_tech_cancel_request_type.js";
export { PlayerClaimTechCancelRequest };
import { PlayerClaimTechLearnRequest } from "./player_claim_tech_learn_request_type.js";
export { PlayerClaimTechLearnRequest };
import { PlayerClaimTransferOwnershipRequest } from "./player_claim_transfer_ownership_request_type.js";
export { PlayerClaimTransferOwnershipRequest };
import { PlayerClaimWithdrawFromTreasuryRequest } from "./player_claim_withdraw_from_treasury_request_type.js";
export { PlayerClaimWithdrawFromTreasuryRequest };
import { PlayerClimbRequest } from "./player_climb_request_type.js";
export { PlayerClimbRequest };
import { PlayerClosedListingCollectRequest } from "./player_closed_listing_collect_request_type.js";
export { PlayerClosedListingCollectRequest };
import { PlayerCollectibleActivateRequest } from "./player_collectible_activate_request_type.js";
export { PlayerCollectibleActivateRequest };
import { PlayerCompleteTaskRequest } from "./player_complete_task_request_type.js";
export { PlayerCompleteTaskRequest };
import { PlayerConvertCollectibleToDeedRequest } from "./player_convert_collectible_to_deed_request_type.js";
export { PlayerConvertCollectibleToDeedRequest };
import { PlayerConvertDeedToCollectibleRequest } from "./player_convert_deed_to_collectible_request_type.js";
export { PlayerConvertDeedToCollectibleRequest };
import { PlayerCraftCancelRequest } from "./player_craft_cancel_request_type.js";
export { PlayerCraftCancelRequest };
import { PlayerCraftCollectAllRequest } from "./player_craft_collect_all_request_type.js";
export { PlayerCraftCollectAllRequest };
import { PlayerCraftCollectRequest } from "./player_craft_collect_request_type.js";
export { PlayerCraftCollectRequest };
import { PlayerCraftContinueRequest } from "./player_craft_continue_request_type.js";
export { PlayerCraftContinueRequest };
import { PlayerCraftInitiateRequest } from "./player_craft_initiate_request_type.js";
export { PlayerCraftInitiateRequest };
import { PlayerCreateMsg } from "./player_create_msg_type.js";
export { PlayerCreateMsg };
import { PlayerDeathTimer } from "./player_death_timer_type.js";
export { PlayerDeathTimer };
import { PlayerDeployableDismountRequest } from "./player_deployable_dismount_request_type.js";
export { PlayerDeployableDismountRequest };
import { PlayerDeployableMountRequest } from "./player_deployable_mount_request_type.js";
export { PlayerDeployableMountRequest };
import { PlayerDeployableMoveRequest } from "./player_deployable_move_request_type.js";
export { PlayerDeployableMoveRequest };
import { PlayerDiscoverEntitiesRequest } from "./player_discover_entities_request_type.js";
export { PlayerDiscoverEntitiesRequest };
import { PlayerDismissAlertRequest } from "./player_dismiss_alert_request_type.js";
export { PlayerDismissAlertRequest };
import { PlayerDroppedInventoryPickUpRequest } from "./player_dropped_inventory_pick_up_request_type.js";
export { PlayerDroppedInventoryPickUpRequest };
import { PlayerEatRequest } from "./player_eat_request_type.js";
export { PlayerEatRequest };
import { PlayerEditOrderRequest } from "./player_edit_order_request_type.js";
export { PlayerEditOrderRequest };
import { PlayerEmoteRequest } from "./player_emote_request_type.js";
export { PlayerEmoteRequest };
import { PlayerEquipmentAddRequest } from "./player_equipment_add_request_type.js";
export { PlayerEquipmentAddRequest };
import { PlayerEquipmentRemoveRequest } from "./player_equipment_remove_request_type.js";
export { PlayerEquipmentRemoveRequest };
import { PlayerExtractRequest } from "./player_extract_request_type.js";
export { PlayerExtractRequest };
import { PlayerHousingDesc } from "./player_housing_desc_type.js";
export { PlayerHousingDesc };
import { PlayerHousingEnterRequest } from "./player_housing_enter_request_type.js";
export { PlayerHousingEnterRequest };
import { PlayerHousingEvictPlayerRequest } from "./player_housing_evict_player_request_type.js";
export { PlayerHousingEvictPlayerRequest };
import { PlayerHousingEvictPlayerTimer } from "./player_housing_evict_player_timer_type.js";
export { PlayerHousingEvictPlayerTimer };
import { PlayerHousingIncomeLoopTimer } from "./player_housing_income_loop_timer_type.js";
export { PlayerHousingIncomeLoopTimer };
import { PlayerHousingRequestAccessRequest } from "./player_housing_request_access_request_type.js";
export { PlayerHousingRequestAccessRequest };
import { PlayerHousingState } from "./player_housing_state_type.js";
export { PlayerHousingState };
import { PlayerHousingStateOp } from "./player_housing_state_op_type.js";
export { PlayerHousingStateOp };
import { PlayerItemConvertRequest } from "./player_item_convert_request_type.js";
export { PlayerItemConvertRequest };
import { PlayerItemDropRequest } from "./player_item_drop_request_type.js";
export { PlayerItemDropRequest };
import { PlayerItemStackMoveAllRequest } from "./player_item_stack_move_all_request_type.js";
export { PlayerItemStackMoveAllRequest };
import { PlayerItemStackMoveRequest } from "./player_item_stack_move_request_type.js";
export { PlayerItemStackMoveRequest };
import { PlayerItemStackSplitRequest } from "./player_item_stack_split_request_type.js";
export { PlayerItemStackSplitRequest };
import { PlayerItemUseRequest } from "./player_item_use_request_type.js";
export { PlayerItemUseRequest };
import { PlayerLowercaseUsernameState } from "./player_lowercase_username_state_type.js";
export { PlayerLowercaseUsernameState };
import { PlayerMoveRequest } from "./player_move_request_type.js";
export { PlayerMoveRequest };
import { PlayerNoteState } from "./player_note_state_type.js";
export { PlayerNoteState };
import { PlayerNotificationEvent } from "./player_notification_event_type.js";
export { PlayerNotificationEvent };
import { PlayerOrderCancelRequest } from "./player_order_cancel_request_type.js";
export { PlayerOrderCancelRequest };
import { PlayerOrderCollectRequest } from "./player_order_collect_request_type.js";
export { PlayerOrderCollectRequest };
import { PlayerPassiveCraftQueueRequest } from "./player_passive_craft_queue_request_type.js";
export { PlayerPassiveCraftQueueRequest };
import { PlayerPausePlayTimerRequest } from "./player_pause_play_timer_request_type.js";
export { PlayerPausePlayTimerRequest };
import { PlayerPavingDestroyTileRequest } from "./player_paving_destroy_tile_request_type.js";
export { PlayerPavingDestroyTileRequest };
import { PlayerPavingPlaceTileRequest } from "./player_paving_place_tile_request_type.js";
export { PlayerPavingPlaceTileRequest };
import { PlayerPermissionEditRequest } from "./player_permission_edit_request_type.js";
export { PlayerPermissionEditRequest };
import { PlayerPillarShapingDestroyRequest } from "./player_pillar_shaping_destroy_request_type.js";
export { PlayerPillarShapingDestroyRequest };
import { PlayerPillarShapingPlaceRequest } from "./player_pillar_shaping_place_request_type.js";
export { PlayerPillarShapingPlaceRequest };
import { PlayerPocketSwapContentsRequest } from "./player_pocket_swap_contents_request_type.js";
export { PlayerPocketSwapContentsRequest };
import { PlayerPortalEnterRequest } from "./player_portal_enter_request_type.js";
export { PlayerPortalEnterRequest };
import { PlayerPostOrderRequest } from "./player_post_order_request_type.js";
export { PlayerPostOrderRequest };
import { PlayerPrefsState } from "./player_prefs_state_type.js";
export { PlayerPrefsState };
import { PlayerProjectSiteAddMaterialsRequest } from "./player_project_site_add_materials_request_type.js";
export { PlayerProjectSiteAddMaterialsRequest };
import { PlayerProjectSiteAdvanceProjectRequest } from "./player_project_site_advance_project_request_type.js";
export { PlayerProjectSiteAdvanceProjectRequest };
import { PlayerProjectSiteCancelRequest } from "./player_project_site_cancel_request_type.js";
export { PlayerProjectSiteCancelRequest };
import { PlayerProjectSitePlaceRequest } from "./player_project_site_place_request_type.js";
export { PlayerProjectSitePlaceRequest };
import { PlayerQueueState } from "./player_queue_state_type.js";
export { PlayerQueueState };
import { PlayerRegenLoopTimer } from "./player_regen_loop_timer_type.js";
export { PlayerRegenLoopTimer };
import { PlayerRegionTransferEvent } from "./player_region_transfer_event_type.js";
export { PlayerRegionTransferEvent };
import { PlayerReportState } from "./player_report_state_type.js";
export { PlayerReportState };
import { PlayerReportStateOp } from "./player_report_state_op_type.js";
export { PlayerReportStateOp };
import { PlayerReportStateTimestamp } from "./player_report_state_timestamp_type.js";
export { PlayerReportStateTimestamp };
import { PlayerRetrieveLostItemRequest } from "./player_retrieve_lost_item_request_type.js";
export { PlayerRetrieveLostItemRequest };
import { PlayerScrollReadRequest } from "./player_scroll_read_request_type.js";
export { PlayerScrollReadRequest };
import { PlayerSetDefaultDeployableRequest } from "./player_set_default_deployable_request_type.js";
export { PlayerSetDefaultDeployableRequest };
import { PlayerSetHomeRequest } from "./player_set_home_request_type.js";
export { PlayerSetHomeRequest };
import { PlayerSetNameOutcomeEvent } from "./player_set_name_outcome_event_type.js";
export { PlayerSetNameOutcomeEvent };
import { PlayerSignInRequest } from "./player_sign_in_request_type.js";
export { PlayerSignInRequest };
import { PlayerSkipQueueMsg } from "./player_skip_queue_msg_type.js";
export { PlayerSkipQueueMsg };
import { PlayerSleepRequest } from "./player_sleep_request_type.js";
export { PlayerSleepRequest };
import { PlayerState } from "./player_state_type.js";
export { PlayerState };
import { PlayerTeleportHomeRequest } from "./player_teleport_home_request_type.js";
export { PlayerTeleportHomeRequest };
import { PlayerTeleportWaystoneRequest } from "./player_teleport_waystone_request_type.js";
export { PlayerTeleportWaystoneRequest };
import { PlayerTerraformCancelRequest } from "./player_terraform_cancel_request_type.js";
export { PlayerTerraformCancelRequest };
import { PlayerTerraformRequest } from "./player_terraform_request_type.js";
export { PlayerTerraformRequest };
import { PlayerTerraformSetFinalTargetRequest } from "./player_terraform_set_final_target_request_type.js";
export { PlayerTerraformSetFinalTargetRequest };
import { PlayerTimestampState } from "./player_timestamp_state_type.js";
export { PlayerTimestampState };
import { PlayerTradeAcceptRequest } from "./player_trade_accept_request_type.js";
export { PlayerTradeAcceptRequest };
import { PlayerTradeAcceptSessionRequest } from "./player_trade_accept_session_request_type.js";
export { PlayerTradeAcceptSessionRequest };
import { PlayerTradeAddItemRequest } from "./player_trade_add_item_request_type.js";
export { PlayerTradeAddItemRequest };
import { PlayerTradeDeclineRequest } from "./player_trade_decline_request_type.js";
export { PlayerTradeDeclineRequest };
import { PlayerTradeDeclineSessionRequest } from "./player_trade_decline_session_request_type.js";
export { PlayerTradeDeclineSessionRequest };
import { PlayerTradeInitiateSessionRequest } from "./player_trade_initiate_session_request_type.js";
export { PlayerTradeInitiateSessionRequest };
import { PlayerTradeRemoveItemRequest } from "./player_trade_remove_item_request_type.js";
export { PlayerTradeRemoveItemRequest };
import { PlayerTradeSwapPocketsRequest } from "./player_trade_swap_pockets_request_type.js";
export { PlayerTradeSwapPocketsRequest };
import { PlayerUseElevatorTimer } from "./player_use_elevator_timer_type.js";
export { PlayerUseElevatorTimer };
import { PlayerUsernameState } from "./player_username_state_type.js";
export { PlayerUsernameState };
import { PlayerVoteAnswer } from "./player_vote_answer_type.js";
export { PlayerVoteAnswer };
import { PlayerVoteAnswerRequest } from "./player_vote_answer_request_type.js";
export { PlayerVoteAnswerRequest };
import { PlayerVoteConcludeTimer } from "./player_vote_conclude_timer_type.js";
export { PlayerVoteConcludeTimer };
import { PlayerVoteState } from "./player_vote_state_type.js";
export { PlayerVoteState };
import { PlayerVoteType } from "./player_vote_type_type.js";
export { PlayerVoteType };
import { Pocket } from "./pocket_type.js";
export { Pocket };
import { PocketKey } from "./pocket_key_type.js";
export { PocketKey };
import { PortalState } from "./portal_state_type.js";
export { PortalState };
import { PrivateParametersDesc } from "./private_parameters_desc_type.js";
export { PrivateParametersDesc };
import { ProbabilisticItemStack } from "./probabilistic_item_stack_type.js";
export { ProbabilisticItemStack };
import { ProgressiveActionState } from "./progressive_action_state_type.js";
export { ProgressiveActionState };
import { ProgressiveActionStatus } from "./progressive_action_status_type.js";
export { ProgressiveActionStatus };
import { ProjectSiteState } from "./project_site_state_type.js";
export { ProjectSiteState };
import { PublicProgressiveActionState } from "./public_progressive_action_state_type.js";
export { PublicProgressiveActionState };
import { Rarity } from "./rarity_type.js";
export { Rarity };
import { RecoverDeployableMsg } from "./recover_deployable_msg_type.js";
export { RecoverDeployableMsg };
import { RegionConnectionInfo } from "./region_connection_info_type.js";
export { RegionConnectionInfo };
import { RegionConnectionInfoOp } from "./region_connection_info_op_type.js";
export { RegionConnectionInfoOp };
import { RegionDestroySiegeEngineMsg } from "./region_destroy_siege_engine_msg_type.js";
export { RegionDestroySiegeEngineMsg };
import { RegionPopulationInfo } from "./region_population_info_type.js";
export { RegionPopulationInfo };
import { RegionPopulationInfoOp } from "./region_population_info_op_type.js";
export { RegionPopulationInfoOp };
import { RegionPopulationLoopTimer } from "./region_population_loop_timer_type.js";
export { RegionPopulationLoopTimer };
import { RegionSignInParameters } from "./region_sign_in_parameters_type.js";
export { RegionSignInParameters };
import { RegionSignInParametersOp } from "./region_sign_in_parameters_op_type.js";
export { RegionSignInParametersOp };
import { RentAddListingRequest } from "./rent_add_listing_request_type.js";
export { RentAddListingRequest };
import { RentAddTenantRequest } from "./rent_add_tenant_request_type.js";
export { RentAddTenantRequest };
import { RentCollectorLoopTimer } from "./rent_collector_loop_timer_type.js";
export { RentCollectorLoopTimer };
import { RentDepositCoinsRequest } from "./rent_deposit_coins_request_type.js";
export { RentDepositCoinsRequest };
import { RentEvictRequest } from "./rent_evict_request_type.js";
export { RentEvictRequest };
import { RentEvictTimer } from "./rent_evict_timer_type.js";
export { RentEvictTimer };
import { RentPurchaseRequest } from "./rent_purchase_request_type.js";
export { RentPurchaseRequest };
import { RentRemoveTenantRequest } from "./rent_remove_tenant_request_type.js";
export { RentRemoveTenantRequest };
import { RentSetDailyRateRequest } from "./rent_set_daily_rate_request_type.js";
export { RentSetDailyRateRequest };
import { RentState } from "./rent_state_type.js";
export { RentState };
import { RentTerminateRequest } from "./rent_terminate_request_type.js";
export { RentTerminateRequest };
import { RentUnlistRequest } from "./rent_unlist_request_type.js";
export { RentUnlistRequest };
import { ReportPlayerChatMessage } from "./report_player_chat_message_type.js";
export { ReportPlayerChatMessage };
import { ReportPlayerMessage } from "./report_player_message_type.js";
export { ReportPlayerMessage };
import { ReservedNameDesc } from "./reserved_name_desc_type.js";
export { ReservedNameDesc };
import { ResetChunkIndexTimer } from "./reset_chunk_index_timer_type.js";
export { ResetChunkIndexTimer };
import { ResetMobileEntityTimer } from "./reset_mobile_entity_timer_type.js";
export { ResetMobileEntityTimer };
import { ResourceClumpDesc } from "./resource_clump_desc_type.js";
export { ResourceClumpDesc };
import { ResourceClumpInfo } from "./resource_clump_info_type.js";
export { ResourceClumpInfo };
import { ResourceCount } from "./resource_count_type.js";
export { ResourceCount };
import { ResourceDesc } from "./resource_desc_type.js";
export { ResourceDesc };
import { ResourceGrowthRecipeDesc } from "./resource_growth_recipe_desc_type.js";
export { ResourceGrowthRecipeDesc };
import { ResourceHealthState } from "./resource_health_state_type.js";
export { ResourceHealthState };
import { ResourceInfo } from "./resource_info_type.js";
export { ResourceInfo };
import { ResourcePlacementRecipeDesc } from "./resource_placement_recipe_desc_type.js";
export { ResourcePlacementRecipeDesc };
import { ResourceSpawnTimer } from "./resource_spawn_timer_type.js";
export { ResourceSpawnTimer };
import { ResourceState } from "./resource_state_type.js";
export { ResourceState };
import { ResourcesLog } from "./resources_log_type.js";
export { ResourcesLog };
import { ResourcesRegenLoopTimer } from "./resources_regen_loop_timer_type.js";
export { ResourcesRegenLoopTimer };
import { RespawnResourceInChunkTimer } from "./respawn_resource_in_chunk_timer_type.js";
export { RespawnResourceInChunkTimer };
import { RezSickLongTermState } from "./rez_sick_long_term_state_type.js";
export { RezSickLongTermState };
import { Role } from "./role_type.js";
export { Role };
import { RuinsEntityValuePair } from "./ruins_entity_value_pair_type.js";
export { RuinsEntityValuePair };
import { SatiationState } from "./satiation_state_type.js";
export { SatiationState };
import { SecondaryKnowledgeDesc } from "./secondary_knowledge_desc_type.js";
export { SecondaryKnowledgeDesc };
import { ServerIdentity } from "./server_identity_type.js";
export { ServerIdentity };
import { ServerTeleportReason } from "./server_teleport_reason_type.js";
export { ServerTeleportReason };
import { SignPlayerOutMsg } from "./sign_player_out_msg_type.js";
export { SignPlayerOutMsg };
import { SignedInPlayerState } from "./signed_in_player_state_type.js";
export { SignedInPlayerState };
import { SingleResourceClumpInfo } from "./single_resource_clump_info_type.js";
export { SingleResourceClumpInfo };
import { SingleResourceToClumpDesc } from "./single_resource_to_clump_desc_type.js";
export { SingleResourceToClumpDesc };
import { SkillCategory } from "./skill_category_type.js";
export { SkillCategory };
import { SkillDesc } from "./skill_desc_type.js";
export { SkillDesc };
import { SkillType } from "./skill_type_type.js";
export { SkillType };
import { SmallHexTileMessage } from "./small_hex_tile_message_type.js";
export { SmallHexTileMessage };
import { SpawnInfo } from "./spawn_info_type.js";
export { SpawnInfo };
import { StagedStaticData } from "./staged_static_data_type.js";
export { StagedStaticData };
import { StaminaState } from "./stamina_state_type.js";
export { StaminaState };
import { StarvingLoopTimer } from "./starving_loop_timer_type.js";
export { StarvingLoopTimer };
import { StarvingPlayerState } from "./starving_player_state_type.js";
export { StarvingPlayerState };
import { StaticDataUpload } from "./static_data_upload_type.js";
export { StaticDataUpload };
import { SurfaceType } from "./surface_type_type.js";
export { SurfaceType };
import { TargetState } from "./target_state_type.js";
export { TargetState };
import { TargetUpdateRequest } from "./target_update_request_type.js";
export { TargetUpdateRequest };
import { TargetableState } from "./targetable_state_type.js";
export { TargetableState };
import { TargetingMatrixDesc } from "./targeting_matrix_desc_type.js";
export { TargetingMatrixDesc };
import { TeleportItemDesc } from "./teleport_item_desc_type.js";
export { TeleportItemDesc };
import { TeleportLocation } from "./teleport_location_type.js";
export { TeleportLocation };
import { TeleportLocationType } from "./teleport_location_type_type.js";
export { TeleportLocationType };
import { TeleportPlayerTimer } from "./teleport_player_timer_type.js";
export { TeleportPlayerTimer };
import { TeleportationEnergyRegenLoopTimer } from "./teleportation_energy_regen_loop_timer_type.js";
export { TeleportationEnergyRegenLoopTimer };
import { TeleportationEnergyState } from "./teleportation_energy_state_type.js";
export { TeleportationEnergyState };
import { TerraformProgressState } from "./terraform_progress_state_type.js";
export { TerraformProgressState };
import { TerraformRecipeDesc } from "./terraform_recipe_desc_type.js";
export { TerraformRecipeDesc };
import { TerrainCell } from "./terrain_cell_type.js";
export { TerrainCell };
import { TerrainChunkState } from "./terrain_chunk_state_type.js";
export { TerrainChunkState };
import { TheGreatPlaceHolderTable } from "./the_great_place_holder_table_type.js";
export { TheGreatPlaceHolderTable };
import { ThreatState } from "./threat_state_type.js";
export { ThreatState };
import { ToolDesc } from "./tool_desc_type.js";
export { ToolDesc };
import { ToolRequirement } from "./tool_requirement_type.js";
export { ToolRequirement };
import { ToolTypeDesc } from "./tool_type_desc_type.js";
export { ToolTypeDesc };
import { ToolbarState } from "./toolbar_state_type.js";
export { ToolbarState };
import { TradeOrderState } from "./trade_order_state_type.js";
export { TradeOrderState };
import { TradePocket } from "./trade_pocket_type.js";
export { TradePocket };
import { TradeSessionLoopTimer } from "./trade_session_loop_timer_type.js";
export { TradeSessionLoopTimer };
import { TradeSessionState } from "./trade_session_state_type.js";
export { TradeSessionState };
import { TradeSessionStatus } from "./trade_session_status_type.js";
export { TradeSessionStatus };
import { TransferPlayerHousingMsg } from "./transfer_player_housing_msg_type.js";
export { TransferPlayerHousingMsg };
import { TransferPlayerMsg } from "./transfer_player_msg_type.js";
export { TransferPlayerMsg };
import { TransferPlayerTimer } from "./transfer_player_timer_type.js";
export { TransferPlayerTimer };
import { TravelerTaskDesc } from "./traveler_task_desc_type.js";
export { TravelerTaskDesc };
import { TravelerTaskLoopTimer } from "./traveler_task_loop_timer_type.js";
export { TravelerTaskLoopTimer };
import { TravelerTaskState } from "./traveler_task_state_type.js";
export { TravelerTaskState };
import { TravelerTradeOrderDesc } from "./traveler_trade_order_desc_type.js";
export { TravelerTradeOrderDesc };
import { TraversalSettings } from "./traversal_settings_type.js";
export { TraversalSettings };
import { UnclaimedCollectiblesState } from "./unclaimed_collectibles_state_type.js";
export { UnclaimedCollectiblesState };
import { UnclaimedShardsState } from "./unclaimed_shards_state_type.js";
export { UnclaimedShardsState };
import { UserAuthenticationState } from "./user_authentication_state_type.js";
export { UserAuthenticationState };
import { UserAuthenticationStateOp } from "./user_authentication_state_op_type.js";
export { UserAuthenticationStateOp };
import { UserModerationPolicy } from "./user_moderation_policy_type.js";
export { UserModerationPolicy };
import { UserModerationState } from "./user_moderation_state_type.js";
export { UserModerationState };
import { UserModerationStateOp } from "./user_moderation_state_op_type.js";
export { UserModerationStateOp };
import { UserPreviousRegionState } from "./user_previous_region_state_type.js";
export { UserPreviousRegionState };
import { UserState } from "./user_state_type.js";
export { UserState };
import { UserStateOp } from "./user_state_op_type.js";
export { UserStateOp };
import { UserUpdateRegionMsg } from "./user_update_region_msg_type.js";
export { UserUpdateRegionMsg };
import { VaultCollectible } from "./vault_collectible_type.js";
export { VaultCollectible };
import { VaultState } from "./vault_state_type.js";
export { VaultState };
import { VfxAttachmentPoint } from "./vfx_attachment_point_type.js";
export { VfxAttachmentPoint };
import { WallDesc } from "./wall_desc_type.js";
export { WallDesc };
import { WeaponDesc } from "./weapon_desc_type.js";
export { WeaponDesc };
import { WeaponTypeDesc } from "./weapon_type_desc_type.js";
export { WeaponTypeDesc };
import { WorldGenAnimationCurve } from "./world_gen_animation_curve_type.js";
export { WorldGenAnimationCurve };
import { WorldGenAnimationCurveKeyframe } from "./world_gen_animation_curve_keyframe_type.js";
export { WorldGenAnimationCurveKeyframe };
import { WorldGenBiomeDefinition } from "./world_gen_biome_definition_type.js";
export { WorldGenBiomeDefinition };
import { WorldGenBiomesMapDefinition } from "./world_gen_biomes_map_definition_type.js";
export { WorldGenBiomesMapDefinition };
import { WorldGenBuildingDetails } from "./world_gen_building_details_type.js";
export { WorldGenBuildingDetails };
import { WorldGenBuildingsMapDefinition } from "./world_gen_buildings_map_definition_type.js";
export { WorldGenBuildingsMapDefinition };
import { WorldGenGeneratedBuilding } from "./world_gen_generated_building_type.js";
export { WorldGenGeneratedBuilding };
import { WorldGenGeneratedResourceDeposit } from "./world_gen_generated_resource_deposit_type.js";
export { WorldGenGeneratedResourceDeposit };
import { WorldGenLandShapeDefinition } from "./world_gen_land_shape_definition_type.js";
export { WorldGenLandShapeDefinition };
import { WorldGenMountain } from "./world_gen_mountain_type.js";
export { WorldGenMountain };
import { WorldGenMountainsMapDefinition } from "./world_gen_mountains_map_definition_type.js";
export { WorldGenMountainsMapDefinition };
import { WorldGenNoiseBasedElevationLayer } from "./world_gen_noise_based_elevation_layer_type.js";
export { WorldGenNoiseBasedElevationLayer };
import { WorldGenNoiseBasedElevationLayerBlendingMode } from "./world_gen_noise_based_elevation_layer_blending_mode_type.js";
export { WorldGenNoiseBasedElevationLayerBlendingMode };
import { WorldGenNoiseSpecs } from "./world_gen_noise_specs_type.js";
export { WorldGenNoiseSpecs };
import { WorldGenRectInt } from "./world_gen_rect_int_type.js";
export { WorldGenRectInt };
import { WorldGenResourceBiome } from "./world_gen_resource_biome_type.js";
export { WorldGenResourceBiome };
import { WorldGenResourceDefinition } from "./world_gen_resource_definition_type.js";
export { WorldGenResourceDefinition };
import { WorldGenResourceDetails } from "./world_gen_resource_details_type.js";
export { WorldGenResourceDetails };
import { WorldGenResourcesMapDefinition } from "./world_gen_resources_map_definition_type.js";
export { WorldGenResourcesMapDefinition };
import { WorldGenRiverGenerationSettings } from "./world_gen_river_generation_settings_type.js";
export { WorldGenRiverGenerationSettings };
import { WorldGenRiverPathfindingCosts } from "./world_gen_river_pathfinding_costs_type.js";
export { WorldGenRiverPathfindingCosts };
import { WorldGenVector2 } from "./world_gen_vector_2_type.js";
export { WorldGenVector2 };
import { WorldGenVector2Int } from "./world_gen_vector_2_int_type.js";
export { WorldGenVector2Int };
import { WorldGenWorldDefinition } from "./world_gen_world_definition_type.js";
export { WorldGenWorldDefinition };
import { WorldGenWorldMapDefinition } from "./world_gen_world_map_definition_type.js";
export { WorldGenWorldMapDefinition };
import { WorldRegionNameState } from "./world_region_name_state_type.js";
export { WorldRegionNameState };
import { WorldRegionState } from "./world_region_state_type.js";
export { WorldRegionState };

const REMOTE_MODULE = {
  tables: {
    a_i_debug_state: {
      tableName: "a_i_debug_state",
      rowType: AiDebugState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: AiDebugState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    achievement_desc: {
      tableName: "achievement_desc",
      rowType: AchievementDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: AchievementDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    action_state: {
      tableName: "action_state",
      rowType: ActionState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ActionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    active_buff_state: {
      tableName: "active_buff_state",
      rowType: ActiveBuffState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ActiveBuffState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    admin_broadcast: {
      tableName: "admin_broadcast",
      rowType: AdminBroadcast.getTypeScriptAlgebraicType(),
      primaryKey: "version",
      primaryKeyInfo: {
        colName: "version",
        colType: AdminBroadcast.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    admin_clear_resource_timer: {
      tableName: "admin_clear_resource_timer",
      rowType: AdminClearResourceTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AdminClearResourceTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    admin_restore_player_state_timer: {
      tableName: "admin_restore_player_state_timer",
      rowType: AdminRestorePlayerStateTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AdminRestorePlayerStateTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    alert_desc: {
      tableName: "alert_desc",
      rowType: AlertDesc.getTypeScriptAlgebraicType(),
      primaryKey: "alertType",
      primaryKeyInfo: {
        colName: "alertType",
        colType: AlertDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    alert_state: {
      tableName: "alert_state",
      rowType: AlertState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: AlertState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    attached_herds_state: {
      tableName: "attached_herds_state",
      rowType: AttachedHerdsState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: AttachedHerdsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    attack_impact_timer: {
      tableName: "attack_impact_timer",
      rowType: AttackImpactTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AttackImpactTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    attack_outcome_state: {
      tableName: "attack_outcome_state",
      rowType: AttackOutcomeState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: AttackOutcomeState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    attack_timer: {
      tableName: "attack_timer",
      rowType: AttackTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AttackTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    auto_claim_state: {
      tableName: "auto_claim_state",
      rowType: AutoClaimState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: AutoClaimState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    auto_logout_loop_timer: {
      tableName: "auto_logout_loop_timer",
      rowType: AutoLogoutLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AutoLogoutLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    barter_stall_state: {
      tableName: "barter_stall_state",
      rowType: BarterStallState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: BarterStallState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    biome_desc: {
      tableName: "biome_desc",
      rowType: BiomeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "biomeType",
      primaryKeyInfo: {
        colName: "biomeType",
        colType: BiomeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    blocked_identity: {
      tableName: "blocked_identity",
      rowType: BlockedIdentity.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: BlockedIdentity.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    buff_desc: {
      tableName: "buff_desc",
      rowType: BuffDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: BuffDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    buff_type_desc: {
      tableName: "buff_type_desc",
      rowType: BuffTypeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: BuffTypeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    building_claim_desc: {
      tableName: "building_claim_desc",
      rowType: BuildingClaimDesc.getTypeScriptAlgebraicType(),
      primaryKey: "buildingId",
      primaryKeyInfo: {
        colName: "buildingId",
        colType: BuildingClaimDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    building_decay_loop_timer: {
      tableName: "building_decay_loop_timer",
      rowType: BuildingDecayLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: BuildingDecayLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    building_desc: {
      tableName: "building_desc",
      rowType: BuildingDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: BuildingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    building_despawn_timer: {
      tableName: "building_despawn_timer",
      rowType: BuildingDespawnTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: BuildingDespawnTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    building_function_type_mapping_desc: {
      tableName: "building_function_type_mapping_desc",
      rowType: BuildingFunctionTypeMappingDesc.getTypeScriptAlgebraicType(),
      primaryKey: "typeId",
      primaryKeyInfo: {
        colName: "typeId",
        colType: BuildingFunctionTypeMappingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    building_nickname_state: {
      tableName: "building_nickname_state",
      rowType: BuildingNicknameState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: BuildingNicknameState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    building_portal_desc: {
      tableName: "building_portal_desc",
      rowType: BuildingPortalDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: BuildingPortalDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    building_repairs_desc: {
      tableName: "building_repairs_desc",
      rowType: BuildingRepairsDesc.getTypeScriptAlgebraicType(),
      primaryKey: "cargoId",
      primaryKeyInfo: {
        colName: "cargoId",
        colType: BuildingRepairsDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    building_spawn_desc: {
      tableName: "building_spawn_desc",
      rowType: BuildingSpawnDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: BuildingSpawnDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    building_state: {
      tableName: "building_state",
      rowType: BuildingState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: BuildingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    building_type_desc: {
      tableName: "building_type_desc",
      rowType: BuildingTypeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: BuildingTypeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    buy_order_state: {
      tableName: "buy_order_state",
      rowType: AuctionListingState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: AuctionListingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    cargo_desc: {
      tableName: "cargo_desc",
      rowType: CargoDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: CargoDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    character_stat_desc: {
      tableName: "character_stat_desc",
      rowType: CharacterStatDesc.getTypeScriptAlgebraicType(),
      primaryKey: "statType",
      primaryKeyInfo: {
        colName: "statType",
        colType: CharacterStatDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    character_stats_state: {
      tableName: "character_stats_state",
      rowType: CharacterStatsState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: CharacterStatsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    chat_cleanup_timer: {
      tableName: "chat_cleanup_timer",
      rowType: ChatCleanupTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: ChatCleanupTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    chat_message_state: {
      tableName: "chat_message_state",
      rowType: ChatMessageState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ChatMessageState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    chest_rarity_desc: {
      tableName: "chest_rarity_desc",
      rowType: ChestRarityDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ChestRarityDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    claim_local_state: {
      tableName: "claim_local_state",
      rowType: ClaimLocalState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ClaimLocalState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    claim_member_state: {
      tableName: "claim_member_state",
      rowType: ClaimMemberState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ClaimMemberState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    claim_recruitment_state: {
      tableName: "claim_recruitment_state",
      rowType: ClaimRecruitmentState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ClaimRecruitmentState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    claim_state: {
      tableName: "claim_state",
      rowType: ClaimState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ClaimState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    claim_tech_desc: {
      tableName: "claim_tech_desc",
      rowType: ClaimTechDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ClaimTechDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    claim_tech_state: {
      tableName: "claim_tech_state",
      rowType: ClaimTechState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ClaimTechState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    claim_tech_unlock_timer: {
      tableName: "claim_tech_unlock_timer",
      rowType: ClaimTechUnlockTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: ClaimTechUnlockTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    claim_tile_cost: {
      tableName: "claim_tile_cost",
      rowType: ClaimTileCost.getTypeScriptAlgebraicType(),
      primaryKey: "tileCount",
      primaryKeyInfo: {
        colName: "tileCount",
        colType: ClaimTileCost.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    claim_tile_state: {
      tableName: "claim_tile_state",
      rowType: ClaimTileState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ClaimTileState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    climb_requirement_desc: {
      tableName: "climb_requirement_desc",
      rowType: ClimbRequirementDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ClimbRequirementDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    closed_listing_state: {
      tableName: "closed_listing_state",
      rowType: ClosedListingState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ClosedListingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    clothing_desc: {
      tableName: "clothing_desc",
      rowType: ClothingDesc.getTypeScriptAlgebraicType(),
      primaryKey: "itemId",
      primaryKeyInfo: {
        colName: "itemId",
        colType: ClothingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    collect_stats_timer: {
      tableName: "collect_stats_timer",
      rowType: CollectStatsTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: CollectStatsTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    collectible_desc: {
      tableName: "collectible_desc",
      rowType: CollectibleDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: CollectibleDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    combat_action_desc: {
      tableName: "combat_action_desc",
      rowType: CombatActionDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: CombatActionDesc.getTypeScriptAlgebraicType().product.elements[1].algebraicType,
      },
    },
    combat_state: {
      tableName: "combat_state",
      rowType: CombatState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: CombatState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    config: {
      tableName: "config",
      rowType: Config.getTypeScriptAlgebraicType(),
      primaryKey: "version",
      primaryKeyInfo: {
        colName: "version",
        colType: Config.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    construction_recipe_desc: {
      tableName: "construction_recipe_desc",
      rowType: ConstructionRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ConstructionRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    crafting_recipe_desc: {
      tableName: "crafting_recipe_desc",
      rowType: CraftingRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: CraftingRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    day_night_loop_timer: {
      tableName: "day_night_loop_timer",
      rowType: DayNightLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: DayNightLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    deconstruction_recipe_desc: {
      tableName: "deconstruction_recipe_desc",
      rowType: DeconstructionRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: DeconstructionRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    deployable_collectible_state: {
      tableName: "deployable_collectible_state",
      rowType: DeployableCollectibleState.getTypeScriptAlgebraicType(),
      primaryKey: "deployableEntityId",
      primaryKeyInfo: {
        colName: "deployableEntityId",
        colType: DeployableCollectibleState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    deployable_desc: {
      tableName: "deployable_desc",
      rowType: DeployableDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: DeployableDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    deployable_dismount_timer: {
      tableName: "deployable_dismount_timer",
      rowType: DeployableDismountTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: DeployableDismountTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    deployable_state: {
      tableName: "deployable_state",
      rowType: DeployableState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: DeployableState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    destroy_dimension_network_timer: {
      tableName: "destroy_dimension_network_timer",
      rowType: DestroyDimensionNetworkTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: DestroyDimensionNetworkTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    developer: {
      tableName: "developer",
      rowType: Developer.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: Developer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    dimension_description_state: {
      tableName: "dimension_description_state",
      rowType: DimensionDescriptionState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: DimensionDescriptionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    dimension_network_state: {
      tableName: "dimension_network_state",
      rowType: DimensionNetworkState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: DimensionNetworkState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    distant_visible_entity: {
      tableName: "distant_visible_entity",
      rowType: DistantVisibleEntity.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: DistantVisibleEntity.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    distant_visible_entity_desc: {
      tableName: "distant_visible_entity_desc",
      rowType: DistantVisibleEntityDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: DistantVisibleEntityDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    dropped_inventory_despawn_timer: {
      tableName: "dropped_inventory_despawn_timer",
      rowType: DroppedInventoryDespawnTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: DroppedInventoryDespawnTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    dropped_inventory_ownership_timer: {
      tableName: "dropped_inventory_ownership_timer",
      rowType: DroppedInventoryOwnershipTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: DroppedInventoryOwnershipTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    dropped_inventory_state: {
      tableName: "dropped_inventory_state",
      rowType: DroppedInventoryState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: DroppedInventoryState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    duel_agent_timer: {
      tableName: "duel_agent_timer",
      rowType: DuelAgentTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: DuelAgentTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    duel_despawn_timer: {
      tableName: "duel_despawn_timer",
      rowType: DuelDespawnTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: DuelDespawnTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    duel_state: {
      tableName: "duel_state",
      rowType: DuelState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: DuelState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    elevator_desc: {
      tableName: "elevator_desc",
      rowType: ElevatorDesc.getTypeScriptAlgebraicType(),
      primaryKey: "buildingId",
      primaryKeyInfo: {
        colName: "buildingId",
        colType: ElevatorDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    emote_desc: {
      tableName: "emote_desc",
      rowType: EmoteDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: EmoteDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_chunk_state: {
      tableName: "empire_chunk_state",
      rowType: EmpireChunkState.getTypeScriptAlgebraicType(),
      primaryKey: "chunkIndex",
      primaryKeyInfo: {
        colName: "chunkIndex",
        colType: EmpireChunkState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_color_desc: {
      tableName: "empire_color_desc",
      rowType: EmpireColorDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: EmpireColorDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_expansion_state: {
      tableName: "empire_expansion_state",
      rowType: EmpireExpansionState.getTypeScriptAlgebraicType(),
      primaryKey: "chunkIndex",
      primaryKeyInfo: {
        colName: "chunkIndex",
        colType: EmpireExpansionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_icon_desc: {
      tableName: "empire_icon_desc",
      rowType: EmpireIconDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: EmpireIconDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_node_siege_state: {
      tableName: "empire_node_siege_state",
      rowType: EmpireNodeSiegeState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: EmpireNodeSiegeState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_node_state: {
      tableName: "empire_node_state",
      rowType: EmpireNodeState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: EmpireNodeState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_notification_desc: {
      tableName: "empire_notification_desc",
      rowType: EmpireNotificationDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: EmpireNotificationDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_player_data_state: {
      tableName: "empire_player_data_state",
      rowType: EmpirePlayerDataState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: EmpirePlayerDataState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_rank_desc: {
      tableName: "empire_rank_desc",
      rowType: EmpireRankDesc.getTypeScriptAlgebraicType(),
      primaryKey: "rank",
      primaryKeyInfo: {
        colName: "rank",
        colType: EmpireRankDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_rank_state: {
      tableName: "empire_rank_state",
      rowType: EmpireRankState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: EmpireRankState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_settlement_state: {
      tableName: "empire_settlement_state",
      rowType: EmpireSettlementState.getTypeScriptAlgebraicType(),
      primaryKey: "buildingEntityId",
      primaryKeyInfo: {
        colName: "buildingEntityId",
        colType: EmpireSettlementState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_state: {
      tableName: "empire_state",
      rowType: EmpireState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: EmpireState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_supplies_desc: {
      tableName: "empire_supplies_desc",
      rowType: EmpireSuppliesDesc.getTypeScriptAlgebraicType(),
      primaryKey: "cargoId",
      primaryKeyInfo: {
        colName: "cargoId",
        colType: EmpireSuppliesDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    empire_territory_desc: {
      tableName: "empire_territory_desc",
      rowType: EmpireTerritoryDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: EmpireTerritoryDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    end_grace_period_timer: {
      tableName: "end_grace_period_timer",
      rowType: EndGracePeriodTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: EndGracePeriodTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    enemy_ai_params_desc: {
      tableName: "enemy_ai_params_desc",
      rowType: EnemyAiParamsDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: EnemyAiParamsDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    enemy_desc: {
      tableName: "enemy_desc",
      rowType: EnemyDesc.getTypeScriptAlgebraicType(),
      primaryKey: "enemyType",
      primaryKeyInfo: {
        colName: "enemyType",
        colType: EnemyDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    enemy_despawn_timer: {
      tableName: "enemy_despawn_timer",
      rowType: EnemyDespawnTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: EnemyDespawnTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    enemy_mob_monitor_state: {
      tableName: "enemy_mob_monitor_state",
      rowType: EnemyMobMonitorState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: EnemyMobMonitorState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    enemy_regen_loop_timer: {
      tableName: "enemy_regen_loop_timer",
      rowType: EnemyRegenLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: EnemyRegenLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    enemy_state: {
      tableName: "enemy_state",
      rowType: EnemyState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: EnemyState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    environment_debuff_desc: {
      tableName: "environment_debuff_desc",
      rowType: EnvironmentDebuffDesc.getTypeScriptAlgebraicType(),
      primaryKey: "buffId",
      primaryKeyInfo: {
        colName: "buffId",
        colType: EnvironmentDebuffDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    environment_debuff_loop_timer: {
      tableName: "environment_debuff_loop_timer",
      rowType: EnvironmentDebuffLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: EnvironmentDebuffLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    equipment_desc: {
      tableName: "equipment_desc",
      rowType: EquipmentDesc.getTypeScriptAlgebraicType(),
      primaryKey: "itemId",
      primaryKeyInfo: {
        colName: "itemId",
        colType: EquipmentDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    equipment_state: {
      tableName: "equipment_state",
      rowType: EquipmentState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: EquipmentState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    experience_state: {
      tableName: "experience_state",
      rowType: ExperienceState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ExperienceState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    exploration_chunks_state: {
      tableName: "exploration_chunks_state",
      rowType: ExplorationChunksState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ExplorationChunksState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    extract_outcome_state: {
      tableName: "extract_outcome_state",
      rowType: ExtractOutcomeState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ExtractOutcomeState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    extraction_recipe_desc: {
      tableName: "extraction_recipe_desc",
      rowType: ExtractionRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ExtractionRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    food_desc: {
      tableName: "food_desc",
      rowType: FoodDesc.getTypeScriptAlgebraicType(),
      primaryKey: "itemId",
      primaryKeyInfo: {
        colName: "itemId",
        colType: FoodDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    footprint_tile_state: {
      tableName: "footprint_tile_state",
      rowType: FootprintTileState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: FootprintTileState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    force_generate_types: {
      tableName: "force_generate_types",
      rowType: ForceGenerateTypes.getTypeScriptAlgebraicType(),
    },
    gate_desc: {
      tableName: "gate_desc",
      rowType: GateDesc.getTypeScriptAlgebraicType(),
      primaryKey: "buildingId",
      primaryKeyInfo: {
        colName: "buildingId",
        colType: GateDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    global_search_state: {
      tableName: "global_search_state",
      rowType: GlobalSearchState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: GlobalSearchState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    globals: {
      tableName: "globals",
      rowType: Globals.getTypeScriptAlgebraicType(),
      primaryKey: "version",
      primaryKeyInfo: {
        colName: "version",
        colType: Globals.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    growth_loop_timer: {
      tableName: "growth_loop_timer",
      rowType: GrowthLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: GrowthLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    growth_state: {
      tableName: "growth_state",
      rowType: GrowthState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: GrowthState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    health_state: {
      tableName: "health_state",
      rowType: HealthState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: HealthState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    herd_state: {
      tableName: "herd_state",
      rowType: HerdState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: HerdState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    hexite_exchange_entry_desc: {
      tableName: "hexite_exchange_entry_desc",
      rowType: HexiteExchangeEntryDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: HexiteExchangeEntryDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    hide_deployable_timer: {
      tableName: "hide_deployable_timer",
      rowType: HideDeployableTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: HideDeployableTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    identity_role: {
      tableName: "identity_role",
      rowType: IdentityRole.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: IdentityRole.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    inter_module_message: {
      tableName: "inter_module_message",
      rowType: InterModuleMessage.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: InterModuleMessage.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    inter_module_message_counter: {
      tableName: "inter_module_message_counter",
      rowType: InterModuleMessageCounter.getTypeScriptAlgebraicType(),
      primaryKey: "moduleId",
      primaryKeyInfo: {
        colName: "moduleId",
        colType: InterModuleMessageCounter.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    inter_module_response_message_counter: {
      tableName: "inter_module_response_message_counter",
      rowType: InterModuleResponseMessageCounter.getTypeScriptAlgebraicType(),
      primaryKey: "dstModuleId",
      primaryKeyInfo: {
        colName: "dstModuleId",
        colType: InterModuleResponseMessageCounter.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    interior_collapse_trigger_state: {
      tableName: "interior_collapse_trigger_state",
      rowType: InteriorCollapseTriggerState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: InteriorCollapseTriggerState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    interior_environment_desc: {
      tableName: "interior_environment_desc",
      rowType: InteriorEnvironmentDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: InteriorEnvironmentDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    interior_instance_desc: {
      tableName: "interior_instance_desc",
      rowType: InteriorInstanceDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: InteriorInstanceDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    interior_network_desc: {
      tableName: "interior_network_desc",
      rowType: InteriorNetworkDesc.getTypeScriptAlgebraicType(),
      primaryKey: "buildingId",
      primaryKeyInfo: {
        colName: "buildingId",
        colType: InteriorNetworkDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    interior_portal_connections_desc: {
      tableName: "interior_portal_connections_desc",
      rowType: InteriorPortalConnectionsDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: InteriorPortalConnectionsDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    interior_set_collapsed_timer: {
      tableName: "interior_set_collapsed_timer",
      rowType: InteriorSetCollapsedTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: InteriorSetCollapsedTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    interior_shape_desc: {
      tableName: "interior_shape_desc",
      rowType: InteriorShapeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: InteriorShapeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    interior_spawn_desc: {
      tableName: "interior_spawn_desc",
      rowType: InteriorSpawnDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: InteriorSpawnDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    inventory_state: {
      tableName: "inventory_state",
      rowType: InventoryState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: InventoryState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    item_conversion_recipe_desc: {
      tableName: "item_conversion_recipe_desc",
      rowType: ItemConversionRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ItemConversionRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    item_desc: {
      tableName: "item_desc",
      rowType: ItemDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ItemDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    item_list_desc: {
      tableName: "item_list_desc",
      rowType: ItemListDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ItemListDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_achievement_state: {
      tableName: "knowledge_achievement_state",
      rowType: KnowledgeAchievementState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeAchievementState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_battle_action_state: {
      tableName: "knowledge_battle_action_state",
      rowType: KnowledgeBattleActionState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeBattleActionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_building_state: {
      tableName: "knowledge_building_state",
      rowType: KnowledgeBuildingState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeBuildingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_cargo_state: {
      tableName: "knowledge_cargo_state",
      rowType: KnowledgeCargoState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeCargoState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_claim_state: {
      tableName: "knowledge_claim_state",
      rowType: KnowledgeClaimState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeClaimState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_construction_state: {
      tableName: "knowledge_construction_state",
      rowType: KnowledgeConstructionState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeConstructionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_craft_state: {
      tableName: "knowledge_craft_state",
      rowType: KnowledgeCraftState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeCraftState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_deployable_state: {
      tableName: "knowledge_deployable_state",
      rowType: KnowledgeDeployableState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeDeployableState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_enemy_state: {
      tableName: "knowledge_enemy_state",
      rowType: KnowledgeEnemyState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeEnemyState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_extract_state: {
      tableName: "knowledge_extract_state",
      rowType: KnowledgeExtractState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeExtractState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_item_state: {
      tableName: "knowledge_item_state",
      rowType: KnowledgeItemState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeItemState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_lore_state: {
      tableName: "knowledge_lore_state",
      rowType: KnowledgeLoreState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeLoreState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_npc_state: {
      tableName: "knowledge_npc_state",
      rowType: KnowledgeNpcState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeNpcState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_paving_state: {
      tableName: "knowledge_paving_state",
      rowType: KnowledgePavingState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgePavingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_pillar_shaping_state: {
      tableName: "knowledge_pillar_shaping_state",
      rowType: KnowledgePillarShapingState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgePillarShapingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_resource_placement_state: {
      tableName: "knowledge_resource_placement_state",
      rowType: KnowledgeResourcePlacementState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeResourcePlacementState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_resource_state: {
      tableName: "knowledge_resource_state",
      rowType: KnowledgeResourceState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeResourceState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_ruins_state: {
      tableName: "knowledge_ruins_state",
      rowType: KnowledgeRuinsState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeRuinsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_scroll_desc: {
      tableName: "knowledge_scroll_desc",
      rowType: KnowledgeScrollDesc.getTypeScriptAlgebraicType(),
      primaryKey: "itemId",
      primaryKeyInfo: {
        colName: "itemId",
        colType: KnowledgeScrollDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_scroll_type_desc: {
      tableName: "knowledge_scroll_type_desc",
      rowType: KnowledgeScrollTypeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: KnowledgeScrollTypeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_secondary_state: {
      tableName: "knowledge_secondary_state",
      rowType: KnowledgeSecondaryState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeSecondaryState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_stat_modifier_desc: {
      tableName: "knowledge_stat_modifier_desc",
      rowType: KnowledgeStatModifierDesc.getTypeScriptAlgebraicType(),
      primaryKey: "secondaryKnowledgeId",
      primaryKeyInfo: {
        colName: "secondaryKnowledgeId",
        colType: KnowledgeStatModifierDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    knowledge_vault_state: {
      tableName: "knowledge_vault_state",
      rowType: KnowledgeVaultState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: KnowledgeVaultState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    light_source_state: {
      tableName: "light_source_state",
      rowType: LightSourceState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: LightSourceState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    location_cache: {
      tableName: "location_cache",
      rowType: LocationCache.getTypeScriptAlgebraicType(),
      primaryKey: "version",
      primaryKeyInfo: {
        colName: "version",
        colType: LocationCache.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    location_state: {
      tableName: "location_state",
      rowType: LocationState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: LocationState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    loot_chest_desc: {
      tableName: "loot_chest_desc",
      rowType: LootChestDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: LootChestDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    loot_chest_despawn_timer: {
      tableName: "loot_chest_despawn_timer",
      rowType: LootChestDespawnTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: LootChestDespawnTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    loot_chest_spawn_timer: {
      tableName: "loot_chest_spawn_timer",
      rowType: LootChestSpawnTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: LootChestSpawnTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    loot_chest_state: {
      tableName: "loot_chest_state",
      rowType: LootChestState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: LootChestState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    loot_rarity_desc: {
      tableName: "loot_rarity_desc",
      rowType: LootRarityDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: LootRarityDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    loot_table_desc: {
      tableName: "loot_table_desc",
      rowType: LootTableDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: LootTableDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    lost_items_state: {
      tableName: "lost_items_state",
      rowType: LostItemsState.getTypeScriptAlgebraicType(),
      primaryKey: "inventoryEntityId",
      primaryKeyInfo: {
        colName: "inventoryEntityId",
        colType: LostItemsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    mobile_entity_state: {
      tableName: "mobile_entity_state",
      rowType: MobileEntityState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: MobileEntityState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    moderation_action_log_entry: {
      tableName: "moderation_action_log_entry",
      rowType: ModerationActionLogEntry.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ModerationActionLogEntry.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    mounting_state: {
      tableName: "mounting_state",
      rowType: MountingState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: MountingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    move_validation_strike_counter_state: {
      tableName: "move_validation_strike_counter_state",
      rowType: MoveValidationStrikeCounterState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: MoveValidationStrikeCounterState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    npc_ai_loop_timer: {
      tableName: "npc_ai_loop_timer",
      rowType: NpcAiLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: NpcAiLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    npc_desc: {
      tableName: "npc_desc",
      rowType: NpcDesc.getTypeScriptAlgebraicType(),
      primaryKey: "npcType",
      primaryKeyInfo: {
        colName: "npcType",
        colType: NpcDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    npc_state: {
      tableName: "npc_state",
      rowType: NpcState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: NpcState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    on_durability_zero_timer: {
      tableName: "on_durability_zero_timer",
      rowType: OnDurabilityZeroTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: OnDurabilityZeroTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    onboarding_reward_desc: {
      tableName: "onboarding_reward_desc",
      rowType: OnboardingRewardDesc.getTypeScriptAlgebraicType(),
      primaryKey: "stateId",
      primaryKeyInfo: {
        colName: "stateId",
        colType: OnboardingRewardDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    onboarding_state: {
      tableName: "onboarding_state",
      rowType: OnboardingState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: OnboardingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    parameters_desc: {
      tableName: "parameters_desc",
      rowType: ParametersDesc.getTypeScriptAlgebraicType(),
      primaryKey: "version",
      primaryKeyInfo: {
        colName: "version",
        colType: ParametersDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    parameters_player_move_desc: {
      tableName: "parameters_player_move_desc",
      rowType: ParametersPlayerMoveDesc.getTypeScriptAlgebraicType(),
      primaryKey: "version",
      primaryKeyInfo: {
        colName: "version",
        colType: ParametersPlayerMoveDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    partial_experience_state: {
      tableName: "partial_experience_state",
      rowType: PartialExperienceState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PartialExperienceState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    passive_craft_state: {
      tableName: "passive_craft_state",
      rowType: PassiveCraftState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PassiveCraftState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    passive_craft_timer: {
      tableName: "passive_craft_timer",
      rowType: PassiveCraftTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PassiveCraftTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    pathfinding_desc: {
      tableName: "pathfinding_desc",
      rowType: PathfindingDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: PathfindingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    paved_tile_state: {
      tableName: "paved_tile_state",
      rowType: PavedTileState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PavedTileState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    paving_tile_desc: {
      tableName: "paving_tile_desc",
      rowType: PavingTileDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: PavingTileDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    permission_state: {
      tableName: "permission_state",
      rowType: PermissionState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PermissionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    pillar_shaping_desc: {
      tableName: "pillar_shaping_desc",
      rowType: PillarShapingDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: PillarShapingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    pillar_shaping_state: {
      tableName: "pillar_shaping_state",
      rowType: PillarShapingState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PillarShapingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_action_desc: {
      tableName: "player_action_desc",
      rowType: PlayerActionDesc.getTypeScriptAlgebraicType(),
      primaryKey: "actionTypeId",
      primaryKeyInfo: {
        colName: "actionTypeId",
        colType: PlayerActionDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_action_state: {
      tableName: "player_action_state",
      rowType: PlayerActionState.getTypeScriptAlgebraicType(),
      primaryKey: "autoId",
      primaryKeyInfo: {
        colName: "autoId",
        colType: PlayerActionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_death_timer: {
      tableName: "player_death_timer",
      rowType: PlayerDeathTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PlayerDeathTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_housing_desc: {
      tableName: "player_housing_desc",
      rowType: PlayerHousingDesc.getTypeScriptAlgebraicType(),
      primaryKey: "secondaryKnowledgeId",
      primaryKeyInfo: {
        colName: "secondaryKnowledgeId",
        colType: PlayerHousingDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_housing_evict_player_timer: {
      tableName: "player_housing_evict_player_timer",
      rowType: PlayerHousingEvictPlayerTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PlayerHousingEvictPlayerTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_housing_income_loop_timer: {
      tableName: "player_housing_income_loop_timer",
      rowType: PlayerHousingIncomeLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PlayerHousingIncomeLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_housing_state: {
      tableName: "player_housing_state",
      rowType: PlayerHousingState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PlayerHousingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_lowercase_username_state: {
      tableName: "player_lowercase_username_state",
      rowType: PlayerLowercaseUsernameState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PlayerLowercaseUsernameState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_note_state: {
      tableName: "player_note_state",
      rowType: PlayerNoteState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PlayerNoteState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_notification_event: {
      tableName: "player_notification_event",
      rowType: PlayerNotificationEvent.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PlayerNotificationEvent.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_prefs_state: {
      tableName: "player_prefs_state",
      rowType: PlayerPrefsState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PlayerPrefsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_queue_state: {
      tableName: "player_queue_state",
      rowType: PlayerQueueState.getTypeScriptAlgebraicType(),
      primaryKey: "index",
      primaryKeyInfo: {
        colName: "index",
        colType: PlayerQueueState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_regen_loop_timer: {
      tableName: "player_regen_loop_timer",
      rowType: PlayerRegenLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PlayerRegenLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_region_transfer_event: {
      tableName: "player_region_transfer_event",
      rowType: PlayerRegionTransferEvent.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PlayerRegionTransferEvent.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_report_state: {
      tableName: "player_report_state",
      rowType: PlayerReportState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PlayerReportState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_report_state_timestamp: {
      tableName: "player_report_state_timestamp",
      rowType: PlayerReportStateTimestamp.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PlayerReportStateTimestamp.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_set_name_outcome_event: {
      tableName: "player_set_name_outcome_event",
      rowType: PlayerSetNameOutcomeEvent.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PlayerSetNameOutcomeEvent.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_state: {
      tableName: "player_state",
      rowType: PlayerState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PlayerState.getTypeScriptAlgebraicType().product.elements[1].algebraicType,
      },
    },
    player_timestamp_state: {
      tableName: "player_timestamp_state",
      rowType: PlayerTimestampState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PlayerTimestampState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_use_elevator_timer: {
      tableName: "player_use_elevator_timer",
      rowType: PlayerUseElevatorTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PlayerUseElevatorTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_username_state: {
      tableName: "player_username_state",
      rowType: PlayerUsernameState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PlayerUsernameState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_vote_conclude_timer: {
      tableName: "player_vote_conclude_timer",
      rowType: PlayerVoteConcludeTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PlayerVoteConcludeTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_vote_state: {
      tableName: "player_vote_state",
      rowType: PlayerVoteState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PlayerVoteState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    portal_state: {
      tableName: "portal_state",
      rowType: PortalState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PortalState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    private_parameters_desc: {
      tableName: "private_parameters_desc",
      rowType: PrivateParametersDesc.getTypeScriptAlgebraicType(),
      primaryKey: "version",
      primaryKeyInfo: {
        colName: "version",
        colType: PrivateParametersDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    progressive_action_state: {
      tableName: "progressive_action_state",
      rowType: ProgressiveActionState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ProgressiveActionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    project_site_state: {
      tableName: "project_site_state",
      rowType: ProjectSiteState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ProjectSiteState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    public_progressive_action_state: {
      tableName: "public_progressive_action_state",
      rowType: PublicProgressiveActionState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: PublicProgressiveActionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    region_connection_info: {
      tableName: "region_connection_info",
      rowType: RegionConnectionInfo.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: RegionConnectionInfo.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    region_population_info: {
      tableName: "region_population_info",
      rowType: RegionPopulationInfo.getTypeScriptAlgebraicType(),
      primaryKey: "regionId",
      primaryKeyInfo: {
        colName: "regionId",
        colType: RegionPopulationInfo.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    region_popuplation_loop_timer: {
      tableName: "region_popuplation_loop_timer",
      rowType: RegionPopulationLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: RegionPopulationLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    region_sign_in_parameters: {
      tableName: "region_sign_in_parameters",
      rowType: RegionSignInParameters.getTypeScriptAlgebraicType(),
      primaryKey: "regionId",
      primaryKeyInfo: {
        colName: "regionId",
        colType: RegionSignInParameters.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    rent_collector_loop_timer: {
      tableName: "rent_collector_loop_timer",
      rowType: RentCollectorLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: RentCollectorLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    rent_evict_timer: {
      tableName: "rent_evict_timer",
      rowType: RentEvictTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: RentEvictTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    rent_state: {
      tableName: "rent_state",
      rowType: RentState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: RentState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    reserved_name_desc: {
      tableName: "reserved_name_desc",
      rowType: ReservedNameDesc.getTypeScriptAlgebraicType(),
      primaryKey: "name",
      primaryKeyInfo: {
        colName: "name",
        colType: ReservedNameDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    reset_chunk_index_timer: {
      tableName: "reset_chunk_index_timer",
      rowType: ResetChunkIndexTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: ResetChunkIndexTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    reset_mobile_entity_timer: {
      tableName: "reset_mobile_entity_timer",
      rowType: ResetMobileEntityTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: ResetMobileEntityTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    resource_clump_desc: {
      tableName: "resource_clump_desc",
      rowType: ResourceClumpDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ResourceClumpDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    resource_count: {
      tableName: "resource_count",
      rowType: ResourceCount.getTypeScriptAlgebraicType(),
      primaryKey: "resourceId",
      primaryKeyInfo: {
        colName: "resourceId",
        colType: ResourceCount.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    resource_desc: {
      tableName: "resource_desc",
      rowType: ResourceDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ResourceDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    resource_growth_recipe_desc: {
      tableName: "resource_growth_recipe_desc",
      rowType: ResourceGrowthRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ResourceGrowthRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    resource_health_state: {
      tableName: "resource_health_state",
      rowType: ResourceHealthState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ResourceHealthState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    resource_placement_recipe_desc: {
      tableName: "resource_placement_recipe_desc",
      rowType: ResourcePlacementRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ResourcePlacementRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    resource_spawn_timer: {
      tableName: "resource_spawn_timer",
      rowType: ResourceSpawnTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: ResourceSpawnTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    resource_state: {
      tableName: "resource_state",
      rowType: ResourceState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ResourceState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    resources_log: {
      tableName: "resources_log",
      rowType: ResourcesLog.getTypeScriptAlgebraicType(),
      primaryKey: "version",
      primaryKeyInfo: {
        colName: "version",
        colType: ResourcesLog.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    resources_regen_loop_timer: {
      tableName: "resources_regen_loop_timer",
      rowType: ResourcesRegenLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: ResourcesRegenLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    respawn_resource_in_chunk_timer: {
      tableName: "respawn_resource_in_chunk_timer",
      rowType: RespawnResourceInChunkTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: RespawnResourceInChunkTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    rez_sick_long_term_state: {
      tableName: "rez_sick_long_term_state",
      rowType: RezSickLongTermState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: RezSickLongTermState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    satiation_state: {
      tableName: "satiation_state",
      rowType: SatiationState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: SatiationState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    secondary_knowledge_desc: {
      tableName: "secondary_knowledge_desc",
      rowType: SecondaryKnowledgeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: SecondaryKnowledgeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    sell_order_state: {
      tableName: "sell_order_state",
      rowType: AuctionListingState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: AuctionListingState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    server_identity: {
      tableName: "server_identity",
      rowType: ServerIdentity.getTypeScriptAlgebraicType(),
      primaryKey: "version",
      primaryKeyInfo: {
        colName: "version",
        colType: ServerIdentity.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    signed_in_player_state: {
      tableName: "signed_in_player_state",
      rowType: SignedInPlayerState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: SignedInPlayerState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    single_resource_clump_info: {
      tableName: "single_resource_clump_info",
      rowType: SingleResourceClumpInfo.getTypeScriptAlgebraicType(),
      primaryKey: "clumpId",
      primaryKeyInfo: {
        colName: "clumpId",
        colType: SingleResourceClumpInfo.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    single_resource_to_clump_desc: {
      tableName: "single_resource_to_clump_desc",
      rowType: SingleResourceToClumpDesc.getTypeScriptAlgebraicType(),
      primaryKey: "resourceId",
      primaryKeyInfo: {
        colName: "resourceId",
        colType: SingleResourceToClumpDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    skill_desc: {
      tableName: "skill_desc",
      rowType: SkillDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: SkillDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    staged_static_data: {
      tableName: "staged_static_data",
      rowType: StagedStaticData.getTypeScriptAlgebraicType(),
      primaryKey: "version",
      primaryKeyInfo: {
        colName: "version",
        colType: StagedStaticData.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    stamina_state: {
      tableName: "stamina_state",
      rowType: StaminaState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: StaminaState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    starving_loop_timer: {
      tableName: "starving_loop_timer",
      rowType: StarvingLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: StarvingLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    starving_player_state: {
      tableName: "starving_player_state",
      rowType: StarvingPlayerState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: StarvingPlayerState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    target_state: {
      tableName: "target_state",
      rowType: TargetState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: TargetState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    targetable_state: {
      tableName: "targetable_state",
      rowType: TargetableState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: TargetableState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    targeting_matrix_desc: {
      tableName: "targeting_matrix_desc",
      rowType: TargetingMatrixDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: TargetingMatrixDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    teleport_item_desc: {
      tableName: "teleport_item_desc",
      rowType: TeleportItemDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: TeleportItemDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    teleport_player_timer: {
      tableName: "teleport_player_timer",
      rowType: TeleportPlayerTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: TeleportPlayerTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    teleportation_energy_regen_loop_timer: {
      tableName: "teleportation_energy_regen_loop_timer",
      rowType: TeleportationEnergyRegenLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: TeleportationEnergyRegenLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    teleportation_energy_state: {
      tableName: "teleportation_energy_state",
      rowType: TeleportationEnergyState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: TeleportationEnergyState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    terraform_progress_state: {
      tableName: "terraform_progress_state",
      rowType: TerraformProgressState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: TerraformProgressState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    terraform_recipe_desc: {
      tableName: "terraform_recipe_desc",
      rowType: TerraformRecipeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "difference",
      primaryKeyInfo: {
        colName: "difference",
        colType: TerraformRecipeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    terrain_chunk_state: {
      tableName: "terrain_chunk_state",
      rowType: TerrainChunkState.getTypeScriptAlgebraicType(),
      primaryKey: "chunkIndex",
      primaryKeyInfo: {
        colName: "chunkIndex",
        colType: TerrainChunkState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    the_great_placeholder_table: {
      tableName: "the_great_placeholder_table",
      rowType: TheGreatPlaceHolderTable.getTypeScriptAlgebraicType(),
      primaryKey: "placeholderId",
      primaryKeyInfo: {
        colName: "placeholderId",
        colType: TheGreatPlaceHolderTable.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    threat_state: {
      tableName: "threat_state",
      rowType: ThreatState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ThreatState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    tool_desc: {
      tableName: "tool_desc",
      rowType: ToolDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ToolDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    tool_type_desc: {
      tableName: "tool_type_desc",
      rowType: ToolTypeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: ToolTypeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    toolbar_state: {
      tableName: "toolbar_state",
      rowType: ToolbarState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: ToolbarState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    trade_order_state: {
      tableName: "trade_order_state",
      rowType: TradeOrderState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: TradeOrderState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    trade_session_loop_timer: {
      tableName: "trade_session_loop_timer",
      rowType: TradeSessionLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: TradeSessionLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    trade_session_state: {
      tableName: "trade_session_state",
      rowType: TradeSessionState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: TradeSessionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    transfer_player_timer: {
      tableName: "transfer_player_timer",
      rowType: TransferPlayerTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: TransferPlayerTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    traveler_task_desc: {
      tableName: "traveler_task_desc",
      rowType: TravelerTaskDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: TravelerTaskDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    traveler_task_loop_timer: {
      tableName: "traveler_task_loop_timer",
      rowType: TravelerTaskLoopTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: TravelerTaskLoopTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    traveler_task_state: {
      tableName: "traveler_task_state",
      rowType: TravelerTaskState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: TravelerTaskState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    traveler_trade_order_desc: {
      tableName: "traveler_trade_order_desc",
      rowType: TravelerTradeOrderDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: TravelerTradeOrderDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    unclaimed_collectibles_state: {
      tableName: "unclaimed_collectibles_state",
      rowType: UnclaimedCollectiblesState.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: UnclaimedCollectiblesState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    unclaimed_shards_state: {
      tableName: "unclaimed_shards_state",
      rowType: UnclaimedShardsState.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: UnclaimedShardsState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    user_authentication_state: {
      tableName: "user_authentication_state",
      rowType: UserAuthenticationState.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: UserAuthenticationState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    user_moderation_state: {
      tableName: "user_moderation_state",
      rowType: UserModerationState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: UserModerationState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    user_previous_region_state: {
      tableName: "user_previous_region_state",
      rowType: UserPreviousRegionState.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: UserPreviousRegionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    user_state: {
      tableName: "user_state",
      rowType: UserState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: UserState.getTypeScriptAlgebraicType().product.elements[1].algebraicType,
      },
    },
    vault_state: {
      tableName: "vault_state",
      rowType: VaultState.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: VaultState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    wall_desc: {
      tableName: "wall_desc",
      rowType: WallDesc.getTypeScriptAlgebraicType(),
      primaryKey: "buildingId",
      primaryKeyInfo: {
        colName: "buildingId",
        colType: WallDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    weapon_desc: {
      tableName: "weapon_desc",
      rowType: WeaponDesc.getTypeScriptAlgebraicType(),
      primaryKey: "itemId",
      primaryKeyInfo: {
        colName: "itemId",
        colType: WeaponDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    weapon_type_desc: {
      tableName: "weapon_type_desc",
      rowType: WeaponTypeDesc.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: WeaponTypeDesc.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    world_region_name_state: {
      tableName: "world_region_name_state",
      rowType: WorldRegionNameState.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: WorldRegionNameState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    world_region_state: {
      tableName: "world_region_state",
      rowType: WorldRegionState.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: WorldRegionState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    achievement_claim: {
      reducerName: "achievement_claim",
      argsType: AchievementClaim.getTypeScriptAlgebraicType(),
    },
    acquire_knowledge_from_entities: {
      reducerName: "acquire_knowledge_from_entities",
      argsType: AcquireKnowledgeFromEntities.getTypeScriptAlgebraicType(),
    },
    admin_alpha3_complete_onboarding: {
      reducerName: "admin_alpha3_complete_onboarding",
      argsType: AdminAlpha3CompleteOnboarding.getTypeScriptAlgebraicType(),
    },
    admin_alpha3_reset_onboarding_to_fifth_temple_quest: {
      reducerName: "admin_alpha3_reset_onboarding_to_fifth_temple_quest",
      argsType: AdminAlpha3ResetOnboardingToFifthTempleQuest.getTypeScriptAlgebraicType(),
    },
    admin_alpha3_reset_onboarding_to_first_expand_quest: {
      reducerName: "admin_alpha3_reset_onboarding_to_first_expand_quest",
      argsType: AdminAlpha3ResetOnboardingToFirstExpandQuest.getTypeScriptAlgebraicType(),
    },
    admin_alpha3_reset_onboarding_to_first_temple_quest: {
      reducerName: "admin_alpha3_reset_onboarding_to_first_temple_quest",
      argsType: AdminAlpha3ResetOnboardingToFirstTempleQuest.getTypeScriptAlgebraicType(),
    },
    admin_alpha3_reset_onboarding_to_fourth_expand_quest: {
      reducerName: "admin_alpha3_reset_onboarding_to_fourth_expand_quest",
      argsType: AdminAlpha3ResetOnboardingToFourthExpandQuest.getTypeScriptAlgebraicType(),
    },
    admin_alpha3_reset_onboarding_to_fourth_temple_quest: {
      reducerName: "admin_alpha3_reset_onboarding_to_fourth_temple_quest",
      argsType: AdminAlpha3ResetOnboardingToFourthTempleQuest.getTypeScriptAlgebraicType(),
    },
    admin_alpha3_reset_onboarding_to_second_expand_quest: {
      reducerName: "admin_alpha3_reset_onboarding_to_second_expand_quest",
      argsType: AdminAlpha3ResetOnboardingToSecondExpandQuest.getTypeScriptAlgebraicType(),
    },
    admin_alpha3_reset_onboarding_to_second_temple_quest: {
      reducerName: "admin_alpha3_reset_onboarding_to_second_temple_quest",
      argsType: AdminAlpha3ResetOnboardingToSecondTempleQuest.getTypeScriptAlgebraicType(),
    },
    admin_alpha3_reset_onboarding_to_third_expand_quest: {
      reducerName: "admin_alpha3_reset_onboarding_to_third_expand_quest",
      argsType: AdminAlpha3ResetOnboardingToThirdExpandQuest.getTypeScriptAlgebraicType(),
    },
    admin_alpha3_reset_onboarding_to_third_temple_quest: {
      reducerName: "admin_alpha3_reset_onboarding_to_third_temple_quest",
      argsType: AdminAlpha3ResetOnboardingToThirdTempleQuest.getTypeScriptAlgebraicType(),
    },
    admin_broadcast_msg_region: {
      reducerName: "admin_broadcast_msg_region",
      argsType: AdminBroadcastMsgRegion.getTypeScriptAlgebraicType(),
    },
    admin_cap_skill: {
      reducerName: "admin_cap_skill",
      argsType: AdminCapSkill.getTypeScriptAlgebraicType(),
    },
    admin_check_closed_listing_states: {
      reducerName: "admin_check_closed_listing_states",
      argsType: AdminCheckClosedListingStates.getTypeScriptAlgebraicType(),
    },
    admin_clear_all_resources: {
      reducerName: "admin_clear_all_resources",
      argsType: AdminClearAllResources.getTypeScriptAlgebraicType(),
    },
    admin_clear_chunk_resources: {
      reducerName: "admin_clear_chunk_resources",
      argsType: AdminClearChunkResources.getTypeScriptAlgebraicType(),
    },
    admin_collapse_ruin: {
      reducerName: "admin_collapse_ruin",
      argsType: AdminCollapseRuin.getTypeScriptAlgebraicType(),
    },
    admin_collapse_ruins: {
      reducerName: "admin_collapse_ruins",
      argsType: AdminCollapseRuins.getTypeScriptAlgebraicType(),
    },
    admin_complete_all_passive_crafts: {
      reducerName: "admin_complete_all_passive_crafts",
      argsType: AdminCompleteAllPassiveCrafts.getTypeScriptAlgebraicType(),
    },
    admin_count_inventory_items: {
      reducerName: "admin_count_inventory_items",
      argsType: AdminCountInventoryItems.getTypeScriptAlgebraicType(),
    },
    admin_create_chat_message: {
      reducerName: "admin_create_chat_message",
      argsType: AdminCreateChatMessage.getTypeScriptAlgebraicType(),
    },
    admin_create_player_report: {
      reducerName: "admin_create_player_report",
      argsType: AdminCreatePlayerReport.getTypeScriptAlgebraicType(),
    },
    admin_delete_all_items_of_type: {
      reducerName: "admin_delete_all_items_of_type",
      argsType: AdminDeleteAllItemsOfType.getTypeScriptAlgebraicType(),
    },
    admin_delete_chat_message: {
      reducerName: "admin_delete_chat_message",
      argsType: AdminDeleteChatMessage.getTypeScriptAlgebraicType(),
    },
    admin_despawn_overworld_enemies: {
      reducerName: "admin_despawn_overworld_enemies",
      argsType: AdminDespawnOverworldEnemies.getTypeScriptAlgebraicType(),
    },
    admin_find_all_players_with_item: {
      reducerName: "admin_find_all_players_with_item",
      argsType: AdminFindAllPlayersWithItem.getTypeScriptAlgebraicType(),
    },
    admin_find_all_players_with_item_above_quantity: {
      reducerName: "admin_find_all_players_with_item_above_quantity",
      argsType: AdminFindAllPlayersWithItemAboveQuantity.getTypeScriptAlgebraicType(),
    },
    admin_find_items_in_inventories: {
      reducerName: "admin_find_items_in_inventories",
      argsType: AdminFindItemsInInventories.getTypeScriptAlgebraicType(),
    },
    admin_find_items_in_trades: {
      reducerName: "admin_find_items_in_trades",
      argsType: AdminFindItemsInTrades.getTypeScriptAlgebraicType(),
    },
    admin_grant_collectibles: {
      reducerName: "admin_grant_collectibles",
      argsType: AdminGrantCollectibles.getTypeScriptAlgebraicType(),
    },
    admin_modify_chat_message: {
      reducerName: "admin_modify_chat_message",
      argsType: AdminModifyChatMessage.getTypeScriptAlgebraicType(),
    },
    admin_rename_building: {
      reducerName: "admin_rename_building",
      argsType: AdminRenameBuilding.getTypeScriptAlgebraicType(),
    },
    admin_rename_building_coord: {
      reducerName: "admin_rename_building_coord",
      argsType: AdminRenameBuildingCoord.getTypeScriptAlgebraicType(),
    },
    admin_rename_building_entity: {
      reducerName: "admin_rename_building_entity",
      argsType: AdminRenameBuildingEntity.getTypeScriptAlgebraicType(),
    },
    admin_rename_claim: {
      reducerName: "admin_rename_claim",
      argsType: AdminRenameClaim.getTypeScriptAlgebraicType(),
    },
    admin_rename_claim_entity: {
      reducerName: "admin_rename_claim_entity",
      argsType: AdminRenameClaimEntity.getTypeScriptAlgebraicType(),
    },
    admin_rename_deployable: {
      reducerName: "admin_rename_deployable",
      argsType: AdminRenameDeployable.getTypeScriptAlgebraicType(),
    },
    admin_rename_deployable_entity: {
      reducerName: "admin_rename_deployable_entity",
      argsType: AdminRenameDeployableEntity.getTypeScriptAlgebraicType(),
    },
    admin_reset_all_herd_locations: {
      reducerName: "admin_reset_all_herd_locations",
      argsType: AdminResetAllHerdLocations.getTypeScriptAlgebraicType(),
    },
    admin_reset_herd_locations: {
      reducerName: "admin_reset_herd_locations",
      argsType: AdminResetHerdLocations.getTypeScriptAlgebraicType(),
    },
    admin_reset_onboarding_completely: {
      reducerName: "admin_reset_onboarding_completely",
      argsType: AdminResetOnboardingCompletely.getTypeScriptAlgebraicType(),
    },
    admin_resource_force_regen: {
      reducerName: "admin_resource_force_regen",
      argsType: AdminResourceForceRegen.getTypeScriptAlgebraicType(),
    },
    admin_resources_delete_very_slow: {
      reducerName: "admin_resources_delete_very_slow",
      argsType: AdminResourcesDeleteVerySlow.getTypeScriptAlgebraicType(),
    },
    admin_resources_log_count: {
      reducerName: "admin_resources_log_count",
      argsType: AdminResourcesLogCount.getTypeScriptAlgebraicType(),
    },
    admin_restore_all_collapsed_ruins: {
      reducerName: "admin_restore_all_collapsed_ruins",
      argsType: AdminRestoreAllCollapsedRuins.getTypeScriptAlgebraicType(),
    },
    admin_restore_player_state: {
      reducerName: "admin_restore_player_state",
      argsType: AdminRestorePlayerState.getTypeScriptAlgebraicType(),
    },
    admin_restore_player_state_scheduled: {
      reducerName: "admin_restore_player_state_scheduled",
      argsType: AdminRestorePlayerStateScheduled.getTypeScriptAlgebraicType(),
    },
    admin_set_sign_text: {
      reducerName: "admin_set_sign_text",
      argsType: AdminSetSignText.getTypeScriptAlgebraicType(),
    },
    admin_set_sign_text_coord: {
      reducerName: "admin_set_sign_text_coord",
      argsType: AdminSetSignTextCoord.getTypeScriptAlgebraicType(),
    },
    admin_set_sign_text_entity: {
      reducerName: "admin_set_sign_text_entity",
      argsType: AdminSetSignTextEntity.getTypeScriptAlgebraicType(),
    },
    admin_sign_out: {
      reducerName: "admin_sign_out",
      argsType: AdminSignOut.getTypeScriptAlgebraicType(),
    },
    admin_sign_out_all_region: {
      reducerName: "admin_sign_out_all_region",
      argsType: AdminSignOutAllRegion.getTypeScriptAlgebraicType(),
    },
    admin_sign_out_string: {
      reducerName: "admin_sign_out_string",
      argsType: AdminSignOutString.getTypeScriptAlgebraicType(),
    },
    admin_update_housing_portals: {
      reducerName: "admin_update_housing_portals",
      argsType: AdminUpdateHousingPortals.getTypeScriptAlgebraicType(),
    },
    admin_update_light_source_states: {
      reducerName: "admin_update_light_source_states",
      argsType: AdminUpdateLightSourceStates.getTypeScriptAlgebraicType(),
    },
    attack: {
      reducerName: "attack",
      argsType: Attack.getTypeScriptAlgebraicType(),
    },
    attack_impact: {
      reducerName: "attack_impact",
      argsType: AttackImpact.getTypeScriptAlgebraicType(),
    },
    attack_scheduled: {
      reducerName: "attack_scheduled",
      argsType: AttackScheduled.getTypeScriptAlgebraicType(),
    },
    attack_start: {
      reducerName: "attack_start",
      argsType: AttackStart.getTypeScriptAlgebraicType(),
    },
    auto_logout_loop: {
      reducerName: "auto_logout_loop",
      argsType: AutoLogoutLoop.getTypeScriptAlgebraicType(),
    },
    barter_stall_order_accept: {
      reducerName: "barter_stall_order_accept",
      argsType: BarterStallOrderAccept.getTypeScriptAlgebraicType(),
    },
    barter_stall_order_create: {
      reducerName: "barter_stall_order_create",
      argsType: BarterStallOrderCreate.getTypeScriptAlgebraicType(),
    },
    barter_stall_order_delete: {
      reducerName: "barter_stall_order_delete",
      argsType: BarterStallOrderDelete.getTypeScriptAlgebraicType(),
    },
    barter_stall_set_market_mode_enabled: {
      reducerName: "barter_stall_set_market_mode_enabled",
      argsType: BarterStallSetMarketModeEnabled.getTypeScriptAlgebraicType(),
    },
    blueprint_place: {
      reducerName: "blueprint_place",
      argsType: BlueprintPlace.getTypeScriptAlgebraicType(),
    },
    building_decay_agent_loop: {
      reducerName: "building_decay_agent_loop",
      argsType: BuildingDecayAgentLoop.getTypeScriptAlgebraicType(),
    },
    building_deconstruct: {
      reducerName: "building_deconstruct",
      argsType: BuildingDeconstruct.getTypeScriptAlgebraicType(),
    },
    building_deconstruct_start: {
      reducerName: "building_deconstruct_start",
      argsType: BuildingDeconstructStart.getTypeScriptAlgebraicType(),
    },
    building_despawn: {
      reducerName: "building_despawn",
      argsType: BuildingDespawn.getTypeScriptAlgebraicType(),
    },
    building_move: {
      reducerName: "building_move",
      argsType: BuildingMove.getTypeScriptAlgebraicType(),
    },
    building_repair: {
      reducerName: "building_repair",
      argsType: BuildingRepair.getTypeScriptAlgebraicType(),
    },
    building_repair_start: {
      reducerName: "building_repair_start",
      argsType: BuildingRepairStart.getTypeScriptAlgebraicType(),
    },
    building_set_nickname: {
      reducerName: "building_set_nickname",
      argsType: BuildingSetNickname.getTypeScriptAlgebraicType(),
    },
    building_set_sign_text: {
      reducerName: "building_set_sign_text",
      argsType: BuildingSetSignText.getTypeScriptAlgebraicType(),
    },
    chat_cleanup_agent_insert: {
      reducerName: "chat_cleanup_agent_insert",
      argsType: ChatCleanupAgentInsert.getTypeScriptAlgebraicType(),
    },
    chat_cleanup_agent_loop: {
      reducerName: "chat_cleanup_agent_loop",
      argsType: ChatCleanupAgentLoop.getTypeScriptAlgebraicType(),
    },
    chat_post_message: {
      reducerName: "chat_post_message",
      argsType: ChatPostMessage.getTypeScriptAlgebraicType(),
    },
    cheat_building_move: {
      reducerName: "cheat_building_move",
      argsType: CheatBuildingMove.getTypeScriptAlgebraicType(),
    },
    cheat_building_place: {
      reducerName: "cheat_building_place",
      argsType: CheatBuildingPlace.getTypeScriptAlgebraicType(),
    },
    cheat_cargo_grant: {
      reducerName: "cheat_cargo_grant",
      argsType: CheatCargoGrant.getTypeScriptAlgebraicType(),
    },
    cheat_claim_take_ownership: {
      reducerName: "cheat_claim_take_ownership",
      argsType: CheatClaimTakeOwnership.getTypeScriptAlgebraicType(),
    },
    cheat_claim_totem_add_supplies: {
      reducerName: "cheat_claim_totem_add_supplies",
      argsType: CheatClaimTotemAddSupplies.getTypeScriptAlgebraicType(),
    },
    cheat_claim_totem_complete_current_research: {
      reducerName: "cheat_claim_totem_complete_current_research",
      argsType: CheatClaimTotemCompleteCurrentResearch.getTypeScriptAlgebraicType(),
    },
    cheat_claim_totem_research_all: {
      reducerName: "cheat_claim_totem_research_all",
      argsType: CheatClaimTotemResearchAll.getTypeScriptAlgebraicType(),
    },
    cheat_clear_buffs_and_debuffs: {
      reducerName: "cheat_clear_buffs_and_debuffs",
      argsType: CheatClearBuffsAndDebuffs.getTypeScriptAlgebraicType(),
    },
    cheat_compendium_place_enemy: {
      reducerName: "cheat_compendium_place_enemy",
      argsType: CheatCompendiumPlaceEnemy.getTypeScriptAlgebraicType(),
    },
    cheat_compendium_place_resource: {
      reducerName: "cheat_compendium_place_resource",
      argsType: CheatCompendiumPlaceResource.getTypeScriptAlgebraicType(),
    },
    cheat_delete_item: {
      reducerName: "cheat_delete_item",
      argsType: CheatDeleteItem.getTypeScriptAlgebraicType(),
    },
    cheat_deployable_store: {
      reducerName: "cheat_deployable_store",
      argsType: CheatDeployableStore.getTypeScriptAlgebraicType(),
    },
    cheat_discover_map: {
      reducerName: "cheat_discover_map",
      argsType: CheatDiscoverMap.getTypeScriptAlgebraicType(),
    },
    cheat_experience_grant: {
      reducerName: "cheat_experience_grant",
      argsType: CheatExperienceGrant.getTypeScriptAlgebraicType(),
    },
    cheat_grant_knowledge: {
      reducerName: "cheat_grant_knowledge",
      argsType: CheatGrantKnowledge.getTypeScriptAlgebraicType(),
    },
    cheat_grant_teleport_energy: {
      reducerName: "cheat_grant_teleport_energy",
      argsType: CheatGrantTeleportEnergy.getTypeScriptAlgebraicType(),
    },
    cheat_item_stack_grant: {
      reducerName: "cheat_item_stack_grant",
      argsType: CheatItemStackGrant.getTypeScriptAlgebraicType(),
    },
    cheat_item_stack_grant_and_equip: {
      reducerName: "cheat_item_stack_grant_and_equip",
      argsType: CheatItemStackGrantAndEquip.getTypeScriptAlgebraicType(),
    },
    cheat_kill: {
      reducerName: "cheat_kill",
      argsType: CheatKill.getTypeScriptAlgebraicType(),
    },
    cheat_paving_add_tile: {
      reducerName: "cheat_paving_add_tile",
      argsType: CheatPavingAddTile.getTypeScriptAlgebraicType(),
    },
    cheat_paving_destroy: {
      reducerName: "cheat_paving_destroy",
      argsType: CheatPavingDestroy.getTypeScriptAlgebraicType(),
    },
    cheat_pillar_shaping_add_pillar: {
      reducerName: "cheat_pillar_shaping_add_pillar",
      argsType: CheatPillarShapingAddPillar.getTypeScriptAlgebraicType(),
    },
    cheat_pillar_shaping_destroy: {
      reducerName: "cheat_pillar_shaping_destroy",
      argsType: CheatPillarShapingDestroy.getTypeScriptAlgebraicType(),
    },
    cheat_project_site_add_all_materials: {
      reducerName: "cheat_project_site_add_all_materials",
      argsType: CheatProjectSiteAddAllMaterials.getTypeScriptAlgebraicType(),
    },
    cheat_remove_entity_building: {
      reducerName: "cheat_remove_entity_building",
      argsType: CheatRemoveEntityBuilding.getTypeScriptAlgebraicType(),
    },
    cheat_remove_entity_enemy: {
      reducerName: "cheat_remove_entity_enemy",
      argsType: CheatRemoveEntityEnemy.getTypeScriptAlgebraicType(),
    },
    cheat_remove_entity_resource: {
      reducerName: "cheat_remove_entity_resource",
      argsType: CheatRemoveEntityResource.getTypeScriptAlgebraicType(),
    },
    cheat_remove_item_quantity: {
      reducerName: "cheat_remove_item_quantity",
      argsType: CheatRemoveItemQuantity.getTypeScriptAlgebraicType(),
    },
    cheat_set_ai_debug_state: {
      reducerName: "cheat_set_ai_debug_state",
      argsType: CheatSetAiDebugState.getTypeScriptAlgebraicType(),
    },
    cheat_spawn_loot_chest: {
      reducerName: "cheat_spawn_loot_chest",
      argsType: CheatSpawnLootChest.getTypeScriptAlgebraicType(),
    },
    cheat_teleport_float: {
      reducerName: "cheat_teleport_float",
      argsType: CheatTeleportFloat.getTypeScriptAlgebraicType(),
    },
    cheat_terraform: {
      reducerName: "cheat_terraform",
      argsType: CheatTerraform.getTypeScriptAlgebraicType(),
    },
    cheat_toggle_active_collectible: {
      reducerName: "cheat_toggle_active_collectible",
      argsType: CheatToggleActiveCollectible.getTypeScriptAlgebraicType(),
    },
    cheat_warp: {
      reducerName: "cheat_warp",
      argsType: CheatWarp.getTypeScriptAlgebraicType(),
    },
    claim_add_member: {
      reducerName: "claim_add_member",
      argsType: ClaimAddMember.getTypeScriptAlgebraicType(),
    },
    claim_add_recruitment: {
      reducerName: "claim_add_recruitment",
      argsType: ClaimAddRecruitment.getTypeScriptAlgebraicType(),
    },
    claim_add_tile: {
      reducerName: "claim_add_tile",
      argsType: ClaimAddTile.getTypeScriptAlgebraicType(),
    },
    claim_apply_for_recruitment: {
      reducerName: "claim_apply_for_recruitment",
      argsType: ClaimApplyForRecruitment.getTypeScriptAlgebraicType(),
    },
    claim_leave: {
      reducerName: "claim_leave",
      argsType: ClaimLeave.getTypeScriptAlgebraicType(),
    },
    claim_purchase_supplies_from_player: {
      reducerName: "claim_purchase_supplies_from_player",
      argsType: ClaimPurchaseSuppliesFromPlayer.getTypeScriptAlgebraicType(),
    },
    claim_remove_member: {
      reducerName: "claim_remove_member",
      argsType: ClaimRemoveMember.getTypeScriptAlgebraicType(),
    },
    claim_remove_recruitment: {
      reducerName: "claim_remove_recruitment",
      argsType: ClaimRemoveRecruitment.getTypeScriptAlgebraicType(),
    },
    claim_remove_tile: {
      reducerName: "claim_remove_tile",
      argsType: ClaimRemoveTile.getTypeScriptAlgebraicType(),
    },
    claim_rename: {
      reducerName: "claim_rename",
      argsType: ClaimRename.getTypeScriptAlgebraicType(),
    },
    claim_resupply: {
      reducerName: "claim_resupply",
      argsType: ClaimResupply.getTypeScriptAlgebraicType(),
    },
    claim_resupply_start: {
      reducerName: "claim_resupply_start",
      argsType: ClaimResupplyStart.getTypeScriptAlgebraicType(),
    },
    claim_set_member_permissions: {
      reducerName: "claim_set_member_permissions",
      argsType: ClaimSetMemberPermissions.getTypeScriptAlgebraicType(),
    },
    claim_set_purchase_supply_price: {
      reducerName: "claim_set_purchase_supply_price",
      argsType: ClaimSetPurchaseSupplyPrice.getTypeScriptAlgebraicType(),
    },
    claim_set_purchase_supply_threshold: {
      reducerName: "claim_set_purchase_supply_threshold",
      argsType: ClaimSetPurchaseSupplyThreshold.getTypeScriptAlgebraicType(),
    },
    claim_take_ownership: {
      reducerName: "claim_take_ownership",
      argsType: ClaimTakeOwnership.getTypeScriptAlgebraicType(),
    },
    claim_tech_cancel: {
      reducerName: "claim_tech_cancel",
      argsType: ClaimTechCancel.getTypeScriptAlgebraicType(),
    },
    claim_tech_learn: {
      reducerName: "claim_tech_learn",
      argsType: ClaimTechLearn.getTypeScriptAlgebraicType(),
    },
    claim_tech_unlock_tech: {
      reducerName: "claim_tech_unlock_tech",
      argsType: ClaimTechUnlockTech.getTypeScriptAlgebraicType(),
    },
    claim_transfer_ownership: {
      reducerName: "claim_transfer_ownership",
      argsType: ClaimTransferOwnership.getTypeScriptAlgebraicType(),
    },
    claim_treasury_deposit: {
      reducerName: "claim_treasury_deposit",
      argsType: ClaimTreasuryDeposit.getTypeScriptAlgebraicType(),
    },
    claim_withdraw_from_treasury: {
      reducerName: "claim_withdraw_from_treasury",
      argsType: ClaimWithdrawFromTreasury.getTypeScriptAlgebraicType(),
    },
    clear_staged_static_data: {
      reducerName: "clear_staged_static_data",
      argsType: ClearStagedStaticData.getTypeScriptAlgebraicType(),
    },
    closed_listing_collect: {
      reducerName: "closed_listing_collect",
      argsType: ClosedListingCollect.getTypeScriptAlgebraicType(),
    },
    collect_stats_reducer: {
      reducerName: "collect_stats_reducer",
      argsType: CollectStatsReducer.getTypeScriptAlgebraicType(),
    },
    collectible_activate: {
      reducerName: "collectible_activate",
      argsType: CollectibleActivate.getTypeScriptAlgebraicType(),
    },
    commit_staged_static_data: {
      reducerName: "commit_staged_static_data",
      argsType: CommitStagedStaticData.getTypeScriptAlgebraicType(),
    },
    complete_onboarding_quest: {
      reducerName: "complete_onboarding_quest",
      argsType: CompleteOnboardingQuest.getTypeScriptAlgebraicType(),
    },
    complete_onboarding_state: {
      reducerName: "complete_onboarding_state",
      argsType: CompleteOnboardingState.getTypeScriptAlgebraicType(),
    },
    convert_collectible_to_deed: {
      reducerName: "convert_collectible_to_deed",
      argsType: ConvertCollectibleToDeed.getTypeScriptAlgebraicType(),
    },
    convert_deed_to_collectible: {
      reducerName: "convert_deed_to_collectible",
      argsType: ConvertDeedToCollectible.getTypeScriptAlgebraicType(),
    },
    craft_cancel: {
      reducerName: "craft_cancel",
      argsType: CraftCancel.getTypeScriptAlgebraicType(),
    },
    craft_collect: {
      reducerName: "craft_collect",
      argsType: CraftCollect.getTypeScriptAlgebraicType(),
    },
    craft_collect_all: {
      reducerName: "craft_collect_all",
      argsType: CraftCollectAll.getTypeScriptAlgebraicType(),
    },
    craft_continue: {
      reducerName: "craft_continue",
      argsType: CraftContinue.getTypeScriptAlgebraicType(),
    },
    craft_continue_start: {
      reducerName: "craft_continue_start",
      argsType: CraftContinueStart.getTypeScriptAlgebraicType(),
    },
    craft_initiate: {
      reducerName: "craft_initiate",
      argsType: CraftInitiate.getTypeScriptAlgebraicType(),
    },
    craft_initiate_start: {
      reducerName: "craft_initiate_start",
      argsType: CraftInitiateStart.getTypeScriptAlgebraicType(),
    },
    craft_set_public: {
      reducerName: "craft_set_public",
      argsType: CraftSetPublic.getTypeScriptAlgebraicType(),
    },
    current_version: {
      reducerName: "current_version",
      argsType: CurrentVersion.getTypeScriptAlgebraicType(),
    },
    day_night_agent_loop: {
      reducerName: "day_night_agent_loop",
      argsType: DayNightAgentLoop.getTypeScriptAlgebraicType(),
    },
    delete_all_npcs: {
      reducerName: "delete_all_npcs",
      argsType: DeleteAllNpcs.getTypeScriptAlgebraicType(),
    },
    deployable_deploy: {
      reducerName: "deployable_deploy",
      argsType: DeployableDeploy.getTypeScriptAlgebraicType(),
    },
    deployable_deploy_start: {
      reducerName: "deployable_deploy_start",
      argsType: DeployableDeployStart.getTypeScriptAlgebraicType(),
    },
    deployable_dismount: {
      reducerName: "deployable_dismount",
      argsType: DeployableDismount.getTypeScriptAlgebraicType(),
    },
    deployable_dismount_scheduled: {
      reducerName: "deployable_dismount_scheduled",
      argsType: DeployableDismountScheduled.getTypeScriptAlgebraicType(),
    },
    deployable_mount: {
      reducerName: "deployable_mount",
      argsType: DeployableMount.getTypeScriptAlgebraicType(),
    },
    deployable_move: {
      reducerName: "deployable_move",
      argsType: DeployableMove.getTypeScriptAlgebraicType(),
    },
    deployable_move_off_bounds: {
      reducerName: "deployable_move_off_bounds",
      argsType: DeployableMoveOffBounds.getTypeScriptAlgebraicType(),
    },
    deployable_move_off_claim: {
      reducerName: "deployable_move_off_claim",
      argsType: DeployableMoveOffClaim.getTypeScriptAlgebraicType(),
    },
    deployable_store: {
      reducerName: "deployable_store",
      argsType: DeployableStore.getTypeScriptAlgebraicType(),
    },
    deployable_store_start: {
      reducerName: "deployable_store_start",
      argsType: DeployableStoreStart.getTypeScriptAlgebraicType(),
    },
    destroy_dimension_network: {
      reducerName: "destroy_dimension_network",
      argsType: DestroyDimensionNetwork.getTypeScriptAlgebraicType(),
    },
    dev_delete_world: {
      reducerName: "dev_delete_world",
      argsType: DevDeleteWorld.getTypeScriptAlgebraicType(),
    },
    discover_entities: {
      reducerName: "discover_entities",
      argsType: DiscoverEntities.getTypeScriptAlgebraicType(),
    },
    dropped_inventory_despawn: {
      reducerName: "dropped_inventory_despawn",
      argsType: DroppedInventoryDespawn.getTypeScriptAlgebraicType(),
    },
    dropped_inventory_lose_ownership: {
      reducerName: "dropped_inventory_lose_ownership",
      argsType: DroppedInventoryLoseOwnership.getTypeScriptAlgebraicType(),
    },
    duel_agent_timer_loop: {
      reducerName: "duel_agent_timer_loop",
      argsType: DuelAgentTimerLoop.getTypeScriptAlgebraicType(),
    },
    duel_despawn: {
      reducerName: "duel_despawn",
      argsType: DuelDespawn.getTypeScriptAlgebraicType(),
    },
    eat: {
      reducerName: "eat",
      argsType: Eat.getTypeScriptAlgebraicType(),
    },
    emote: {
      reducerName: "emote",
      argsType: Emote.getTypeScriptAlgebraicType(),
    },
    emote_start: {
      reducerName: "emote_start",
      argsType: EmoteStart.getTypeScriptAlgebraicType(),
    },
    empire_add_siege_supplies: {
      reducerName: "empire_add_siege_supplies",
      argsType: EmpireAddSiegeSupplies.getTypeScriptAlgebraicType(),
    },
    empire_claim_join: {
      reducerName: "empire_claim_join",
      argsType: EmpireClaimJoin.getTypeScriptAlgebraicType(),
    },
    empire_collect_hexite_capsule: {
      reducerName: "empire_collect_hexite_capsule",
      argsType: EmpireCollectHexiteCapsule.getTypeScriptAlgebraicType(),
    },
    empire_deploy_siege_engine: {
      reducerName: "empire_deploy_siege_engine",
      argsType: EmpireDeploySiegeEngine.getTypeScriptAlgebraicType(),
    },
    empire_deploy_siege_engine_start: {
      reducerName: "empire_deploy_siege_engine_start",
      argsType: EmpireDeploySiegeEngineStart.getTypeScriptAlgebraicType(),
    },
    empire_queue_supplies: {
      reducerName: "empire_queue_supplies",
      argsType: EmpireQueueSupplies.getTypeScriptAlgebraicType(),
    },
    empire_resupply_node: {
      reducerName: "empire_resupply_node",
      argsType: EmpireResupplyNode.getTypeScriptAlgebraicType(),
    },
    empire_resupply_node_start: {
      reducerName: "empire_resupply_node_start",
      argsType: EmpireResupplyNodeStart.getTypeScriptAlgebraicType(),
    },
    empire_siege_depleted_watchtower: {
      reducerName: "empire_siege_depleted_watchtower",
      argsType: EmpireSiegeDepletedWatchtower.getTypeScriptAlgebraicType(),
    },
    end_grace_period: {
      reducerName: "end_grace_period",
      argsType: EndGracePeriod.getTypeScriptAlgebraicType(),
    },
    enemy_clear_aggro: {
      reducerName: "enemy_clear_aggro",
      argsType: EnemyClearAggro.getTypeScriptAlgebraicType(),
    },
    enemy_despawn: {
      reducerName: "enemy_despawn",
      argsType: EnemyDespawn.getTypeScriptAlgebraicType(),
    },
    enemy_despawn_from_mob_monitor: {
      reducerName: "enemy_despawn_from_mob_monitor",
      argsType: EnemyDespawnFromMobMonitor.getTypeScriptAlgebraicType(),
    },
    enemy_despawn_from_mob_monitor_batch: {
      reducerName: "enemy_despawn_from_mob_monitor_batch",
      argsType: EnemyDespawnFromMobMonitorBatch.getTypeScriptAlgebraicType(),
    },
    enemy_move: {
      reducerName: "enemy_move",
      argsType: EnemyMove.getTypeScriptAlgebraicType(),
    },
    enemy_move_batch: {
      reducerName: "enemy_move_batch",
      argsType: EnemyMoveBatch.getTypeScriptAlgebraicType(),
    },
    enemy_regen_agent_loop: {
      reducerName: "enemy_regen_agent_loop",
      argsType: EnemyRegenAgentLoop.getTypeScriptAlgebraicType(),
    },
    enemy_set_health: {
      reducerName: "enemy_set_health",
      argsType: EnemySetHealth.getTypeScriptAlgebraicType(),
    },
    enemy_set_health_batch: {
      reducerName: "enemy_set_health_batch",
      argsType: EnemySetHealthBatch.getTypeScriptAlgebraicType(),
    },
    enemy_spawn: {
      reducerName: "enemy_spawn",
      argsType: EnemySpawn.getTypeScriptAlgebraicType(),
    },
    enemy_spawn_batch: {
      reducerName: "enemy_spawn_batch",
      argsType: EnemySpawnBatch.getTypeScriptAlgebraicType(),
    },
    enemy_spawn_loot: {
      reducerName: "enemy_spawn_loot",
      argsType: EnemySpawnLoot.getTypeScriptAlgebraicType(),
    },
    environment_debuff_agent_loop: {
      reducerName: "environment_debuff_agent_loop",
      argsType: EnvironmentDebuffAgentLoop.getTypeScriptAlgebraicType(),
    },
    equipment_add: {
      reducerName: "equipment_add",
      argsType: EquipmentAdd.getTypeScriptAlgebraicType(),
    },
    equipment_remove: {
      reducerName: "equipment_remove",
      argsType: EquipmentRemove.getTypeScriptAlgebraicType(),
    },
    extract: {
      reducerName: "extract",
      argsType: Extract.getTypeScriptAlgebraicType(),
    },
    extract_start: {
      reducerName: "extract_start",
      argsType: ExtractStart.getTypeScriptAlgebraicType(),
    },
    force_start_agents: {
      reducerName: "force_start_agents",
      argsType: ForceStartAgents.getTypeScriptAlgebraicType(),
    },
    generate_dev_island: {
      reducerName: "generate_dev_island",
      argsType: GenerateDevIsland.getTypeScriptAlgebraicType(),
    },
    generate_flat_world: {
      reducerName: "generate_flat_world",
      argsType: GenerateFlatWorld.getTypeScriptAlgebraicType(),
    },
    generate_world: {
      reducerName: "generate_world",
      argsType: GenerateWorld.getTypeScriptAlgebraicType(),
    },
    growth_agent_loop: {
      reducerName: "growth_agent_loop",
      argsType: GrowthAgentLoop.getTypeScriptAlgebraicType(),
    },
    hide_deployable: {
      reducerName: "hide_deployable",
      argsType: HideDeployable.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    import_achievement_desc: {
      reducerName: "import_achievement_desc",
      argsType: ImportAchievementDesc.getTypeScriptAlgebraicType(),
    },
    import_active_buff_state: {
      reducerName: "import_active_buff_state",
      argsType: ImportActiveBuffState.getTypeScriptAlgebraicType(),
    },
    import_admin_broadcast: {
      reducerName: "import_admin_broadcast",
      argsType: ImportAdminBroadcast.getTypeScriptAlgebraicType(),
    },
    import_alert_desc: {
      reducerName: "import_alert_desc",
      argsType: ImportAlertDesc.getTypeScriptAlgebraicType(),
    },
    import_alert_state: {
      reducerName: "import_alert_state",
      argsType: ImportAlertState.getTypeScriptAlgebraicType(),
    },
    import_attack_outcome_state: {
      reducerName: "import_attack_outcome_state",
      argsType: ImportAttackOutcomeState.getTypeScriptAlgebraicType(),
    },
    import_biome_desc: {
      reducerName: "import_biome_desc",
      argsType: ImportBiomeDesc.getTypeScriptAlgebraicType(),
    },
    import_buff_desc: {
      reducerName: "import_buff_desc",
      argsType: ImportBuffDesc.getTypeScriptAlgebraicType(),
    },
    import_buff_type_desc: {
      reducerName: "import_buff_type_desc",
      argsType: ImportBuffTypeDesc.getTypeScriptAlgebraicType(),
    },
    import_building_claim_desc: {
      reducerName: "import_building_claim_desc",
      argsType: ImportBuildingClaimDesc.getTypeScriptAlgebraicType(),
    },
    import_building_desc: {
      reducerName: "import_building_desc",
      argsType: ImportBuildingDesc.getTypeScriptAlgebraicType(),
    },
    import_building_portal_desc: {
      reducerName: "import_building_portal_desc",
      argsType: ImportBuildingPortalDesc.getTypeScriptAlgebraicType(),
    },
    import_building_repairs_desc: {
      reducerName: "import_building_repairs_desc",
      argsType: ImportBuildingRepairsDesc.getTypeScriptAlgebraicType(),
    },
    import_building_spawn_desc: {
      reducerName: "import_building_spawn_desc",
      argsType: ImportBuildingSpawnDesc.getTypeScriptAlgebraicType(),
    },
    import_building_state: {
      reducerName: "import_building_state",
      argsType: ImportBuildingState.getTypeScriptAlgebraicType(),
    },
    import_building_type_desc: {
      reducerName: "import_building_type_desc",
      argsType: ImportBuildingTypeDesc.getTypeScriptAlgebraicType(),
    },
    import_cargo_desc: {
      reducerName: "import_cargo_desc",
      argsType: ImportCargoDesc.getTypeScriptAlgebraicType(),
    },
    import_character_stat_desc: {
      reducerName: "import_character_stat_desc",
      argsType: ImportCharacterStatDesc.getTypeScriptAlgebraicType(),
    },
    import_character_stats_state: {
      reducerName: "import_character_stats_state",
      argsType: ImportCharacterStatsState.getTypeScriptAlgebraicType(),
    },
    import_chat_message_state: {
      reducerName: "import_chat_message_state",
      argsType: ImportChatMessageState.getTypeScriptAlgebraicType(),
    },
    import_chest_rarity_desc: {
      reducerName: "import_chest_rarity_desc",
      argsType: ImportChestRarityDesc.getTypeScriptAlgebraicType(),
    },
    import_claim_local_state: {
      reducerName: "import_claim_local_state",
      argsType: ImportClaimLocalState.getTypeScriptAlgebraicType(),
    },
    import_claim_recruitment_state: {
      reducerName: "import_claim_recruitment_state",
      argsType: ImportClaimRecruitmentState.getTypeScriptAlgebraicType(),
    },
    import_claim_state: {
      reducerName: "import_claim_state",
      argsType: ImportClaimState.getTypeScriptAlgebraicType(),
    },
    import_claim_tech_desc: {
      reducerName: "import_claim_tech_desc",
      argsType: ImportClaimTechDesc.getTypeScriptAlgebraicType(),
    },
    import_claim_tech_state: {
      reducerName: "import_claim_tech_state",
      argsType: ImportClaimTechState.getTypeScriptAlgebraicType(),
    },
    import_claim_tile_cost: {
      reducerName: "import_claim_tile_cost",
      argsType: ImportClaimTileCost.getTypeScriptAlgebraicType(),
    },
    import_claim_tile_state: {
      reducerName: "import_claim_tile_state",
      argsType: ImportClaimTileState.getTypeScriptAlgebraicType(),
    },
    import_climb_requirement_desc: {
      reducerName: "import_climb_requirement_desc",
      argsType: ImportClimbRequirementDesc.getTypeScriptAlgebraicType(),
    },
    import_clothing_desc: {
      reducerName: "import_clothing_desc",
      argsType: ImportClothingDesc.getTypeScriptAlgebraicType(),
    },
    import_collectible_desc: {
      reducerName: "import_collectible_desc",
      argsType: ImportCollectibleDesc.getTypeScriptAlgebraicType(),
    },
    import_combat_action_desc: {
      reducerName: "import_combat_action_desc",
      argsType: ImportCombatActionDesc.getTypeScriptAlgebraicType(),
    },
    import_combat_state: {
      reducerName: "import_combat_state",
      argsType: ImportCombatState.getTypeScriptAlgebraicType(),
    },
    import_config: {
      reducerName: "import_config",
      argsType: ImportConfig.getTypeScriptAlgebraicType(),
    },
    import_construction_recipe_desc: {
      reducerName: "import_construction_recipe_desc",
      argsType: ImportConstructionRecipeDesc.getTypeScriptAlgebraicType(),
    },
    import_crafting_recipe_desc: {
      reducerName: "import_crafting_recipe_desc",
      argsType: ImportCraftingRecipeDesc.getTypeScriptAlgebraicType(),
    },
    import_deconstruction_recipe_desc: {
      reducerName: "import_deconstruction_recipe_desc",
      argsType: ImportDeconstructionRecipeDesc.getTypeScriptAlgebraicType(),
    },
    import_deployable_desc: {
      reducerName: "import_deployable_desc",
      argsType: ImportDeployableDesc.getTypeScriptAlgebraicType(),
    },
    import_deployable_state: {
      reducerName: "import_deployable_state",
      argsType: ImportDeployableState.getTypeScriptAlgebraicType(),
    },
    import_dimension_description_state: {
      reducerName: "import_dimension_description_state",
      argsType: ImportDimensionDescriptionState.getTypeScriptAlgebraicType(),
    },
    import_dimension_network_description_state: {
      reducerName: "import_dimension_network_description_state",
      argsType: ImportDimensionNetworkDescriptionState.getTypeScriptAlgebraicType(),
    },
    import_distant_visible_entity_desc: {
      reducerName: "import_distant_visible_entity_desc",
      argsType: ImportDistantVisibleEntityDesc.getTypeScriptAlgebraicType(),
    },
    import_dropped_inventory_state: {
      reducerName: "import_dropped_inventory_state",
      argsType: ImportDroppedInventoryState.getTypeScriptAlgebraicType(),
    },
    import_elevator_desc: {
      reducerName: "import_elevator_desc",
      argsType: ImportElevatorDesc.getTypeScriptAlgebraicType(),
    },
    import_emote_desc: {
      reducerName: "import_emote_desc",
      argsType: ImportEmoteDesc.getTypeScriptAlgebraicType(),
    },
    import_empire_colors_desc: {
      reducerName: "import_empire_colors_desc",
      argsType: ImportEmpireColorsDesc.getTypeScriptAlgebraicType(),
    },
    import_empire_icon_desc: {
      reducerName: "import_empire_icon_desc",
      argsType: ImportEmpireIconDesc.getTypeScriptAlgebraicType(),
    },
    import_empire_notification_desc: {
      reducerName: "import_empire_notification_desc",
      argsType: ImportEmpireNotificationDesc.getTypeScriptAlgebraicType(),
    },
    import_empire_rank_desc: {
      reducerName: "import_empire_rank_desc",
      argsType: ImportEmpireRankDesc.getTypeScriptAlgebraicType(),
    },
    import_empire_supplies_desc: {
      reducerName: "import_empire_supplies_desc",
      argsType: ImportEmpireSuppliesDesc.getTypeScriptAlgebraicType(),
    },
    import_empire_territory_desc: {
      reducerName: "import_empire_territory_desc",
      argsType: ImportEmpireTerritoryDesc.getTypeScriptAlgebraicType(),
    },
    import_enemy_ai_params_desc: {
      reducerName: "import_enemy_ai_params_desc",
      argsType: ImportEnemyAiParamsDesc.getTypeScriptAlgebraicType(),
    },
    import_enemy_desc: {
      reducerName: "import_enemy_desc",
      argsType: ImportEnemyDesc.getTypeScriptAlgebraicType(),
    },
    import_enemy_state: {
      reducerName: "import_enemy_state",
      argsType: ImportEnemyState.getTypeScriptAlgebraicType(),
    },
    import_environment_debuff_desc: {
      reducerName: "import_environment_debuff_desc",
      argsType: ImportEnvironmentDebuffDesc.getTypeScriptAlgebraicType(),
    },
    import_equipment_desc: {
      reducerName: "import_equipment_desc",
      argsType: ImportEquipmentDesc.getTypeScriptAlgebraicType(),
    },
    import_equipment_state: {
      reducerName: "import_equipment_state",
      argsType: ImportEquipmentState.getTypeScriptAlgebraicType(),
    },
    import_experience_state: {
      reducerName: "import_experience_state",
      argsType: ImportExperienceState.getTypeScriptAlgebraicType(),
    },
    import_exploration_chunks_state: {
      reducerName: "import_exploration_chunks_state",
      argsType: ImportExplorationChunksState.getTypeScriptAlgebraicType(),
    },
    import_extraction_recipe_desc: {
      reducerName: "import_extraction_recipe_desc",
      argsType: ImportExtractionRecipeDesc.getTypeScriptAlgebraicType(),
    },
    import_food_desc: {
      reducerName: "import_food_desc",
      argsType: ImportFoodDesc.getTypeScriptAlgebraicType(),
    },
    import_footprint_tile_state: {
      reducerName: "import_footprint_tile_state",
      argsType: ImportFootprintTileState.getTypeScriptAlgebraicType(),
    },
    import_gate_desc: {
      reducerName: "import_gate_desc",
      argsType: ImportGateDesc.getTypeScriptAlgebraicType(),
    },
    import_globals: {
      reducerName: "import_globals",
      argsType: ImportGlobals.getTypeScriptAlgebraicType(),
    },
    import_growth_state: {
      reducerName: "import_growth_state",
      argsType: ImportGrowthState.getTypeScriptAlgebraicType(),
    },
    import_health_state: {
      reducerName: "import_health_state",
      argsType: ImportHealthState.getTypeScriptAlgebraicType(),
    },
    import_herd_cache: {
      reducerName: "import_herd_cache",
      argsType: ImportHerdCache.getTypeScriptAlgebraicType(),
    },
    import_hexite_exchange_entry_desc: {
      reducerName: "import_hexite_exchange_entry_desc",
      argsType: ImportHexiteExchangeEntryDesc.getTypeScriptAlgebraicType(),
    },
    import_identity_role: {
      reducerName: "import_identity_role",
      argsType: ImportIdentityRole.getTypeScriptAlgebraicType(),
    },
    import_interior_collapse_trigger_state: {
      reducerName: "import_interior_collapse_trigger_state",
      argsType: ImportInteriorCollapseTriggerState.getTypeScriptAlgebraicType(),
    },
    import_interior_environment_desc: {
      reducerName: "import_interior_environment_desc",
      argsType: ImportInteriorEnvironmentDesc.getTypeScriptAlgebraicType(),
    },
    import_interior_instance_desc: {
      reducerName: "import_interior_instance_desc",
      argsType: ImportInteriorInstanceDesc.getTypeScriptAlgebraicType(),
    },
    import_interior_network_desc: {
      reducerName: "import_interior_network_desc",
      argsType: ImportInteriorNetworkDesc.getTypeScriptAlgebraicType(),
    },
    import_interior_portal_connections_desc: {
      reducerName: "import_interior_portal_connections_desc",
      argsType: ImportInteriorPortalConnectionsDesc.getTypeScriptAlgebraicType(),
    },
    import_interior_shape_desc: {
      reducerName: "import_interior_shape_desc",
      argsType: ImportInteriorShapeDesc.getTypeScriptAlgebraicType(),
    },
    import_interior_spawn_desc: {
      reducerName: "import_interior_spawn_desc",
      argsType: ImportInteriorSpawnDesc.getTypeScriptAlgebraicType(),
    },
    import_inventory_state: {
      reducerName: "import_inventory_state",
      argsType: ImportInventoryState.getTypeScriptAlgebraicType(),
    },
    import_item_conversion_recipe_desc: {
      reducerName: "import_item_conversion_recipe_desc",
      argsType: ImportItemConversionRecipeDesc.getTypeScriptAlgebraicType(),
    },
    import_item_desc: {
      reducerName: "import_item_desc",
      argsType: ImportItemDesc.getTypeScriptAlgebraicType(),
    },
    import_item_list_desc: {
      reducerName: "import_item_list_desc",
      argsType: ImportItemListDesc.getTypeScriptAlgebraicType(),
    },
    import_knowledge_achievement_state: {
      reducerName: "import_knowledge_achievement_state",
      argsType: ImportKnowledgeAchievementState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_battle_action_state: {
      reducerName: "import_knowledge_battle_action_state",
      argsType: ImportKnowledgeBattleActionState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_building_state: {
      reducerName: "import_knowledge_building_state",
      argsType: ImportKnowledgeBuildingState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_cargo_state: {
      reducerName: "import_knowledge_cargo_state",
      argsType: ImportKnowledgeCargoState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_construction_state: {
      reducerName: "import_knowledge_construction_state",
      argsType: ImportKnowledgeConstructionState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_craft_state: {
      reducerName: "import_knowledge_craft_state",
      argsType: ImportKnowledgeCraftState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_deployable_state: {
      reducerName: "import_knowledge_deployable_state",
      argsType: ImportKnowledgeDeployableState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_enemy_state: {
      reducerName: "import_knowledge_enemy_state",
      argsType: ImportKnowledgeEnemyState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_extract_state: {
      reducerName: "import_knowledge_extract_state",
      argsType: ImportKnowledgeExtractState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_item_state: {
      reducerName: "import_knowledge_item_state",
      argsType: ImportKnowledgeItemState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_lore_state: {
      reducerName: "import_knowledge_lore_state",
      argsType: ImportKnowledgeLoreState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_npc_state: {
      reducerName: "import_knowledge_npc_state",
      argsType: ImportKnowledgeNpcState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_paving_state: {
      reducerName: "import_knowledge_paving_state",
      argsType: ImportKnowledgePavingState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_pillar_shaping_state: {
      reducerName: "import_knowledge_pillar_shaping_state",
      argsType: ImportKnowledgePillarShapingState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_resource_placement_state: {
      reducerName: "import_knowledge_resource_placement_state",
      argsType: ImportKnowledgeResourcePlacementState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_resource_state: {
      reducerName: "import_knowledge_resource_state",
      argsType: ImportKnowledgeResourceState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_ruins_state: {
      reducerName: "import_knowledge_ruins_state",
      argsType: ImportKnowledgeRuinsState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_scroll_desc: {
      reducerName: "import_knowledge_scroll_desc",
      argsType: ImportKnowledgeScrollDesc.getTypeScriptAlgebraicType(),
    },
    import_knowledge_scroll_type_desc: {
      reducerName: "import_knowledge_scroll_type_desc",
      argsType: ImportKnowledgeScrollTypeDesc.getTypeScriptAlgebraicType(),
    },
    import_knowledge_secondary_state: {
      reducerName: "import_knowledge_secondary_state",
      argsType: ImportKnowledgeSecondaryState.getTypeScriptAlgebraicType(),
    },
    import_knowledge_stat_modifier_desc: {
      reducerName: "import_knowledge_stat_modifier_desc",
      argsType: ImportKnowledgeStatModifierDesc.getTypeScriptAlgebraicType(),
    },
    import_knowledge_vault_state: {
      reducerName: "import_knowledge_vault_state",
      argsType: ImportKnowledgeVaultState.getTypeScriptAlgebraicType(),
    },
    import_location_cache: {
      reducerName: "import_location_cache",
      argsType: ImportLocationCache.getTypeScriptAlgebraicType(),
    },
    import_location_state: {
      reducerName: "import_location_state",
      argsType: ImportLocationState.getTypeScriptAlgebraicType(),
    },
    import_loot_chest_desc: {
      reducerName: "import_loot_chest_desc",
      argsType: ImportLootChestDesc.getTypeScriptAlgebraicType(),
    },
    import_loot_chest_state: {
      reducerName: "import_loot_chest_state",
      argsType: ImportLootChestState.getTypeScriptAlgebraicType(),
    },
    import_loot_rarity_desc: {
      reducerName: "import_loot_rarity_desc",
      argsType: ImportLootRarityDesc.getTypeScriptAlgebraicType(),
    },
    import_loot_table_desc: {
      reducerName: "import_loot_table_desc",
      argsType: ImportLootTableDesc.getTypeScriptAlgebraicType(),
    },
    import_mobile_entity_state: {
      reducerName: "import_mobile_entity_state",
      argsType: ImportMobileEntityState.getTypeScriptAlgebraicType(),
    },
    import_mounting_state: {
      reducerName: "import_mounting_state",
      argsType: ImportMountingState.getTypeScriptAlgebraicType(),
    },
    import_npc_desc: {
      reducerName: "import_npc_desc",
      argsType: ImportNpcDesc.getTypeScriptAlgebraicType(),
    },
    import_npc_state: {
      reducerName: "import_npc_state",
      argsType: ImportNpcState.getTypeScriptAlgebraicType(),
    },
    import_onboarding_reward_desc: {
      reducerName: "import_onboarding_reward_desc",
      argsType: ImportOnboardingRewardDesc.getTypeScriptAlgebraicType(),
    },
    import_onboarding_state: {
      reducerName: "import_onboarding_state",
      argsType: ImportOnboardingState.getTypeScriptAlgebraicType(),
    },
    import_parameters_desc: {
      reducerName: "import_parameters_desc",
      argsType: ImportParametersDesc.getTypeScriptAlgebraicType(),
    },
    import_pathfinding_desc: {
      reducerName: "import_pathfinding_desc",
      argsType: ImportPathfindingDesc.getTypeScriptAlgebraicType(),
    },
    import_paved_tile_state: {
      reducerName: "import_paved_tile_state",
      argsType: ImportPavedTileState.getTypeScriptAlgebraicType(),
    },
    import_paving_tile_desc: {
      reducerName: "import_paving_tile_desc",
      argsType: ImportPavingTileDesc.getTypeScriptAlgebraicType(),
    },
    import_pillar_shaping_desc: {
      reducerName: "import_pillar_shaping_desc",
      argsType: ImportPillarShapingDesc.getTypeScriptAlgebraicType(),
    },
    import_player_action_desc: {
      reducerName: "import_player_action_desc",
      argsType: ImportPlayerActionDesc.getTypeScriptAlgebraicType(),
    },
    import_player_action_state: {
      reducerName: "import_player_action_state",
      argsType: ImportPlayerActionState.getTypeScriptAlgebraicType(),
    },
    import_player_housing_desc: {
      reducerName: "import_player_housing_desc",
      argsType: ImportPlayerHousingDesc.getTypeScriptAlgebraicType(),
    },
    import_player_prefs_state: {
      reducerName: "import_player_prefs_state",
      argsType: ImportPlayerPrefsState.getTypeScriptAlgebraicType(),
    },
    import_player_state: {
      reducerName: "import_player_state",
      argsType: ImportPlayerState.getTypeScriptAlgebraicType(),
    },
    import_portal_state: {
      reducerName: "import_portal_state",
      argsType: ImportPortalState.getTypeScriptAlgebraicType(),
    },
    import_private_parameters_desc: {
      reducerName: "import_private_parameters_desc",
      argsType: ImportPrivateParametersDesc.getTypeScriptAlgebraicType(),
    },
    import_progressive_action_state: {
      reducerName: "import_progressive_action_state",
      argsType: ImportProgressiveActionState.getTypeScriptAlgebraicType(),
    },
    import_project_site_state: {
      reducerName: "import_project_site_state",
      argsType: ImportProjectSiteState.getTypeScriptAlgebraicType(),
    },
    import_rent_state: {
      reducerName: "import_rent_state",
      argsType: ImportRentState.getTypeScriptAlgebraicType(),
    },
    import_reserved_name_desc: {
      reducerName: "import_reserved_name_desc",
      argsType: ImportReservedNameDesc.getTypeScriptAlgebraicType(),
    },
    import_resource_clump_desc: {
      reducerName: "import_resource_clump_desc",
      argsType: ImportResourceClumpDesc.getTypeScriptAlgebraicType(),
    },
    import_resource_count: {
      reducerName: "import_resource_count",
      argsType: ImportResourceCount.getTypeScriptAlgebraicType(),
    },
    import_resource_desc: {
      reducerName: "import_resource_desc",
      argsType: ImportResourceDesc.getTypeScriptAlgebraicType(),
    },
    import_resource_growth_recipe_desc: {
      reducerName: "import_resource_growth_recipe_desc",
      argsType: ImportResourceGrowthRecipeDesc.getTypeScriptAlgebraicType(),
    },
    import_resource_placement_recipe_desc: {
      reducerName: "import_resource_placement_recipe_desc",
      argsType: ImportResourcePlacementRecipeDesc.getTypeScriptAlgebraicType(),
    },
    import_resource_state: {
      reducerName: "import_resource_state",
      argsType: ImportResourceState.getTypeScriptAlgebraicType(),
    },
    import_resources_log: {
      reducerName: "import_resources_log",
      argsType: ImportResourcesLog.getTypeScriptAlgebraicType(),
    },
    import_satiation_state: {
      reducerName: "import_satiation_state",
      argsType: ImportSatiationState.getTypeScriptAlgebraicType(),
    },
    import_secondary_knowledge_desc: {
      reducerName: "import_secondary_knowledge_desc",
      argsType: ImportSecondaryKnowledgeDesc.getTypeScriptAlgebraicType(),
    },
    import_server_identity: {
      reducerName: "import_server_identity",
      argsType: ImportServerIdentity.getTypeScriptAlgebraicType(),
    },
    import_signed_in_player_state: {
      reducerName: "import_signed_in_player_state",
      argsType: ImportSignedInPlayerState.getTypeScriptAlgebraicType(),
    },
    import_skill_desc: {
      reducerName: "import_skill_desc",
      argsType: ImportSkillDesc.getTypeScriptAlgebraicType(),
    },
    import_stamina_state: {
      reducerName: "import_stamina_state",
      argsType: ImportStaminaState.getTypeScriptAlgebraicType(),
    },
    import_target_state: {
      reducerName: "import_target_state",
      argsType: ImportTargetState.getTypeScriptAlgebraicType(),
    },
    import_targetable_state: {
      reducerName: "import_targetable_state",
      argsType: ImportTargetableState.getTypeScriptAlgebraicType(),
    },
    import_targeting_matrix_desc: {
      reducerName: "import_targeting_matrix_desc",
      argsType: ImportTargetingMatrixDesc.getTypeScriptAlgebraicType(),
    },
    import_teleport_item_desc: {
      reducerName: "import_teleport_item_desc",
      argsType: ImportTeleportItemDesc.getTypeScriptAlgebraicType(),
    },
    import_terraform_recipe_desc: {
      reducerName: "import_terraform_recipe_desc",
      argsType: ImportTerraformRecipeDesc.getTypeScriptAlgebraicType(),
    },
    import_terrain_chunk_state: {
      reducerName: "import_terrain_chunk_state",
      argsType: ImportTerrainChunkState.getTypeScriptAlgebraicType(),
    },
    import_tool_desc: {
      reducerName: "import_tool_desc",
      argsType: ImportToolDesc.getTypeScriptAlgebraicType(),
    },
    import_tool_type_desc: {
      reducerName: "import_tool_type_desc",
      argsType: ImportToolTypeDesc.getTypeScriptAlgebraicType(),
    },
    import_trade_order_state: {
      reducerName: "import_trade_order_state",
      argsType: ImportTradeOrderState.getTypeScriptAlgebraicType(),
    },
    import_trade_session_state: {
      reducerName: "import_trade_session_state",
      argsType: ImportTradeSessionState.getTypeScriptAlgebraicType(),
    },
    import_traveler_task_desc: {
      reducerName: "import_traveler_task_desc",
      argsType: ImportTravelerTaskDesc.getTypeScriptAlgebraicType(),
    },
    import_traveler_trade_order_desc: {
      reducerName: "import_traveler_trade_order_desc",
      argsType: ImportTravelerTradeOrderDesc.getTypeScriptAlgebraicType(),
    },
    import_user_moderation_state: {
      reducerName: "import_user_moderation_state",
      argsType: ImportUserModerationState.getTypeScriptAlgebraicType(),
    },
    import_user_state: {
      reducerName: "import_user_state",
      argsType: ImportUserState.getTypeScriptAlgebraicType(),
    },
    import_vault_state: {
      reducerName: "import_vault_state",
      argsType: ImportVaultState.getTypeScriptAlgebraicType(),
    },
    import_wall_desc: {
      reducerName: "import_wall_desc",
      argsType: ImportWallDesc.getTypeScriptAlgebraicType(),
    },
    import_weapon_desc: {
      reducerName: "import_weapon_desc",
      argsType: ImportWeaponDesc.getTypeScriptAlgebraicType(),
    },
    import_weapon_type_desc: {
      reducerName: "import_weapon_type_desc",
      argsType: ImportWeaponTypeDesc.getTypeScriptAlgebraicType(),
    },
    import_world_region_name_state: {
      reducerName: "import_world_region_name_state",
      argsType: ImportWorldRegionNameState.getTypeScriptAlgebraicType(),
    },
    import_world_region_state: {
      reducerName: "import_world_region_state",
      argsType: ImportWorldRegionState.getTypeScriptAlgebraicType(),
    },
    insert_developer_identity: {
      reducerName: "insert_developer_identity",
      argsType: InsertDeveloperIdentity.getTypeScriptAlgebraicType(),
    },
    insert_resources_log: {
      reducerName: "insert_resources_log",
      argsType: InsertResourcesLog.getTypeScriptAlgebraicType(),
    },
    insert_terrain_chunk: {
      reducerName: "insert_terrain_chunk",
      argsType: InsertTerrainChunk.getTypeScriptAlgebraicType(),
    },
    interior_set_collapsed: {
      reducerName: "interior_set_collapsed",
      argsType: InteriorSetCollapsed.getTypeScriptAlgebraicType(),
    },
    interior_set_collapsed_scheduled: {
      reducerName: "interior_set_collapsed_scheduled",
      argsType: InteriorSetCollapsedScheduled.getTypeScriptAlgebraicType(),
    },
    inventory_create_personal: {
      reducerName: "inventory_create_personal",
      argsType: InventoryCreatePersonal.getTypeScriptAlgebraicType(),
    },
    inventory_sort: {
      reducerName: "inventory_sort",
      argsType: InventorySort.getTypeScriptAlgebraicType(),
    },
    item_convert: {
      reducerName: "item_convert",
      argsType: ItemConvert.getTypeScriptAlgebraicType(),
    },
    item_convert_start: {
      reducerName: "item_convert_start",
      argsType: ItemConvertStart.getTypeScriptAlgebraicType(),
    },
    item_drop: {
      reducerName: "item_drop",
      argsType: ItemDrop.getTypeScriptAlgebraicType(),
    },
    item_pick_up: {
      reducerName: "item_pick_up",
      argsType: ItemPickUp.getTypeScriptAlgebraicType(),
    },
    item_stack_move: {
      reducerName: "item_stack_move",
      argsType: ItemStackMove.getTypeScriptAlgebraicType(),
    },
    item_stack_move_all: {
      reducerName: "item_stack_move_all",
      argsType: ItemStackMoveAll.getTypeScriptAlgebraicType(),
    },
    item_stack_split: {
      reducerName: "item_stack_split",
      argsType: ItemStackSplit.getTypeScriptAlgebraicType(),
    },
    item_use: {
      reducerName: "item_use",
      argsType: ItemUse.getTypeScriptAlgebraicType(),
    },
    item_use_start: {
      reducerName: "item_use_start",
      argsType: ItemUseStart.getTypeScriptAlgebraicType(),
    },
    load_config: {
      reducerName: "load_config",
      argsType: LoadConfig.getTypeScriptAlgebraicType(),
    },
    log_claim_member_leaderboard: {
      reducerName: "log_claim_member_leaderboard",
      argsType: LogClaimMemberLeaderboard.getTypeScriptAlgebraicType(),
    },
    log_claim_tier_leaderboard: {
      reducerName: "log_claim_tier_leaderboard",
      argsType: LogClaimTierLeaderboard.getTypeScriptAlgebraicType(),
    },
    loot_chest_despawn: {
      reducerName: "loot_chest_despawn",
      argsType: LootChestDespawn.getTypeScriptAlgebraicType(),
    },
    loot_chest_spawn: {
      reducerName: "loot_chest_spawn",
      argsType: LootChestSpawn.getTypeScriptAlgebraicType(),
    },
    npc_ai_agent_loop: {
      reducerName: "npc_ai_agent_loop",
      argsType: NpcAiAgentLoop.getTypeScriptAlgebraicType(),
    },
    on_durability_zero: {
      reducerName: "on_durability_zero",
      argsType: OnDurabilityZero.getTypeScriptAlgebraicType(),
    },
    on_inter_module_message_processed: {
      reducerName: "on_inter_module_message_processed",
      argsType: OnInterModuleMessageProcessed.getTypeScriptAlgebraicType(),
    },
    order_cancel: {
      reducerName: "order_cancel",
      argsType: OrderCancel.getTypeScriptAlgebraicType(),
    },
    order_collect: {
      reducerName: "order_collect",
      argsType: OrderCollect.getTypeScriptAlgebraicType(),
    },
    order_edit_buy_order: {
      reducerName: "order_edit_buy_order",
      argsType: OrderEditBuyOrder.getTypeScriptAlgebraicType(),
    },
    order_edit_sell_order: {
      reducerName: "order_edit_sell_order",
      argsType: OrderEditSellOrder.getTypeScriptAlgebraicType(),
    },
    order_post_buy_order: {
      reducerName: "order_post_buy_order",
      argsType: OrderPostBuyOrder.getTypeScriptAlgebraicType(),
    },
    order_post_sell_order: {
      reducerName: "order_post_sell_order",
      argsType: OrderPostSellOrder.getTypeScriptAlgebraicType(),
    },
    passive_craft_cancel: {
      reducerName: "passive_craft_cancel",
      argsType: PassiveCraftCancel.getTypeScriptAlgebraicType(),
    },
    passive_craft_collect: {
      reducerName: "passive_craft_collect",
      argsType: PassiveCraftCollect.getTypeScriptAlgebraicType(),
    },
    passive_craft_collect_all: {
      reducerName: "passive_craft_collect_all",
      argsType: PassiveCraftCollectAll.getTypeScriptAlgebraicType(),
    },
    passive_craft_process: {
      reducerName: "passive_craft_process",
      argsType: PassiveCraftProcess.getTypeScriptAlgebraicType(),
    },
    passive_craft_queue: {
      reducerName: "passive_craft_queue",
      argsType: PassiveCraftQueue.getTypeScriptAlgebraicType(),
    },
    pause_play_timer: {
      reducerName: "pause_play_timer",
      argsType: PausePlayTimer.getTypeScriptAlgebraicType(),
    },
    paving_destroy_tile: {
      reducerName: "paving_destroy_tile",
      argsType: PavingDestroyTile.getTypeScriptAlgebraicType(),
    },
    paving_destroy_tile_start: {
      reducerName: "paving_destroy_tile_start",
      argsType: PavingDestroyTileStart.getTypeScriptAlgebraicType(),
    },
    paving_place_tile: {
      reducerName: "paving_place_tile",
      argsType: PavingPlaceTile.getTypeScriptAlgebraicType(),
    },
    paving_place_tile_start: {
      reducerName: "paving_place_tile_start",
      argsType: PavingPlaceTileStart.getTypeScriptAlgebraicType(),
    },
    permission_edit: {
      reducerName: "permission_edit",
      argsType: PermissionEdit.getTypeScriptAlgebraicType(),
    },
    pillar_shaping_destroy: {
      reducerName: "pillar_shaping_destroy",
      argsType: PillarShapingDestroy.getTypeScriptAlgebraicType(),
    },
    pillar_shaping_destroy_start: {
      reducerName: "pillar_shaping_destroy_start",
      argsType: PillarShapingDestroyStart.getTypeScriptAlgebraicType(),
    },
    pillar_shaping_place_pillar: {
      reducerName: "pillar_shaping_place_pillar",
      argsType: PillarShapingPlacePillar.getTypeScriptAlgebraicType(),
    },
    pillar_shaping_place_pillar_start: {
      reducerName: "pillar_shaping_place_pillar_start",
      argsType: PillarShapingPlacePillarStart.getTypeScriptAlgebraicType(),
    },
    player_action_cancel: {
      reducerName: "player_action_cancel",
      argsType: PlayerActionCancel.getTypeScriptAlgebraicType(),
    },
    player_cancel_region_transfer: {
      reducerName: "player_cancel_region_transfer",
      argsType: PlayerCancelRegionTransfer.getTypeScriptAlgebraicType(),
    },
    player_clear_action_state: {
      reducerName: "player_clear_action_state",
      argsType: PlayerClearActionState.getTypeScriptAlgebraicType(),
    },
    player_climb: {
      reducerName: "player_climb",
      argsType: PlayerClimb.getTypeScriptAlgebraicType(),
    },
    player_climb_start: {
      reducerName: "player_climb_start",
      argsType: PlayerClimbStart.getTypeScriptAlgebraicType(),
    },
    player_complete_task: {
      reducerName: "player_complete_task",
      argsType: PlayerCompleteTask.getTypeScriptAlgebraicType(),
    },
    player_death_start: {
      reducerName: "player_death_start",
      argsType: PlayerDeathStart.getTypeScriptAlgebraicType(),
    },
    player_dismiss_alert: {
      reducerName: "player_dismiss_alert",
      argsType: PlayerDismissAlert.getTypeScriptAlgebraicType(),
    },
    player_duel_initiate: {
      reducerName: "player_duel_initiate",
      argsType: PlayerDuelInitiate.getTypeScriptAlgebraicType(),
    },
    player_elevator_arrive: {
      reducerName: "player_elevator_arrive",
      argsType: PlayerElevatorArrive.getTypeScriptAlgebraicType(),
    },
    player_housing_change_entrance: {
      reducerName: "player_housing_change_entrance",
      argsType: PlayerHousingChangeEntrance.getTypeScriptAlgebraicType(),
    },
    player_housing_enter: {
      reducerName: "player_housing_enter",
      argsType: PlayerHousingEnter.getTypeScriptAlgebraicType(),
    },
    player_housing_evict_player: {
      reducerName: "player_housing_evict_player",
      argsType: PlayerHousingEvictPlayer.getTypeScriptAlgebraicType(),
    },
    player_housing_evict_player_complete: {
      reducerName: "player_housing_evict_player_complete",
      argsType: PlayerHousingEvictPlayerComplete.getTypeScriptAlgebraicType(),
    },
    player_housing_income_agent_loop: {
      reducerName: "player_housing_income_agent_loop",
      argsType: PlayerHousingIncomeAgentLoop.getTypeScriptAlgebraicType(),
    },
    player_housing_request_access: {
      reducerName: "player_housing_request_access",
      argsType: PlayerHousingRequestAccess.getTypeScriptAlgebraicType(),
    },
    player_housing_update: {
      reducerName: "player_housing_update",
      argsType: PlayerHousingUpdate.getTypeScriptAlgebraicType(),
    },
    player_move: {
      reducerName: "player_move",
      argsType: PlayerMove.getTypeScriptAlgebraicType(),
    },
    player_notification_event_reducer: {
      reducerName: "player_notification_event_reducer",
      argsType: PlayerNotificationEventReducer.getTypeScriptAlgebraicType(),
    },
    player_queue_join: {
      reducerName: "player_queue_join",
      argsType: PlayerQueueJoin.getTypeScriptAlgebraicType(),
    },
    player_queue_leave: {
      reducerName: "player_queue_leave",
      argsType: PlayerQueueLeave.getTypeScriptAlgebraicType(),
    },
    player_regen_agent_loop: {
      reducerName: "player_regen_agent_loop",
      argsType: PlayerRegenAgentLoop.getTypeScriptAlgebraicType(),
    },
    player_region_crossover: {
      reducerName: "player_region_crossover",
      argsType: PlayerRegionCrossover.getTypeScriptAlgebraicType(),
    },
    player_region_transfer_event_reducer: {
      reducerName: "player_region_transfer_event_reducer",
      argsType: PlayerRegionTransferEventReducer.getTypeScriptAlgebraicType(),
    },
    player_respawn: {
      reducerName: "player_respawn",
      argsType: PlayerRespawn.getTypeScriptAlgebraicType(),
    },
    player_set_default_deployable: {
      reducerName: "player_set_default_deployable",
      argsType: PlayerSetDefaultDeployable.getTypeScriptAlgebraicType(),
    },
    player_set_name_outcome_event_reducer: {
      reducerName: "player_set_name_outcome_event_reducer",
      argsType: PlayerSetNameOutcomeEventReducer.getTypeScriptAlgebraicType(),
    },
    player_teleport_home: {
      reducerName: "player_teleport_home",
      argsType: PlayerTeleportHome.getTypeScriptAlgebraicType(),
    },
    player_teleport_home_start: {
      reducerName: "player_teleport_home_start",
      argsType: PlayerTeleportHomeStart.getTypeScriptAlgebraicType(),
    },
    player_teleport_waystone: {
      reducerName: "player_teleport_waystone",
      argsType: PlayerTeleportWaystone.getTypeScriptAlgebraicType(),
    },
    player_teleport_waystone_start: {
      reducerName: "player_teleport_waystone_start",
      argsType: PlayerTeleportWaystoneStart.getTypeScriptAlgebraicType(),
    },
    player_use_elevator: {
      reducerName: "player_use_elevator",
      argsType: PlayerUseElevator.getTypeScriptAlgebraicType(),
    },
    player_vote_answer: {
      reducerName: "player_vote_answer",
      argsType: PlayerVoteAnswer.getTypeScriptAlgebraicType(),
    },
    player_vote_conclude: {
      reducerName: "player_vote_conclude",
      argsType: PlayerVoteConclude.getTypeScriptAlgebraicType(),
    },
    pocket_swap_contents: {
      reducerName: "pocket_swap_contents",
      argsType: PocketSwapContents.getTypeScriptAlgebraicType(),
    },
    portal_enter: {
      reducerName: "portal_enter",
      argsType: PortalEnter.getTypeScriptAlgebraicType(),
    },
    process_inter_module_message: {
      reducerName: "process_inter_module_message",
      argsType: ProcessInterModuleMessage.getTypeScriptAlgebraicType(),
    },
    project_site_add_materials: {
      reducerName: "project_site_add_materials",
      argsType: ProjectSiteAddMaterials.getTypeScriptAlgebraicType(),
    },
    project_site_advance_project: {
      reducerName: "project_site_advance_project",
      argsType: ProjectSiteAdvanceProject.getTypeScriptAlgebraicType(),
    },
    project_site_advance_project_start: {
      reducerName: "project_site_advance_project_start",
      argsType: ProjectSiteAdvanceProjectStart.getTypeScriptAlgebraicType(),
    },
    project_site_cancel: {
      reducerName: "project_site_cancel",
      argsType: ProjectSiteCancel.getTypeScriptAlgebraicType(),
    },
    project_site_place: {
      reducerName: "project_site_place",
      argsType: ProjectSitePlace.getTypeScriptAlgebraicType(),
    },
    region_popuplation_agent_loop: {
      reducerName: "region_popuplation_agent_loop",
      argsType: RegionPopuplationAgentLoop.getTypeScriptAlgebraicType(),
    },
    rent_add_listing: {
      reducerName: "rent_add_listing",
      argsType: RentAddListing.getTypeScriptAlgebraicType(),
    },
    rent_add_tenant: {
      reducerName: "rent_add_tenant",
      argsType: RentAddTenant.getTypeScriptAlgebraicType(),
    },
    rent_collect_eviction_fee: {
      reducerName: "rent_collect_eviction_fee",
      argsType: RentCollectEvictionFee.getTypeScriptAlgebraicType(),
    },
    rent_collector_agent_loop: {
      reducerName: "rent_collector_agent_loop",
      argsType: RentCollectorAgentLoop.getTypeScriptAlgebraicType(),
    },
    rent_deposit_coins: {
      reducerName: "rent_deposit_coins",
      argsType: RentDepositCoins.getTypeScriptAlgebraicType(),
    },
    rent_evict: {
      reducerName: "rent_evict",
      argsType: RentEvict.getTypeScriptAlgebraicType(),
    },
    rent_evict_term: {
      reducerName: "rent_evict_term",
      argsType: RentEvictTerm.getTypeScriptAlgebraicType(),
    },
    rent_purchase: {
      reducerName: "rent_purchase",
      argsType: RentPurchase.getTypeScriptAlgebraicType(),
    },
    rent_remove_tenant: {
      reducerName: "rent_remove_tenant",
      argsType: RentRemoveTenant.getTypeScriptAlgebraicType(),
    },
    rent_set_daily_rate: {
      reducerName: "rent_set_daily_rate",
      argsType: RentSetDailyRate.getTypeScriptAlgebraicType(),
    },
    rent_terminate: {
      reducerName: "rent_terminate",
      argsType: RentTerminate.getTypeScriptAlgebraicType(),
    },
    rent_unlist: {
      reducerName: "rent_unlist",
      argsType: RentUnlist.getTypeScriptAlgebraicType(),
    },
    report_chat_message: {
      reducerName: "report_chat_message",
      argsType: ReportChatMessage.getTypeScriptAlgebraicType(),
    },
    report_player: {
      reducerName: "report_player",
      argsType: ReportPlayer.getTypeScriptAlgebraicType(),
    },
    reset_chunk_index: {
      reducerName: "reset_chunk_index",
      argsType: ResetChunkIndex.getTypeScriptAlgebraicType(),
    },
    reset_chunk_index_with_dimension: {
      reducerName: "reset_chunk_index_with_dimension",
      argsType: ResetChunkIndexWithDimension.getTypeScriptAlgebraicType(),
    },
    reset_mobile_entity_position: {
      reducerName: "reset_mobile_entity_position",
      argsType: ResetMobileEntityPosition.getTypeScriptAlgebraicType(),
    },
    reset_onboarding: {
      reducerName: "reset_onboarding",
      argsType: ResetOnboarding.getTypeScriptAlgebraicType(),
    },
    resource_spawn_scheduled: {
      reducerName: "resource_spawn_scheduled",
      argsType: ResourceSpawnScheduled.getTypeScriptAlgebraicType(),
    },
    resources_regen: {
      reducerName: "resources_regen",
      argsType: ResourcesRegen.getTypeScriptAlgebraicType(),
    },
    respawn_interior_npcs: {
      reducerName: "respawn_interior_npcs",
      argsType: RespawnInteriorNpcs.getTypeScriptAlgebraicType(),
    },
    respawn_resource_in_chunk: {
      reducerName: "respawn_resource_in_chunk",
      argsType: RespawnResourceInChunk.getTypeScriptAlgebraicType(),
    },
    retrieve_lost_item: {
      reducerName: "retrieve_lost_item",
      argsType: RetrieveLostItem.getTypeScriptAlgebraicType(),
    },
    scroll_read: {
      reducerName: "scroll_read",
      argsType: ScrollRead.getTypeScriptAlgebraicType(),
    },
    search_for_closest_building: {
      reducerName: "search_for_closest_building",
      argsType: SearchForClosestBuilding.getTypeScriptAlgebraicType(),
    },
    search_for_closest_building_type: {
      reducerName: "search_for_closest_building_type",
      argsType: SearchForClosestBuildingType.getTypeScriptAlgebraicType(),
    },
    server_teleport_player: {
      reducerName: "server_teleport_player",
      argsType: ServerTeleportPlayer.getTypeScriptAlgebraicType(),
    },
    set_home: {
      reducerName: "set_home",
      argsType: SetHome.getTypeScriptAlgebraicType(),
    },
    sign_in: {
      reducerName: "sign_in",
      argsType: SignIn.getTypeScriptAlgebraicType(),
    },
    sign_out: {
      reducerName: "sign_out",
      argsType: SignOut.getTypeScriptAlgebraicType(),
    },
    sleep: {
      reducerName: "sleep",
      argsType: Sleep.getTypeScriptAlgebraicType(),
    },
    stage_achievement_desc: {
      reducerName: "stage_achievement_desc",
      argsType: StageAchievementDesc.getTypeScriptAlgebraicType(),
    },
    stage_alert_desc: {
      reducerName: "stage_alert_desc",
      argsType: StageAlertDesc.getTypeScriptAlgebraicType(),
    },
    stage_biome_desc: {
      reducerName: "stage_biome_desc",
      argsType: StageBiomeDesc.getTypeScriptAlgebraicType(),
    },
    stage_buff_desc: {
      reducerName: "stage_buff_desc",
      argsType: StageBuffDesc.getTypeScriptAlgebraicType(),
    },
    stage_buff_type_desc: {
      reducerName: "stage_buff_type_desc",
      argsType: StageBuffTypeDesc.getTypeScriptAlgebraicType(),
    },
    stage_building_claim_desc: {
      reducerName: "stage_building_claim_desc",
      argsType: StageBuildingClaimDesc.getTypeScriptAlgebraicType(),
    },
    stage_building_desc: {
      reducerName: "stage_building_desc",
      argsType: StageBuildingDesc.getTypeScriptAlgebraicType(),
    },
    stage_building_portal_desc: {
      reducerName: "stage_building_portal_desc",
      argsType: StageBuildingPortalDesc.getTypeScriptAlgebraicType(),
    },
    stage_building_repairs_desc: {
      reducerName: "stage_building_repairs_desc",
      argsType: StageBuildingRepairsDesc.getTypeScriptAlgebraicType(),
    },
    stage_building_spawn_desc: {
      reducerName: "stage_building_spawn_desc",
      argsType: StageBuildingSpawnDesc.getTypeScriptAlgebraicType(),
    },
    stage_building_type_desc: {
      reducerName: "stage_building_type_desc",
      argsType: StageBuildingTypeDesc.getTypeScriptAlgebraicType(),
    },
    stage_cargo_desc: {
      reducerName: "stage_cargo_desc",
      argsType: StageCargoDesc.getTypeScriptAlgebraicType(),
    },
    stage_character_stat_desc: {
      reducerName: "stage_character_stat_desc",
      argsType: StageCharacterStatDesc.getTypeScriptAlgebraicType(),
    },
    stage_chest_rarity_desc: {
      reducerName: "stage_chest_rarity_desc",
      argsType: StageChestRarityDesc.getTypeScriptAlgebraicType(),
    },
    stage_claim_tech_desc: {
      reducerName: "stage_claim_tech_desc",
      argsType: StageClaimTechDesc.getTypeScriptAlgebraicType(),
    },
    stage_claim_tile_cost: {
      reducerName: "stage_claim_tile_cost",
      argsType: StageClaimTileCost.getTypeScriptAlgebraicType(),
    },
    stage_climb_requirement_desc: {
      reducerName: "stage_climb_requirement_desc",
      argsType: StageClimbRequirementDesc.getTypeScriptAlgebraicType(),
    },
    stage_clothing_desc: {
      reducerName: "stage_clothing_desc",
      argsType: StageClothingDesc.getTypeScriptAlgebraicType(),
    },
    stage_collectible_desc: {
      reducerName: "stage_collectible_desc",
      argsType: StageCollectibleDesc.getTypeScriptAlgebraicType(),
    },
    stage_combat_action_desc: {
      reducerName: "stage_combat_action_desc",
      argsType: StageCombatActionDesc.getTypeScriptAlgebraicType(),
    },
    stage_construction_recipe_desc: {
      reducerName: "stage_construction_recipe_desc",
      argsType: StageConstructionRecipeDesc.getTypeScriptAlgebraicType(),
    },
    stage_crafting_recipe_desc: {
      reducerName: "stage_crafting_recipe_desc",
      argsType: StageCraftingRecipeDesc.getTypeScriptAlgebraicType(),
    },
    stage_deconstruction_recipe_desc: {
      reducerName: "stage_deconstruction_recipe_desc",
      argsType: StageDeconstructionRecipeDesc.getTypeScriptAlgebraicType(),
    },
    stage_deployable_desc: {
      reducerName: "stage_deployable_desc",
      argsType: StageDeployableDesc.getTypeScriptAlgebraicType(),
    },
    stage_distant_visible_entity_desc: {
      reducerName: "stage_distant_visible_entity_desc",
      argsType: StageDistantVisibleEntityDesc.getTypeScriptAlgebraicType(),
    },
    stage_elevator_desc: {
      reducerName: "stage_elevator_desc",
      argsType: StageElevatorDesc.getTypeScriptAlgebraicType(),
    },
    stage_emote_desc: {
      reducerName: "stage_emote_desc",
      argsType: StageEmoteDesc.getTypeScriptAlgebraicType(),
    },
    stage_empire_colors_desc: {
      reducerName: "stage_empire_colors_desc",
      argsType: StageEmpireColorsDesc.getTypeScriptAlgebraicType(),
    },
    stage_empire_icon_desc: {
      reducerName: "stage_empire_icon_desc",
      argsType: StageEmpireIconDesc.getTypeScriptAlgebraicType(),
    },
    stage_empire_notification_desc: {
      reducerName: "stage_empire_notification_desc",
      argsType: StageEmpireNotificationDesc.getTypeScriptAlgebraicType(),
    },
    stage_empire_rank_desc: {
      reducerName: "stage_empire_rank_desc",
      argsType: StageEmpireRankDesc.getTypeScriptAlgebraicType(),
    },
    stage_empire_supplies_desc: {
      reducerName: "stage_empire_supplies_desc",
      argsType: StageEmpireSuppliesDesc.getTypeScriptAlgebraicType(),
    },
    stage_empire_territory_desc: {
      reducerName: "stage_empire_territory_desc",
      argsType: StageEmpireTerritoryDesc.getTypeScriptAlgebraicType(),
    },
    stage_enemy_ai_params_desc: {
      reducerName: "stage_enemy_ai_params_desc",
      argsType: StageEnemyAiParamsDesc.getTypeScriptAlgebraicType(),
    },
    stage_enemy_desc: {
      reducerName: "stage_enemy_desc",
      argsType: StageEnemyDesc.getTypeScriptAlgebraicType(),
    },
    stage_environment_debuff_desc: {
      reducerName: "stage_environment_debuff_desc",
      argsType: StageEnvironmentDebuffDesc.getTypeScriptAlgebraicType(),
    },
    stage_equipment_desc: {
      reducerName: "stage_equipment_desc",
      argsType: StageEquipmentDesc.getTypeScriptAlgebraicType(),
    },
    stage_extraction_recipe_desc: {
      reducerName: "stage_extraction_recipe_desc",
      argsType: StageExtractionRecipeDesc.getTypeScriptAlgebraicType(),
    },
    stage_food_desc: {
      reducerName: "stage_food_desc",
      argsType: StageFoodDesc.getTypeScriptAlgebraicType(),
    },
    stage_gate_desc: {
      reducerName: "stage_gate_desc",
      argsType: StageGateDesc.getTypeScriptAlgebraicType(),
    },
    stage_hexite_exchange_entry_desc: {
      reducerName: "stage_hexite_exchange_entry_desc",
      argsType: StageHexiteExchangeEntryDesc.getTypeScriptAlgebraicType(),
    },
    stage_interior_environment_desc: {
      reducerName: "stage_interior_environment_desc",
      argsType: StageInteriorEnvironmentDesc.getTypeScriptAlgebraicType(),
    },
    stage_interior_instance_desc: {
      reducerName: "stage_interior_instance_desc",
      argsType: StageInteriorInstanceDesc.getTypeScriptAlgebraicType(),
    },
    stage_interior_network_desc: {
      reducerName: "stage_interior_network_desc",
      argsType: StageInteriorNetworkDesc.getTypeScriptAlgebraicType(),
    },
    stage_interior_portal_connections_desc: {
      reducerName: "stage_interior_portal_connections_desc",
      argsType: StageInteriorPortalConnectionsDesc.getTypeScriptAlgebraicType(),
    },
    stage_interior_shape_desc: {
      reducerName: "stage_interior_shape_desc",
      argsType: StageInteriorShapeDesc.getTypeScriptAlgebraicType(),
    },
    stage_interior_spawn_desc: {
      reducerName: "stage_interior_spawn_desc",
      argsType: StageInteriorSpawnDesc.getTypeScriptAlgebraicType(),
    },
    stage_item_conversion_recipe_desc: {
      reducerName: "stage_item_conversion_recipe_desc",
      argsType: StageItemConversionRecipeDesc.getTypeScriptAlgebraicType(),
    },
    stage_item_desc: {
      reducerName: "stage_item_desc",
      argsType: StageItemDesc.getTypeScriptAlgebraicType(),
    },
    stage_item_list_desc: {
      reducerName: "stage_item_list_desc",
      argsType: StageItemListDesc.getTypeScriptAlgebraicType(),
    },
    stage_knowledge_scroll_desc: {
      reducerName: "stage_knowledge_scroll_desc",
      argsType: StageKnowledgeScrollDesc.getTypeScriptAlgebraicType(),
    },
    stage_knowledge_scroll_type_desc: {
      reducerName: "stage_knowledge_scroll_type_desc",
      argsType: StageKnowledgeScrollTypeDesc.getTypeScriptAlgebraicType(),
    },
    stage_knowledge_stat_modifier_desc: {
      reducerName: "stage_knowledge_stat_modifier_desc",
      argsType: StageKnowledgeStatModifierDesc.getTypeScriptAlgebraicType(),
    },
    stage_loot_chest_desc: {
      reducerName: "stage_loot_chest_desc",
      argsType: StageLootChestDesc.getTypeScriptAlgebraicType(),
    },
    stage_loot_rarity_desc: {
      reducerName: "stage_loot_rarity_desc",
      argsType: StageLootRarityDesc.getTypeScriptAlgebraicType(),
    },
    stage_loot_table_desc: {
      reducerName: "stage_loot_table_desc",
      argsType: StageLootTableDesc.getTypeScriptAlgebraicType(),
    },
    stage_npc_desc: {
      reducerName: "stage_npc_desc",
      argsType: StageNpcDesc.getTypeScriptAlgebraicType(),
    },
    stage_onboarding_reward_desc: {
      reducerName: "stage_onboarding_reward_desc",
      argsType: StageOnboardingRewardDesc.getTypeScriptAlgebraicType(),
    },
    stage_parameters_desc: {
      reducerName: "stage_parameters_desc",
      argsType: StageParametersDesc.getTypeScriptAlgebraicType(),
    },
    stage_pathfinding_desc: {
      reducerName: "stage_pathfinding_desc",
      argsType: StagePathfindingDesc.getTypeScriptAlgebraicType(),
    },
    stage_paving_tile_desc: {
      reducerName: "stage_paving_tile_desc",
      argsType: StagePavingTileDesc.getTypeScriptAlgebraicType(),
    },
    stage_pillar_shaping_desc: {
      reducerName: "stage_pillar_shaping_desc",
      argsType: StagePillarShapingDesc.getTypeScriptAlgebraicType(),
    },
    stage_player_action_desc: {
      reducerName: "stage_player_action_desc",
      argsType: StagePlayerActionDesc.getTypeScriptAlgebraicType(),
    },
    stage_player_housing_desc: {
      reducerName: "stage_player_housing_desc",
      argsType: StagePlayerHousingDesc.getTypeScriptAlgebraicType(),
    },
    stage_private_parameters_desc: {
      reducerName: "stage_private_parameters_desc",
      argsType: StagePrivateParametersDesc.getTypeScriptAlgebraicType(),
    },
    stage_reserved_name_desc: {
      reducerName: "stage_reserved_name_desc",
      argsType: StageReservedNameDesc.getTypeScriptAlgebraicType(),
    },
    stage_resource_clump_desc: {
      reducerName: "stage_resource_clump_desc",
      argsType: StageResourceClumpDesc.getTypeScriptAlgebraicType(),
    },
    stage_resource_desc: {
      reducerName: "stage_resource_desc",
      argsType: StageResourceDesc.getTypeScriptAlgebraicType(),
    },
    stage_resource_growth_recipe_desc: {
      reducerName: "stage_resource_growth_recipe_desc",
      argsType: StageResourceGrowthRecipeDesc.getTypeScriptAlgebraicType(),
    },
    stage_resource_placement_recipe_desc: {
      reducerName: "stage_resource_placement_recipe_desc",
      argsType: StageResourcePlacementRecipeDesc.getTypeScriptAlgebraicType(),
    },
    stage_secondary_knowledge_desc: {
      reducerName: "stage_secondary_knowledge_desc",
      argsType: StageSecondaryKnowledgeDesc.getTypeScriptAlgebraicType(),
    },
    stage_skill_desc: {
      reducerName: "stage_skill_desc",
      argsType: StageSkillDesc.getTypeScriptAlgebraicType(),
    },
    stage_targeting_matrix_desc: {
      reducerName: "stage_targeting_matrix_desc",
      argsType: StageTargetingMatrixDesc.getTypeScriptAlgebraicType(),
    },
    stage_teleport_item_desc: {
      reducerName: "stage_teleport_item_desc",
      argsType: StageTeleportItemDesc.getTypeScriptAlgebraicType(),
    },
    stage_terraform_recipe_desc: {
      reducerName: "stage_terraform_recipe_desc",
      argsType: StageTerraformRecipeDesc.getTypeScriptAlgebraicType(),
    },
    stage_tool_desc: {
      reducerName: "stage_tool_desc",
      argsType: StageToolDesc.getTypeScriptAlgebraicType(),
    },
    stage_tool_type_desc: {
      reducerName: "stage_tool_type_desc",
      argsType: StageToolTypeDesc.getTypeScriptAlgebraicType(),
    },
    stage_traveler_task_desc: {
      reducerName: "stage_traveler_task_desc",
      argsType: StageTravelerTaskDesc.getTypeScriptAlgebraicType(),
    },
    stage_traveler_trade_order_desc: {
      reducerName: "stage_traveler_trade_order_desc",
      argsType: StageTravelerTradeOrderDesc.getTypeScriptAlgebraicType(),
    },
    stage_wall_desc: {
      reducerName: "stage_wall_desc",
      argsType: StageWallDesc.getTypeScriptAlgebraicType(),
    },
    stage_weapon_desc: {
      reducerName: "stage_weapon_desc",
      argsType: StageWeaponDesc.getTypeScriptAlgebraicType(),
    },
    stage_weapon_type_desc: {
      reducerName: "stage_weapon_type_desc",
      argsType: StageWeaponTypeDesc.getTypeScriptAlgebraicType(),
    },
    start_agents: {
      reducerName: "start_agents",
      argsType: StartAgents.getTypeScriptAlgebraicType(),
    },
    start_generating_world: {
      reducerName: "start_generating_world",
      argsType: StartGeneratingWorld.getTypeScriptAlgebraicType(),
    },
    start_onboarding_quest: {
      reducerName: "start_onboarding_quest",
      argsType: StartOnboardingQuest.getTypeScriptAlgebraicType(),
    },
    starving_agent_loop: {
      reducerName: "starving_agent_loop",
      argsType: StarvingAgentLoop.getTypeScriptAlgebraicType(),
    },
    stop_agents: {
      reducerName: "stop_agents",
      argsType: StopAgents.getTypeScriptAlgebraicType(),
    },
    synchronize_time: {
      reducerName: "synchronize_time",
      argsType: SynchronizeTime.getTypeScriptAlgebraicType(),
    },
    target_update: {
      reducerName: "target_update",
      argsType: TargetUpdate.getTypeScriptAlgebraicType(),
    },
    teleportation_energy_regen_agent_loop: {
      reducerName: "teleportation_energy_regen_agent_loop",
      argsType: TeleportationEnergyRegenAgentLoop.getTypeScriptAlgebraicType(),
    },
    terraform: {
      reducerName: "terraform",
      argsType: Terraform.getTypeScriptAlgebraicType(),
    },
    terraform_cancel: {
      reducerName: "terraform_cancel",
      argsType: TerraformCancel.getTypeScriptAlgebraicType(),
    },
    terraform_set_final_target: {
      reducerName: "terraform_set_final_target",
      argsType: TerraformSetFinalTarget.getTypeScriptAlgebraicType(),
    },
    terraform_start: {
      reducerName: "terraform_start",
      argsType: TerraformStart.getTypeScriptAlgebraicType(),
    },
    trade_accept: {
      reducerName: "trade_accept",
      argsType: TradeAccept.getTypeScriptAlgebraicType(),
    },
    trade_accept_session: {
      reducerName: "trade_accept_session",
      argsType: TradeAcceptSession.getTypeScriptAlgebraicType(),
    },
    trade_add_item: {
      reducerName: "trade_add_item",
      argsType: TradeAddItem.getTypeScriptAlgebraicType(),
    },
    trade_cancel_server: {
      reducerName: "trade_cancel_server",
      argsType: TradeCancelServer.getTypeScriptAlgebraicType(),
    },
    trade_decline: {
      reducerName: "trade_decline",
      argsType: TradeDecline.getTypeScriptAlgebraicType(),
    },
    trade_decline_session: {
      reducerName: "trade_decline_session",
      argsType: TradeDeclineSession.getTypeScriptAlgebraicType(),
    },
    trade_initiate_session: {
      reducerName: "trade_initiate_session",
      argsType: TradeInitiateSession.getTypeScriptAlgebraicType(),
    },
    trade_remove_item: {
      reducerName: "trade_remove_item",
      argsType: TradeRemoveItem.getTypeScriptAlgebraicType(),
    },
    trade_sessions_agent_loop: {
      reducerName: "trade_sessions_agent_loop",
      argsType: TradeSessionsAgentLoop.getTypeScriptAlgebraicType(),
    },
    trade_swap_pockets: {
      reducerName: "trade_swap_pockets",
      argsType: TradeSwapPockets.getTypeScriptAlgebraicType(),
    },
    transfer_player_delayed: {
      reducerName: "transfer_player_delayed",
      argsType: TransferPlayerDelayed.getTypeScriptAlgebraicType(),
    },
    traveler_task_agent_loop: {
      reducerName: "traveler_task_agent_loop",
      argsType: TravelerTaskAgentLoop.getTypeScriptAlgebraicType(),
    },
    update_scheduled_timers_from_static_data: {
      reducerName: "update_scheduled_timers_from_static_data",
      argsType: UpdateScheduledTimersFromStaticData.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.3.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AchievementClaim", args: AchievementClaim }
| { name: "AcquireKnowledgeFromEntities", args: AcquireKnowledgeFromEntities }
| { name: "AdminAlpha3CompleteOnboarding", args: AdminAlpha3CompleteOnboarding }
| { name: "AdminAlpha3ResetOnboardingToFifthTempleQuest", args: AdminAlpha3ResetOnboardingToFifthTempleQuest }
| { name: "AdminAlpha3ResetOnboardingToFirstExpandQuest", args: AdminAlpha3ResetOnboardingToFirstExpandQuest }
| { name: "AdminAlpha3ResetOnboardingToFirstTempleQuest", args: AdminAlpha3ResetOnboardingToFirstTempleQuest }
| { name: "AdminAlpha3ResetOnboardingToFourthExpandQuest", args: AdminAlpha3ResetOnboardingToFourthExpandQuest }
| { name: "AdminAlpha3ResetOnboardingToFourthTempleQuest", args: AdminAlpha3ResetOnboardingToFourthTempleQuest }
| { name: "AdminAlpha3ResetOnboardingToSecondExpandQuest", args: AdminAlpha3ResetOnboardingToSecondExpandQuest }
| { name: "AdminAlpha3ResetOnboardingToSecondTempleQuest", args: AdminAlpha3ResetOnboardingToSecondTempleQuest }
| { name: "AdminAlpha3ResetOnboardingToThirdExpandQuest", args: AdminAlpha3ResetOnboardingToThirdExpandQuest }
| { name: "AdminAlpha3ResetOnboardingToThirdTempleQuest", args: AdminAlpha3ResetOnboardingToThirdTempleQuest }
| { name: "AdminBroadcastMsgRegion", args: AdminBroadcastMsgRegion }
| { name: "AdminCapSkill", args: AdminCapSkill }
| { name: "AdminCheckClosedListingStates", args: AdminCheckClosedListingStates }
| { name: "AdminClearAllResources", args: AdminClearAllResources }
| { name: "AdminClearChunkResources", args: AdminClearChunkResources }
| { name: "AdminCollapseRuin", args: AdminCollapseRuin }
| { name: "AdminCollapseRuins", args: AdminCollapseRuins }
| { name: "AdminCompleteAllPassiveCrafts", args: AdminCompleteAllPassiveCrafts }
| { name: "AdminCountInventoryItems", args: AdminCountInventoryItems }
| { name: "AdminCreateChatMessage", args: AdminCreateChatMessage }
| { name: "AdminCreatePlayerReport", args: AdminCreatePlayerReport }
| { name: "AdminDeleteAllItemsOfType", args: AdminDeleteAllItemsOfType }
| { name: "AdminDeleteChatMessage", args: AdminDeleteChatMessage }
| { name: "AdminDespawnOverworldEnemies", args: AdminDespawnOverworldEnemies }
| { name: "AdminFindAllPlayersWithItem", args: AdminFindAllPlayersWithItem }
| { name: "AdminFindAllPlayersWithItemAboveQuantity", args: AdminFindAllPlayersWithItemAboveQuantity }
| { name: "AdminFindItemsInInventories", args: AdminFindItemsInInventories }
| { name: "AdminFindItemsInTrades", args: AdminFindItemsInTrades }
| { name: "AdminGrantCollectibles", args: AdminGrantCollectibles }
| { name: "AdminModifyChatMessage", args: AdminModifyChatMessage }
| { name: "AdminRenameBuilding", args: AdminRenameBuilding }
| { name: "AdminRenameBuildingCoord", args: AdminRenameBuildingCoord }
| { name: "AdminRenameBuildingEntity", args: AdminRenameBuildingEntity }
| { name: "AdminRenameClaim", args: AdminRenameClaim }
| { name: "AdminRenameClaimEntity", args: AdminRenameClaimEntity }
| { name: "AdminRenameDeployable", args: AdminRenameDeployable }
| { name: "AdminRenameDeployableEntity", args: AdminRenameDeployableEntity }
| { name: "AdminResetAllHerdLocations", args: AdminResetAllHerdLocations }
| { name: "AdminResetHerdLocations", args: AdminResetHerdLocations }
| { name: "AdminResetOnboardingCompletely", args: AdminResetOnboardingCompletely }
| { name: "AdminResourceForceRegen", args: AdminResourceForceRegen }
| { name: "AdminResourcesDeleteVerySlow", args: AdminResourcesDeleteVerySlow }
| { name: "AdminResourcesLogCount", args: AdminResourcesLogCount }
| { name: "AdminRestoreAllCollapsedRuins", args: AdminRestoreAllCollapsedRuins }
| { name: "AdminRestorePlayerState", args: AdminRestorePlayerState }
| { name: "AdminRestorePlayerStateScheduled", args: AdminRestorePlayerStateScheduled }
| { name: "AdminSetSignText", args: AdminSetSignText }
| { name: "AdminSetSignTextCoord", args: AdminSetSignTextCoord }
| { name: "AdminSetSignTextEntity", args: AdminSetSignTextEntity }
| { name: "AdminSignOut", args: AdminSignOut }
| { name: "AdminSignOutAllRegion", args: AdminSignOutAllRegion }
| { name: "AdminSignOutString", args: AdminSignOutString }
| { name: "AdminUpdateHousingPortals", args: AdminUpdateHousingPortals }
| { name: "AdminUpdateLightSourceStates", args: AdminUpdateLightSourceStates }
| { name: "Attack", args: Attack }
| { name: "AttackImpact", args: AttackImpact }
| { name: "AttackScheduled", args: AttackScheduled }
| { name: "AttackStart", args: AttackStart }
| { name: "AutoLogoutLoop", args: AutoLogoutLoop }
| { name: "BarterStallOrderAccept", args: BarterStallOrderAccept }
| { name: "BarterStallOrderCreate", args: BarterStallOrderCreate }
| { name: "BarterStallOrderDelete", args: BarterStallOrderDelete }
| { name: "BarterStallSetMarketModeEnabled", args: BarterStallSetMarketModeEnabled }
| { name: "BlueprintPlace", args: BlueprintPlace }
| { name: "BuildingDecayAgentLoop", args: BuildingDecayAgentLoop }
| { name: "BuildingDeconstruct", args: BuildingDeconstruct }
| { name: "BuildingDeconstructStart", args: BuildingDeconstructStart }
| { name: "BuildingDespawn", args: BuildingDespawn }
| { name: "BuildingMove", args: BuildingMove }
| { name: "BuildingRepair", args: BuildingRepair }
| { name: "BuildingRepairStart", args: BuildingRepairStart }
| { name: "BuildingSetNickname", args: BuildingSetNickname }
| { name: "BuildingSetSignText", args: BuildingSetSignText }
| { name: "ChatCleanupAgentInsert", args: ChatCleanupAgentInsert }
| { name: "ChatCleanupAgentLoop", args: ChatCleanupAgentLoop }
| { name: "ChatPostMessage", args: ChatPostMessage }
| { name: "CheatBuildingMove", args: CheatBuildingMove }
| { name: "CheatBuildingPlace", args: CheatBuildingPlace }
| { name: "CheatCargoGrant", args: CheatCargoGrant }
| { name: "CheatClaimTakeOwnership", args: CheatClaimTakeOwnership }
| { name: "CheatClaimTotemAddSupplies", args: CheatClaimTotemAddSupplies }
| { name: "CheatClaimTotemCompleteCurrentResearch", args: CheatClaimTotemCompleteCurrentResearch }
| { name: "CheatClaimTotemResearchAll", args: CheatClaimTotemResearchAll }
| { name: "CheatClearBuffsAndDebuffs", args: CheatClearBuffsAndDebuffs }
| { name: "CheatCompendiumPlaceEnemy", args: CheatCompendiumPlaceEnemy }
| { name: "CheatCompendiumPlaceResource", args: CheatCompendiumPlaceResource }
| { name: "CheatDeleteItem", args: CheatDeleteItem }
| { name: "CheatDeployableStore", args: CheatDeployableStore }
| { name: "CheatDiscoverMap", args: CheatDiscoverMap }
| { name: "CheatExperienceGrant", args: CheatExperienceGrant }
| { name: "CheatGrantKnowledge", args: CheatGrantKnowledge }
| { name: "CheatGrantTeleportEnergy", args: CheatGrantTeleportEnergy }
| { name: "CheatItemStackGrant", args: CheatItemStackGrant }
| { name: "CheatItemStackGrantAndEquip", args: CheatItemStackGrantAndEquip }
| { name: "CheatKill", args: CheatKill }
| { name: "CheatPavingAddTile", args: CheatPavingAddTile }
| { name: "CheatPavingDestroy", args: CheatPavingDestroy }
| { name: "CheatPillarShapingAddPillar", args: CheatPillarShapingAddPillar }
| { name: "CheatPillarShapingDestroy", args: CheatPillarShapingDestroy }
| { name: "CheatProjectSiteAddAllMaterials", args: CheatProjectSiteAddAllMaterials }
| { name: "CheatRemoveEntityBuilding", args: CheatRemoveEntityBuilding }
| { name: "CheatRemoveEntityEnemy", args: CheatRemoveEntityEnemy }
| { name: "CheatRemoveEntityResource", args: CheatRemoveEntityResource }
| { name: "CheatRemoveItemQuantity", args: CheatRemoveItemQuantity }
| { name: "CheatSetAiDebugState", args: CheatSetAiDebugState }
| { name: "CheatSpawnLootChest", args: CheatSpawnLootChest }
| { name: "CheatTeleportFloat", args: CheatTeleportFloat }
| { name: "CheatTerraform", args: CheatTerraform }
| { name: "CheatToggleActiveCollectible", args: CheatToggleActiveCollectible }
| { name: "CheatWarp", args: CheatWarp }
| { name: "ClaimAddMember", args: ClaimAddMember }
| { name: "ClaimAddRecruitment", args: ClaimAddRecruitment }
| { name: "ClaimAddTile", args: ClaimAddTile }
| { name: "ClaimApplyForRecruitment", args: ClaimApplyForRecruitment }
| { name: "ClaimLeave", args: ClaimLeave }
| { name: "ClaimPurchaseSuppliesFromPlayer", args: ClaimPurchaseSuppliesFromPlayer }
| { name: "ClaimRemoveMember", args: ClaimRemoveMember }
| { name: "ClaimRemoveRecruitment", args: ClaimRemoveRecruitment }
| { name: "ClaimRemoveTile", args: ClaimRemoveTile }
| { name: "ClaimRename", args: ClaimRename }
| { name: "ClaimResupply", args: ClaimResupply }
| { name: "ClaimResupplyStart", args: ClaimResupplyStart }
| { name: "ClaimSetMemberPermissions", args: ClaimSetMemberPermissions }
| { name: "ClaimSetPurchaseSupplyPrice", args: ClaimSetPurchaseSupplyPrice }
| { name: "ClaimSetPurchaseSupplyThreshold", args: ClaimSetPurchaseSupplyThreshold }
| { name: "ClaimTakeOwnership", args: ClaimTakeOwnership }
| { name: "ClaimTechCancel", args: ClaimTechCancel }
| { name: "ClaimTechLearn", args: ClaimTechLearn }
| { name: "ClaimTechUnlockTech", args: ClaimTechUnlockTech }
| { name: "ClaimTransferOwnership", args: ClaimTransferOwnership }
| { name: "ClaimTreasuryDeposit", args: ClaimTreasuryDeposit }
| { name: "ClaimWithdrawFromTreasury", args: ClaimWithdrawFromTreasury }
| { name: "ClearStagedStaticData", args: ClearStagedStaticData }
| { name: "ClosedListingCollect", args: ClosedListingCollect }
| { name: "CollectStatsReducer", args: CollectStatsReducer }
| { name: "CollectibleActivate", args: CollectibleActivate }
| { name: "CommitStagedStaticData", args: CommitStagedStaticData }
| { name: "CompleteOnboardingQuest", args: CompleteOnboardingQuest }
| { name: "CompleteOnboardingState", args: CompleteOnboardingState }
| { name: "ConvertCollectibleToDeed", args: ConvertCollectibleToDeed }
| { name: "ConvertDeedToCollectible", args: ConvertDeedToCollectible }
| { name: "CraftCancel", args: CraftCancel }
| { name: "CraftCollect", args: CraftCollect }
| { name: "CraftCollectAll", args: CraftCollectAll }
| { name: "CraftContinue", args: CraftContinue }
| { name: "CraftContinueStart", args: CraftContinueStart }
| { name: "CraftInitiate", args: CraftInitiate }
| { name: "CraftInitiateStart", args: CraftInitiateStart }
| { name: "CraftSetPublic", args: CraftSetPublic }
| { name: "CurrentVersion", args: CurrentVersion }
| { name: "DayNightAgentLoop", args: DayNightAgentLoop }
| { name: "DeleteAllNpcs", args: DeleteAllNpcs }
| { name: "DeployableDeploy", args: DeployableDeploy }
| { name: "DeployableDeployStart", args: DeployableDeployStart }
| { name: "DeployableDismount", args: DeployableDismount }
| { name: "DeployableDismountScheduled", args: DeployableDismountScheduled }
| { name: "DeployableMount", args: DeployableMount }
| { name: "DeployableMove", args: DeployableMove }
| { name: "DeployableMoveOffBounds", args: DeployableMoveOffBounds }
| { name: "DeployableMoveOffClaim", args: DeployableMoveOffClaim }
| { name: "DeployableStore", args: DeployableStore }
| { name: "DeployableStoreStart", args: DeployableStoreStart }
| { name: "DestroyDimensionNetwork", args: DestroyDimensionNetwork }
| { name: "DevDeleteWorld", args: DevDeleteWorld }
| { name: "DiscoverEntities", args: DiscoverEntities }
| { name: "DroppedInventoryDespawn", args: DroppedInventoryDespawn }
| { name: "DroppedInventoryLoseOwnership", args: DroppedInventoryLoseOwnership }
| { name: "DuelAgentTimerLoop", args: DuelAgentTimerLoop }
| { name: "DuelDespawn", args: DuelDespawn }
| { name: "Eat", args: Eat }
| { name: "Emote", args: Emote }
| { name: "EmoteStart", args: EmoteStart }
| { name: "EmpireAddSiegeSupplies", args: EmpireAddSiegeSupplies }
| { name: "EmpireClaimJoin", args: EmpireClaimJoin }
| { name: "EmpireCollectHexiteCapsule", args: EmpireCollectHexiteCapsule }
| { name: "EmpireDeploySiegeEngine", args: EmpireDeploySiegeEngine }
| { name: "EmpireDeploySiegeEngineStart", args: EmpireDeploySiegeEngineStart }
| { name: "EmpireQueueSupplies", args: EmpireQueueSupplies }
| { name: "EmpireResupplyNode", args: EmpireResupplyNode }
| { name: "EmpireResupplyNodeStart", args: EmpireResupplyNodeStart }
| { name: "EmpireSiegeDepletedWatchtower", args: EmpireSiegeDepletedWatchtower }
| { name: "EndGracePeriod", args: EndGracePeriod }
| { name: "EnemyClearAggro", args: EnemyClearAggro }
| { name: "EnemyDespawn", args: EnemyDespawn }
| { name: "EnemyDespawnFromMobMonitor", args: EnemyDespawnFromMobMonitor }
| { name: "EnemyDespawnFromMobMonitorBatch", args: EnemyDespawnFromMobMonitorBatch }
| { name: "EnemyMove", args: EnemyMove }
| { name: "EnemyMoveBatch", args: EnemyMoveBatch }
| { name: "EnemyRegenAgentLoop", args: EnemyRegenAgentLoop }
| { name: "EnemySetHealth", args: EnemySetHealth }
| { name: "EnemySetHealthBatch", args: EnemySetHealthBatch }
| { name: "EnemySpawn", args: EnemySpawn }
| { name: "EnemySpawnBatch", args: EnemySpawnBatch }
| { name: "EnemySpawnLoot", args: EnemySpawnLoot }
| { name: "EnvironmentDebuffAgentLoop", args: EnvironmentDebuffAgentLoop }
| { name: "EquipmentAdd", args: EquipmentAdd }
| { name: "EquipmentRemove", args: EquipmentRemove }
| { name: "Extract", args: Extract }
| { name: "ExtractStart", args: ExtractStart }
| { name: "ForceStartAgents", args: ForceStartAgents }
| { name: "GenerateDevIsland", args: GenerateDevIsland }
| { name: "GenerateFlatWorld", args: GenerateFlatWorld }
| { name: "GenerateWorld", args: GenerateWorld }
| { name: "GrowthAgentLoop", args: GrowthAgentLoop }
| { name: "HideDeployable", args: HideDeployable }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "ImportAchievementDesc", args: ImportAchievementDesc }
| { name: "ImportActiveBuffState", args: ImportActiveBuffState }
| { name: "ImportAdminBroadcast", args: ImportAdminBroadcast }
| { name: "ImportAlertDesc", args: ImportAlertDesc }
| { name: "ImportAlertState", args: ImportAlertState }
| { name: "ImportAttackOutcomeState", args: ImportAttackOutcomeState }
| { name: "ImportBiomeDesc", args: ImportBiomeDesc }
| { name: "ImportBuffDesc", args: ImportBuffDesc }
| { name: "ImportBuffTypeDesc", args: ImportBuffTypeDesc }
| { name: "ImportBuildingClaimDesc", args: ImportBuildingClaimDesc }
| { name: "ImportBuildingDesc", args: ImportBuildingDesc }
| { name: "ImportBuildingPortalDesc", args: ImportBuildingPortalDesc }
| { name: "ImportBuildingRepairsDesc", args: ImportBuildingRepairsDesc }
| { name: "ImportBuildingSpawnDesc", args: ImportBuildingSpawnDesc }
| { name: "ImportBuildingState", args: ImportBuildingState }
| { name: "ImportBuildingTypeDesc", args: ImportBuildingTypeDesc }
| { name: "ImportCargoDesc", args: ImportCargoDesc }
| { name: "ImportCharacterStatDesc", args: ImportCharacterStatDesc }
| { name: "ImportCharacterStatsState", args: ImportCharacterStatsState }
| { name: "ImportChatMessageState", args: ImportChatMessageState }
| { name: "ImportChestRarityDesc", args: ImportChestRarityDesc }
| { name: "ImportClaimLocalState", args: ImportClaimLocalState }
| { name: "ImportClaimRecruitmentState", args: ImportClaimRecruitmentState }
| { name: "ImportClaimState", args: ImportClaimState }
| { name: "ImportClaimTechDesc", args: ImportClaimTechDesc }
| { name: "ImportClaimTechState", args: ImportClaimTechState }
| { name: "ImportClaimTileCost", args: ImportClaimTileCost }
| { name: "ImportClaimTileState", args: ImportClaimTileState }
| { name: "ImportClimbRequirementDesc", args: ImportClimbRequirementDesc }
| { name: "ImportClothingDesc", args: ImportClothingDesc }
| { name: "ImportCollectibleDesc", args: ImportCollectibleDesc }
| { name: "ImportCombatActionDesc", args: ImportCombatActionDesc }
| { name: "ImportCombatState", args: ImportCombatState }
| { name: "ImportConfig", args: ImportConfig }
| { name: "ImportConstructionRecipeDesc", args: ImportConstructionRecipeDesc }
| { name: "ImportCraftingRecipeDesc", args: ImportCraftingRecipeDesc }
| { name: "ImportDeconstructionRecipeDesc", args: ImportDeconstructionRecipeDesc }
| { name: "ImportDeployableDesc", args: ImportDeployableDesc }
| { name: "ImportDeployableState", args: ImportDeployableState }
| { name: "ImportDimensionDescriptionState", args: ImportDimensionDescriptionState }
| { name: "ImportDimensionNetworkDescriptionState", args: ImportDimensionNetworkDescriptionState }
| { name: "ImportDistantVisibleEntityDesc", args: ImportDistantVisibleEntityDesc }
| { name: "ImportDroppedInventoryState", args: ImportDroppedInventoryState }
| { name: "ImportElevatorDesc", args: ImportElevatorDesc }
| { name: "ImportEmoteDesc", args: ImportEmoteDesc }
| { name: "ImportEmpireColorsDesc", args: ImportEmpireColorsDesc }
| { name: "ImportEmpireIconDesc", args: ImportEmpireIconDesc }
| { name: "ImportEmpireNotificationDesc", args: ImportEmpireNotificationDesc }
| { name: "ImportEmpireRankDesc", args: ImportEmpireRankDesc }
| { name: "ImportEmpireSuppliesDesc", args: ImportEmpireSuppliesDesc }
| { name: "ImportEmpireTerritoryDesc", args: ImportEmpireTerritoryDesc }
| { name: "ImportEnemyAiParamsDesc", args: ImportEnemyAiParamsDesc }
| { name: "ImportEnemyDesc", args: ImportEnemyDesc }
| { name: "ImportEnemyState", args: ImportEnemyState }
| { name: "ImportEnvironmentDebuffDesc", args: ImportEnvironmentDebuffDesc }
| { name: "ImportEquipmentDesc", args: ImportEquipmentDesc }
| { name: "ImportEquipmentState", args: ImportEquipmentState }
| { name: "ImportExperienceState", args: ImportExperienceState }
| { name: "ImportExplorationChunksState", args: ImportExplorationChunksState }
| { name: "ImportExtractionRecipeDesc", args: ImportExtractionRecipeDesc }
| { name: "ImportFoodDesc", args: ImportFoodDesc }
| { name: "ImportFootprintTileState", args: ImportFootprintTileState }
| { name: "ImportGateDesc", args: ImportGateDesc }
| { name: "ImportGlobals", args: ImportGlobals }
| { name: "ImportGrowthState", args: ImportGrowthState }
| { name: "ImportHealthState", args: ImportHealthState }
| { name: "ImportHerdCache", args: ImportHerdCache }
| { name: "ImportHexiteExchangeEntryDesc", args: ImportHexiteExchangeEntryDesc }
| { name: "ImportIdentityRole", args: ImportIdentityRole }
| { name: "ImportInteriorCollapseTriggerState", args: ImportInteriorCollapseTriggerState }
| { name: "ImportInteriorEnvironmentDesc", args: ImportInteriorEnvironmentDesc }
| { name: "ImportInteriorInstanceDesc", args: ImportInteriorInstanceDesc }
| { name: "ImportInteriorNetworkDesc", args: ImportInteriorNetworkDesc }
| { name: "ImportInteriorPortalConnectionsDesc", args: ImportInteriorPortalConnectionsDesc }
| { name: "ImportInteriorShapeDesc", args: ImportInteriorShapeDesc }
| { name: "ImportInteriorSpawnDesc", args: ImportInteriorSpawnDesc }
| { name: "ImportInventoryState", args: ImportInventoryState }
| { name: "ImportItemConversionRecipeDesc", args: ImportItemConversionRecipeDesc }
| { name: "ImportItemDesc", args: ImportItemDesc }
| { name: "ImportItemListDesc", args: ImportItemListDesc }
| { name: "ImportKnowledgeAchievementState", args: ImportKnowledgeAchievementState }
| { name: "ImportKnowledgeBattleActionState", args: ImportKnowledgeBattleActionState }
| { name: "ImportKnowledgeBuildingState", args: ImportKnowledgeBuildingState }
| { name: "ImportKnowledgeCargoState", args: ImportKnowledgeCargoState }
| { name: "ImportKnowledgeConstructionState", args: ImportKnowledgeConstructionState }
| { name: "ImportKnowledgeCraftState", args: ImportKnowledgeCraftState }
| { name: "ImportKnowledgeDeployableState", args: ImportKnowledgeDeployableState }
| { name: "ImportKnowledgeEnemyState", args: ImportKnowledgeEnemyState }
| { name: "ImportKnowledgeExtractState", args: ImportKnowledgeExtractState }
| { name: "ImportKnowledgeItemState", args: ImportKnowledgeItemState }
| { name: "ImportKnowledgeLoreState", args: ImportKnowledgeLoreState }
| { name: "ImportKnowledgeNpcState", args: ImportKnowledgeNpcState }
| { name: "ImportKnowledgePavingState", args: ImportKnowledgePavingState }
| { name: "ImportKnowledgePillarShapingState", args: ImportKnowledgePillarShapingState }
| { name: "ImportKnowledgeResourcePlacementState", args: ImportKnowledgeResourcePlacementState }
| { name: "ImportKnowledgeResourceState", args: ImportKnowledgeResourceState }
| { name: "ImportKnowledgeRuinsState", args: ImportKnowledgeRuinsState }
| { name: "ImportKnowledgeScrollDesc", args: ImportKnowledgeScrollDesc }
| { name: "ImportKnowledgeScrollTypeDesc", args: ImportKnowledgeScrollTypeDesc }
| { name: "ImportKnowledgeSecondaryState", args: ImportKnowledgeSecondaryState }
| { name: "ImportKnowledgeStatModifierDesc", args: ImportKnowledgeStatModifierDesc }
| { name: "ImportKnowledgeVaultState", args: ImportKnowledgeVaultState }
| { name: "ImportLocationCache", args: ImportLocationCache }
| { name: "ImportLocationState", args: ImportLocationState }
| { name: "ImportLootChestDesc", args: ImportLootChestDesc }
| { name: "ImportLootChestState", args: ImportLootChestState }
| { name: "ImportLootRarityDesc", args: ImportLootRarityDesc }
| { name: "ImportLootTableDesc", args: ImportLootTableDesc }
| { name: "ImportMobileEntityState", args: ImportMobileEntityState }
| { name: "ImportMountingState", args: ImportMountingState }
| { name: "ImportNpcDesc", args: ImportNpcDesc }
| { name: "ImportNpcState", args: ImportNpcState }
| { name: "ImportOnboardingRewardDesc", args: ImportOnboardingRewardDesc }
| { name: "ImportOnboardingState", args: ImportOnboardingState }
| { name: "ImportParametersDesc", args: ImportParametersDesc }
| { name: "ImportPathfindingDesc", args: ImportPathfindingDesc }
| { name: "ImportPavedTileState", args: ImportPavedTileState }
| { name: "ImportPavingTileDesc", args: ImportPavingTileDesc }
| { name: "ImportPillarShapingDesc", args: ImportPillarShapingDesc }
| { name: "ImportPlayerActionDesc", args: ImportPlayerActionDesc }
| { name: "ImportPlayerActionState", args: ImportPlayerActionState }
| { name: "ImportPlayerHousingDesc", args: ImportPlayerHousingDesc }
| { name: "ImportPlayerPrefsState", args: ImportPlayerPrefsState }
| { name: "ImportPlayerState", args: ImportPlayerState }
| { name: "ImportPortalState", args: ImportPortalState }
| { name: "ImportPrivateParametersDesc", args: ImportPrivateParametersDesc }
| { name: "ImportProgressiveActionState", args: ImportProgressiveActionState }
| { name: "ImportProjectSiteState", args: ImportProjectSiteState }
| { name: "ImportRentState", args: ImportRentState }
| { name: "ImportReservedNameDesc", args: ImportReservedNameDesc }
| { name: "ImportResourceClumpDesc", args: ImportResourceClumpDesc }
| { name: "ImportResourceCount", args: ImportResourceCount }
| { name: "ImportResourceDesc", args: ImportResourceDesc }
| { name: "ImportResourceGrowthRecipeDesc", args: ImportResourceGrowthRecipeDesc }
| { name: "ImportResourcePlacementRecipeDesc", args: ImportResourcePlacementRecipeDesc }
| { name: "ImportResourceState", args: ImportResourceState }
| { name: "ImportResourcesLog", args: ImportResourcesLog }
| { name: "ImportSatiationState", args: ImportSatiationState }
| { name: "ImportSecondaryKnowledgeDesc", args: ImportSecondaryKnowledgeDesc }
| { name: "ImportServerIdentity", args: ImportServerIdentity }
| { name: "ImportSignedInPlayerState", args: ImportSignedInPlayerState }
| { name: "ImportSkillDesc", args: ImportSkillDesc }
| { name: "ImportStaminaState", args: ImportStaminaState }
| { name: "ImportTargetState", args: ImportTargetState }
| { name: "ImportTargetableState", args: ImportTargetableState }
| { name: "ImportTargetingMatrixDesc", args: ImportTargetingMatrixDesc }
| { name: "ImportTeleportItemDesc", args: ImportTeleportItemDesc }
| { name: "ImportTerraformRecipeDesc", args: ImportTerraformRecipeDesc }
| { name: "ImportTerrainChunkState", args: ImportTerrainChunkState }
| { name: "ImportToolDesc", args: ImportToolDesc }
| { name: "ImportToolTypeDesc", args: ImportToolTypeDesc }
| { name: "ImportTradeOrderState", args: ImportTradeOrderState }
| { name: "ImportTradeSessionState", args: ImportTradeSessionState }
| { name: "ImportTravelerTaskDesc", args: ImportTravelerTaskDesc }
| { name: "ImportTravelerTradeOrderDesc", args: ImportTravelerTradeOrderDesc }
| { name: "ImportUserModerationState", args: ImportUserModerationState }
| { name: "ImportUserState", args: ImportUserState }
| { name: "ImportVaultState", args: ImportVaultState }
| { name: "ImportWallDesc", args: ImportWallDesc }
| { name: "ImportWeaponDesc", args: ImportWeaponDesc }
| { name: "ImportWeaponTypeDesc", args: ImportWeaponTypeDesc }
| { name: "ImportWorldRegionNameState", args: ImportWorldRegionNameState }
| { name: "ImportWorldRegionState", args: ImportWorldRegionState }
| { name: "InsertDeveloperIdentity", args: InsertDeveloperIdentity }
| { name: "InsertResourcesLog", args: InsertResourcesLog }
| { name: "InsertTerrainChunk", args: InsertTerrainChunk }
| { name: "InteriorSetCollapsed", args: InteriorSetCollapsed }
| { name: "InteriorSetCollapsedScheduled", args: InteriorSetCollapsedScheduled }
| { name: "InventoryCreatePersonal", args: InventoryCreatePersonal }
| { name: "InventorySort", args: InventorySort }
| { name: "ItemConvert", args: ItemConvert }
| { name: "ItemConvertStart", args: ItemConvertStart }
| { name: "ItemDrop", args: ItemDrop }
| { name: "ItemPickUp", args: ItemPickUp }
| { name: "ItemStackMove", args: ItemStackMove }
| { name: "ItemStackMoveAll", args: ItemStackMoveAll }
| { name: "ItemStackSplit", args: ItemStackSplit }
| { name: "ItemUse", args: ItemUse }
| { name: "ItemUseStart", args: ItemUseStart }
| { name: "LoadConfig", args: LoadConfig }
| { name: "LogClaimMemberLeaderboard", args: LogClaimMemberLeaderboard }
| { name: "LogClaimTierLeaderboard", args: LogClaimTierLeaderboard }
| { name: "LootChestDespawn", args: LootChestDespawn }
| { name: "LootChestSpawn", args: LootChestSpawn }
| { name: "NpcAiAgentLoop", args: NpcAiAgentLoop }
| { name: "OnDurabilityZero", args: OnDurabilityZero }
| { name: "OnInterModuleMessageProcessed", args: OnInterModuleMessageProcessed }
| { name: "OrderCancel", args: OrderCancel }
| { name: "OrderCollect", args: OrderCollect }
| { name: "OrderEditBuyOrder", args: OrderEditBuyOrder }
| { name: "OrderEditSellOrder", args: OrderEditSellOrder }
| { name: "OrderPostBuyOrder", args: OrderPostBuyOrder }
| { name: "OrderPostSellOrder", args: OrderPostSellOrder }
| { name: "PassiveCraftCancel", args: PassiveCraftCancel }
| { name: "PassiveCraftCollect", args: PassiveCraftCollect }
| { name: "PassiveCraftCollectAll", args: PassiveCraftCollectAll }
| { name: "PassiveCraftProcess", args: PassiveCraftProcess }
| { name: "PassiveCraftQueue", args: PassiveCraftQueue }
| { name: "PausePlayTimer", args: PausePlayTimer }
| { name: "PavingDestroyTile", args: PavingDestroyTile }
| { name: "PavingDestroyTileStart", args: PavingDestroyTileStart }
| { name: "PavingPlaceTile", args: PavingPlaceTile }
| { name: "PavingPlaceTileStart", args: PavingPlaceTileStart }
| { name: "PermissionEdit", args: PermissionEdit }
| { name: "PillarShapingDestroy", args: PillarShapingDestroy }
| { name: "PillarShapingDestroyStart", args: PillarShapingDestroyStart }
| { name: "PillarShapingPlacePillar", args: PillarShapingPlacePillar }
| { name: "PillarShapingPlacePillarStart", args: PillarShapingPlacePillarStart }
| { name: "PlayerActionCancel", args: PlayerActionCancel }
| { name: "PlayerCancelRegionTransfer", args: PlayerCancelRegionTransfer }
| { name: "PlayerClearActionState", args: PlayerClearActionState }
| { name: "PlayerClimb", args: PlayerClimb }
| { name: "PlayerClimbStart", args: PlayerClimbStart }
| { name: "PlayerCompleteTask", args: PlayerCompleteTask }
| { name: "PlayerDeathStart", args: PlayerDeathStart }
| { name: "PlayerDismissAlert", args: PlayerDismissAlert }
| { name: "PlayerDuelInitiate", args: PlayerDuelInitiate }
| { name: "PlayerElevatorArrive", args: PlayerElevatorArrive }
| { name: "PlayerHousingChangeEntrance", args: PlayerHousingChangeEntrance }
| { name: "PlayerHousingEnter", args: PlayerHousingEnter }
| { name: "PlayerHousingEvictPlayer", args: PlayerHousingEvictPlayer }
| { name: "PlayerHousingEvictPlayerComplete", args: PlayerHousingEvictPlayerComplete }
| { name: "PlayerHousingIncomeAgentLoop", args: PlayerHousingIncomeAgentLoop }
| { name: "PlayerHousingRequestAccess", args: PlayerHousingRequestAccess }
| { name: "PlayerHousingUpdate", args: PlayerHousingUpdate }
| { name: "PlayerMove", args: PlayerMove }
| { name: "PlayerNotificationEventReducer", args: PlayerNotificationEventReducer }
| { name: "PlayerQueueJoin", args: PlayerQueueJoin }
| { name: "PlayerQueueLeave", args: PlayerQueueLeave }
| { name: "PlayerRegenAgentLoop", args: PlayerRegenAgentLoop }
| { name: "PlayerRegionCrossover", args: PlayerRegionCrossover }
| { name: "PlayerRegionTransferEventReducer", args: PlayerRegionTransferEventReducer }
| { name: "PlayerRespawn", args: PlayerRespawn }
| { name: "PlayerSetDefaultDeployable", args: PlayerSetDefaultDeployable }
| { name: "PlayerSetNameOutcomeEventReducer", args: PlayerSetNameOutcomeEventReducer }
| { name: "PlayerTeleportHome", args: PlayerTeleportHome }
| { name: "PlayerTeleportHomeStart", args: PlayerTeleportHomeStart }
| { name: "PlayerTeleportWaystone", args: PlayerTeleportWaystone }
| { name: "PlayerTeleportWaystoneStart", args: PlayerTeleportWaystoneStart }
| { name: "PlayerUseElevator", args: PlayerUseElevator }
| { name: "PlayerVoteAnswer", args: PlayerVoteAnswer }
| { name: "PlayerVoteConclude", args: PlayerVoteConclude }
| { name: "PocketSwapContents", args: PocketSwapContents }
| { name: "PortalEnter", args: PortalEnter }
| { name: "ProcessInterModuleMessage", args: ProcessInterModuleMessage }
| { name: "ProjectSiteAddMaterials", args: ProjectSiteAddMaterials }
| { name: "ProjectSiteAdvanceProject", args: ProjectSiteAdvanceProject }
| { name: "ProjectSiteAdvanceProjectStart", args: ProjectSiteAdvanceProjectStart }
| { name: "ProjectSiteCancel", args: ProjectSiteCancel }
| { name: "ProjectSitePlace", args: ProjectSitePlace }
| { name: "RegionPopuplationAgentLoop", args: RegionPopuplationAgentLoop }
| { name: "RentAddListing", args: RentAddListing }
| { name: "RentAddTenant", args: RentAddTenant }
| { name: "RentCollectEvictionFee", args: RentCollectEvictionFee }
| { name: "RentCollectorAgentLoop", args: RentCollectorAgentLoop }
| { name: "RentDepositCoins", args: RentDepositCoins }
| { name: "RentEvict", args: RentEvict }
| { name: "RentEvictTerm", args: RentEvictTerm }
| { name: "RentPurchase", args: RentPurchase }
| { name: "RentRemoveTenant", args: RentRemoveTenant }
| { name: "RentSetDailyRate", args: RentSetDailyRate }
| { name: "RentTerminate", args: RentTerminate }
| { name: "RentUnlist", args: RentUnlist }
| { name: "ReportChatMessage", args: ReportChatMessage }
| { name: "ReportPlayer", args: ReportPlayer }
| { name: "ResetChunkIndex", args: ResetChunkIndex }
| { name: "ResetChunkIndexWithDimension", args: ResetChunkIndexWithDimension }
| { name: "ResetMobileEntityPosition", args: ResetMobileEntityPosition }
| { name: "ResetOnboarding", args: ResetOnboarding }
| { name: "ResourceSpawnScheduled", args: ResourceSpawnScheduled }
| { name: "ResourcesRegen", args: ResourcesRegen }
| { name: "RespawnInteriorNpcs", args: RespawnInteriorNpcs }
| { name: "RespawnResourceInChunk", args: RespawnResourceInChunk }
| { name: "RetrieveLostItem", args: RetrieveLostItem }
| { name: "ScrollRead", args: ScrollRead }
| { name: "SearchForClosestBuilding", args: SearchForClosestBuilding }
| { name: "SearchForClosestBuildingType", args: SearchForClosestBuildingType }
| { name: "ServerTeleportPlayer", args: ServerTeleportPlayer }
| { name: "SetHome", args: SetHome }
| { name: "SignIn", args: SignIn }
| { name: "SignOut", args: SignOut }
| { name: "Sleep", args: Sleep }
| { name: "StageAchievementDesc", args: StageAchievementDesc }
| { name: "StageAlertDesc", args: StageAlertDesc }
| { name: "StageBiomeDesc", args: StageBiomeDesc }
| { name: "StageBuffDesc", args: StageBuffDesc }
| { name: "StageBuffTypeDesc", args: StageBuffTypeDesc }
| { name: "StageBuildingClaimDesc", args: StageBuildingClaimDesc }
| { name: "StageBuildingDesc", args: StageBuildingDesc }
| { name: "StageBuildingPortalDesc", args: StageBuildingPortalDesc }
| { name: "StageBuildingRepairsDesc", args: StageBuildingRepairsDesc }
| { name: "StageBuildingSpawnDesc", args: StageBuildingSpawnDesc }
| { name: "StageBuildingTypeDesc", args: StageBuildingTypeDesc }
| { name: "StageCargoDesc", args: StageCargoDesc }
| { name: "StageCharacterStatDesc", args: StageCharacterStatDesc }
| { name: "StageChestRarityDesc", args: StageChestRarityDesc }
| { name: "StageClaimTechDesc", args: StageClaimTechDesc }
| { name: "StageClaimTileCost", args: StageClaimTileCost }
| { name: "StageClimbRequirementDesc", args: StageClimbRequirementDesc }
| { name: "StageClothingDesc", args: StageClothingDesc }
| { name: "StageCollectibleDesc", args: StageCollectibleDesc }
| { name: "StageCombatActionDesc", args: StageCombatActionDesc }
| { name: "StageConstructionRecipeDesc", args: StageConstructionRecipeDesc }
| { name: "StageCraftingRecipeDesc", args: StageCraftingRecipeDesc }
| { name: "StageDeconstructionRecipeDesc", args: StageDeconstructionRecipeDesc }
| { name: "StageDeployableDesc", args: StageDeployableDesc }
| { name: "StageDistantVisibleEntityDesc", args: StageDistantVisibleEntityDesc }
| { name: "StageElevatorDesc", args: StageElevatorDesc }
| { name: "StageEmoteDesc", args: StageEmoteDesc }
| { name: "StageEmpireColorsDesc", args: StageEmpireColorsDesc }
| { name: "StageEmpireIconDesc", args: StageEmpireIconDesc }
| { name: "StageEmpireNotificationDesc", args: StageEmpireNotificationDesc }
| { name: "StageEmpireRankDesc", args: StageEmpireRankDesc }
| { name: "StageEmpireSuppliesDesc", args: StageEmpireSuppliesDesc }
| { name: "StageEmpireTerritoryDesc", args: StageEmpireTerritoryDesc }
| { name: "StageEnemyAiParamsDesc", args: StageEnemyAiParamsDesc }
| { name: "StageEnemyDesc", args: StageEnemyDesc }
| { name: "StageEnvironmentDebuffDesc", args: StageEnvironmentDebuffDesc }
| { name: "StageEquipmentDesc", args: StageEquipmentDesc }
| { name: "StageExtractionRecipeDesc", args: StageExtractionRecipeDesc }
| { name: "StageFoodDesc", args: StageFoodDesc }
| { name: "StageGateDesc", args: StageGateDesc }
| { name: "StageHexiteExchangeEntryDesc", args: StageHexiteExchangeEntryDesc }
| { name: "StageInteriorEnvironmentDesc", args: StageInteriorEnvironmentDesc }
| { name: "StageInteriorInstanceDesc", args: StageInteriorInstanceDesc }
| { name: "StageInteriorNetworkDesc", args: StageInteriorNetworkDesc }
| { name: "StageInteriorPortalConnectionsDesc", args: StageInteriorPortalConnectionsDesc }
| { name: "StageInteriorShapeDesc", args: StageInteriorShapeDesc }
| { name: "StageInteriorSpawnDesc", args: StageInteriorSpawnDesc }
| { name: "StageItemConversionRecipeDesc", args: StageItemConversionRecipeDesc }
| { name: "StageItemDesc", args: StageItemDesc }
| { name: "StageItemListDesc", args: StageItemListDesc }
| { name: "StageKnowledgeScrollDesc", args: StageKnowledgeScrollDesc }
| { name: "StageKnowledgeScrollTypeDesc", args: StageKnowledgeScrollTypeDesc }
| { name: "StageKnowledgeStatModifierDesc", args: StageKnowledgeStatModifierDesc }
| { name: "StageLootChestDesc", args: StageLootChestDesc }
| { name: "StageLootRarityDesc", args: StageLootRarityDesc }
| { name: "StageLootTableDesc", args: StageLootTableDesc }
| { name: "StageNpcDesc", args: StageNpcDesc }
| { name: "StageOnboardingRewardDesc", args: StageOnboardingRewardDesc }
| { name: "StageParametersDesc", args: StageParametersDesc }
| { name: "StagePathfindingDesc", args: StagePathfindingDesc }
| { name: "StagePavingTileDesc", args: StagePavingTileDesc }
| { name: "StagePillarShapingDesc", args: StagePillarShapingDesc }
| { name: "StagePlayerActionDesc", args: StagePlayerActionDesc }
| { name: "StagePlayerHousingDesc", args: StagePlayerHousingDesc }
| { name: "StagePrivateParametersDesc", args: StagePrivateParametersDesc }
| { name: "StageReservedNameDesc", args: StageReservedNameDesc }
| { name: "StageResourceClumpDesc", args: StageResourceClumpDesc }
| { name: "StageResourceDesc", args: StageResourceDesc }
| { name: "StageResourceGrowthRecipeDesc", args: StageResourceGrowthRecipeDesc }
| { name: "StageResourcePlacementRecipeDesc", args: StageResourcePlacementRecipeDesc }
| { name: "StageSecondaryKnowledgeDesc", args: StageSecondaryKnowledgeDesc }
| { name: "StageSkillDesc", args: StageSkillDesc }
| { name: "StageTargetingMatrixDesc", args: StageTargetingMatrixDesc }
| { name: "StageTeleportItemDesc", args: StageTeleportItemDesc }
| { name: "StageTerraformRecipeDesc", args: StageTerraformRecipeDesc }
| { name: "StageToolDesc", args: StageToolDesc }
| { name: "StageToolTypeDesc", args: StageToolTypeDesc }
| { name: "StageTravelerTaskDesc", args: StageTravelerTaskDesc }
| { name: "StageTravelerTradeOrderDesc", args: StageTravelerTradeOrderDesc }
| { name: "StageWallDesc", args: StageWallDesc }
| { name: "StageWeaponDesc", args: StageWeaponDesc }
| { name: "StageWeaponTypeDesc", args: StageWeaponTypeDesc }
| { name: "StartAgents", args: StartAgents }
| { name: "StartGeneratingWorld", args: StartGeneratingWorld }
| { name: "StartOnboardingQuest", args: StartOnboardingQuest }
| { name: "StarvingAgentLoop", args: StarvingAgentLoop }
| { name: "StopAgents", args: StopAgents }
| { name: "SynchronizeTime", args: SynchronizeTime }
| { name: "TargetUpdate", args: TargetUpdate }
| { name: "TeleportationEnergyRegenAgentLoop", args: TeleportationEnergyRegenAgentLoop }
| { name: "Terraform", args: Terraform }
| { name: "TerraformCancel", args: TerraformCancel }
| { name: "TerraformSetFinalTarget", args: TerraformSetFinalTarget }
| { name: "TerraformStart", args: TerraformStart }
| { name: "TradeAccept", args: TradeAccept }
| { name: "TradeAcceptSession", args: TradeAcceptSession }
| { name: "TradeAddItem", args: TradeAddItem }
| { name: "TradeCancelServer", args: TradeCancelServer }
| { name: "TradeDecline", args: TradeDecline }
| { name: "TradeDeclineSession", args: TradeDeclineSession }
| { name: "TradeInitiateSession", args: TradeInitiateSession }
| { name: "TradeRemoveItem", args: TradeRemoveItem }
| { name: "TradeSessionsAgentLoop", args: TradeSessionsAgentLoop }
| { name: "TradeSwapPockets", args: TradeSwapPockets }
| { name: "TransferPlayerDelayed", args: TransferPlayerDelayed }
| { name: "TravelerTaskAgentLoop", args: TravelerTaskAgentLoop }
| { name: "UpdateScheduledTimersFromStaticData", args: UpdateScheduledTimersFromStaticData }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  achievementClaim(request: PlayerAchievementClaimRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    AchievementClaim.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("achievement_claim", __argsBuffer, this.setCallReducerFlags.achievementClaimFlags);
  }

  onAchievementClaim(callback: (ctx: ReducerEventContext, request: PlayerAchievementClaimRequest) => void) {
    this.connection.onReducer("achievement_claim", callback);
  }

  removeOnAchievementClaim(callback: (ctx: ReducerEventContext, request: PlayerAchievementClaimRequest) => void) {
    this.connection.offReducer("achievement_claim", callback);
  }

  acquireKnowledgeFromEntities(request: PlayerAcquireKnowledgeFromEntitiesRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    AcquireKnowledgeFromEntities.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("acquire_knowledge_from_entities", __argsBuffer, this.setCallReducerFlags.acquireKnowledgeFromEntitiesFlags);
  }

  onAcquireKnowledgeFromEntities(callback: (ctx: ReducerEventContext, request: PlayerAcquireKnowledgeFromEntitiesRequest) => void) {
    this.connection.onReducer("acquire_knowledge_from_entities", callback);
  }

  removeOnAcquireKnowledgeFromEntities(callback: (ctx: ReducerEventContext, request: PlayerAcquireKnowledgeFromEntitiesRequest) => void) {
    this.connection.offReducer("acquire_knowledge_from_entities", callback);
  }

  adminAlpha3CompleteOnboarding(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminAlpha3CompleteOnboarding.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_alpha3_complete_onboarding", __argsBuffer, this.setCallReducerFlags.adminAlpha3CompleteOnboardingFlags);
  }

  onAdminAlpha3CompleteOnboarding(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_alpha3_complete_onboarding", callback);
  }

  removeOnAdminAlpha3CompleteOnboarding(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_alpha3_complete_onboarding", callback);
  }

  adminAlpha3ResetOnboardingToFifthTempleQuest(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminAlpha3ResetOnboardingToFifthTempleQuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_alpha3_reset_onboarding_to_fifth_temple_quest", __argsBuffer, this.setCallReducerFlags.adminAlpha3ResetOnboardingToFifthTempleQuestFlags);
  }

  onAdminAlpha3ResetOnboardingToFifthTempleQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_alpha3_reset_onboarding_to_fifth_temple_quest", callback);
  }

  removeOnAdminAlpha3ResetOnboardingToFifthTempleQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_alpha3_reset_onboarding_to_fifth_temple_quest", callback);
  }

  adminAlpha3ResetOnboardingToFirstExpandQuest(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminAlpha3ResetOnboardingToFirstExpandQuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_alpha3_reset_onboarding_to_first_expand_quest", __argsBuffer, this.setCallReducerFlags.adminAlpha3ResetOnboardingToFirstExpandQuestFlags);
  }

  onAdminAlpha3ResetOnboardingToFirstExpandQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_alpha3_reset_onboarding_to_first_expand_quest", callback);
  }

  removeOnAdminAlpha3ResetOnboardingToFirstExpandQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_alpha3_reset_onboarding_to_first_expand_quest", callback);
  }

  adminAlpha3ResetOnboardingToFirstTempleQuest(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminAlpha3ResetOnboardingToFirstTempleQuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_alpha3_reset_onboarding_to_first_temple_quest", __argsBuffer, this.setCallReducerFlags.adminAlpha3ResetOnboardingToFirstTempleQuestFlags);
  }

  onAdminAlpha3ResetOnboardingToFirstTempleQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_alpha3_reset_onboarding_to_first_temple_quest", callback);
  }

  removeOnAdminAlpha3ResetOnboardingToFirstTempleQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_alpha3_reset_onboarding_to_first_temple_quest", callback);
  }

  adminAlpha3ResetOnboardingToFourthExpandQuest(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminAlpha3ResetOnboardingToFourthExpandQuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_alpha3_reset_onboarding_to_fourth_expand_quest", __argsBuffer, this.setCallReducerFlags.adminAlpha3ResetOnboardingToFourthExpandQuestFlags);
  }

  onAdminAlpha3ResetOnboardingToFourthExpandQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_alpha3_reset_onboarding_to_fourth_expand_quest", callback);
  }

  removeOnAdminAlpha3ResetOnboardingToFourthExpandQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_alpha3_reset_onboarding_to_fourth_expand_quest", callback);
  }

  adminAlpha3ResetOnboardingToFourthTempleQuest(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminAlpha3ResetOnboardingToFourthTempleQuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_alpha3_reset_onboarding_to_fourth_temple_quest", __argsBuffer, this.setCallReducerFlags.adminAlpha3ResetOnboardingToFourthTempleQuestFlags);
  }

  onAdminAlpha3ResetOnboardingToFourthTempleQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_alpha3_reset_onboarding_to_fourth_temple_quest", callback);
  }

  removeOnAdminAlpha3ResetOnboardingToFourthTempleQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_alpha3_reset_onboarding_to_fourth_temple_quest", callback);
  }

  adminAlpha3ResetOnboardingToSecondExpandQuest(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminAlpha3ResetOnboardingToSecondExpandQuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_alpha3_reset_onboarding_to_second_expand_quest", __argsBuffer, this.setCallReducerFlags.adminAlpha3ResetOnboardingToSecondExpandQuestFlags);
  }

  onAdminAlpha3ResetOnboardingToSecondExpandQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_alpha3_reset_onboarding_to_second_expand_quest", callback);
  }

  removeOnAdminAlpha3ResetOnboardingToSecondExpandQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_alpha3_reset_onboarding_to_second_expand_quest", callback);
  }

  adminAlpha3ResetOnboardingToSecondTempleQuest(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminAlpha3ResetOnboardingToSecondTempleQuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_alpha3_reset_onboarding_to_second_temple_quest", __argsBuffer, this.setCallReducerFlags.adminAlpha3ResetOnboardingToSecondTempleQuestFlags);
  }

  onAdminAlpha3ResetOnboardingToSecondTempleQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_alpha3_reset_onboarding_to_second_temple_quest", callback);
  }

  removeOnAdminAlpha3ResetOnboardingToSecondTempleQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_alpha3_reset_onboarding_to_second_temple_quest", callback);
  }

  adminAlpha3ResetOnboardingToThirdExpandQuest(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminAlpha3ResetOnboardingToThirdExpandQuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_alpha3_reset_onboarding_to_third_expand_quest", __argsBuffer, this.setCallReducerFlags.adminAlpha3ResetOnboardingToThirdExpandQuestFlags);
  }

  onAdminAlpha3ResetOnboardingToThirdExpandQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_alpha3_reset_onboarding_to_third_expand_quest", callback);
  }

  removeOnAdminAlpha3ResetOnboardingToThirdExpandQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_alpha3_reset_onboarding_to_third_expand_quest", callback);
  }

  adminAlpha3ResetOnboardingToThirdTempleQuest(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminAlpha3ResetOnboardingToThirdTempleQuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_alpha3_reset_onboarding_to_third_temple_quest", __argsBuffer, this.setCallReducerFlags.adminAlpha3ResetOnboardingToThirdTempleQuestFlags);
  }

  onAdminAlpha3ResetOnboardingToThirdTempleQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_alpha3_reset_onboarding_to_third_temple_quest", callback);
  }

  removeOnAdminAlpha3ResetOnboardingToThirdTempleQuest(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_alpha3_reset_onboarding_to_third_temple_quest", callback);
  }

  adminBroadcastMsgRegion(title: string, message: string) {
    const __args = { title, message };
    let __writer = new BinaryWriter(1024);
    AdminBroadcastMsgRegion.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_broadcast_msg_region", __argsBuffer, this.setCallReducerFlags.adminBroadcastMsgRegionFlags);
  }

  onAdminBroadcastMsgRegion(callback: (ctx: ReducerEventContext, title: string, message: string) => void) {
    this.connection.onReducer("admin_broadcast_msg_region", callback);
  }

  removeOnAdminBroadcastMsgRegion(callback: (ctx: ReducerEventContext, title: string, message: string) => void) {
    this.connection.offReducer("admin_broadcast_msg_region", callback);
  }

  adminCapSkill(skillId: number, level: number, newLevel: number, commit: boolean) {
    const __args = { skillId, level, newLevel, commit };
    let __writer = new BinaryWriter(1024);
    AdminCapSkill.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_cap_skill", __argsBuffer, this.setCallReducerFlags.adminCapSkillFlags);
  }

  onAdminCapSkill(callback: (ctx: ReducerEventContext, skillId: number, level: number, newLevel: number, commit: boolean) => void) {
    this.connection.onReducer("admin_cap_skill", callback);
  }

  removeOnAdminCapSkill(callback: (ctx: ReducerEventContext, skillId: number, level: number, newLevel: number, commit: boolean) => void) {
    this.connection.offReducer("admin_cap_skill", callback);
  }

  adminCheckClosedListingStates(maxValue: bigint) {
    const __args = { maxValue };
    let __writer = new BinaryWriter(1024);
    AdminCheckClosedListingStates.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_check_closed_listing_states", __argsBuffer, this.setCallReducerFlags.adminCheckClosedListingStatesFlags);
  }

  onAdminCheckClosedListingStates(callback: (ctx: ReducerEventContext, maxValue: bigint) => void) {
    this.connection.onReducer("admin_check_closed_listing_states", callback);
  }

  removeOnAdminCheckClosedListingStates(callback: (ctx: ReducerEventContext, maxValue: bigint) => void) {
    this.connection.offReducer("admin_check_closed_listing_states", callback);
  }

  adminClearAllResources() {
    this.connection.callReducer("admin_clear_all_resources", new Uint8Array(0), this.setCallReducerFlags.adminClearAllResourcesFlags);
  }

  onAdminClearAllResources(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("admin_clear_all_resources", callback);
  }

  removeOnAdminClearAllResources(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("admin_clear_all_resources", callback);
  }

  adminClearChunkResources(timer: AdminClearResourceTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    AdminClearChunkResources.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_clear_chunk_resources", __argsBuffer, this.setCallReducerFlags.adminClearChunkResourcesFlags);
  }

  onAdminClearChunkResources(callback: (ctx: ReducerEventContext, timer: AdminClearResourceTimer) => void) {
    this.connection.onReducer("admin_clear_chunk_resources", callback);
  }

  removeOnAdminClearChunkResources(callback: (ctx: ReducerEventContext, timer: AdminClearResourceTimer) => void) {
    this.connection.offReducer("admin_clear_chunk_resources", callback);
  }

  adminCollapseRuin(ruinBuildingEntityId: bigint) {
    const __args = { ruinBuildingEntityId };
    let __writer = new BinaryWriter(1024);
    AdminCollapseRuin.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_collapse_ruin", __argsBuffer, this.setCallReducerFlags.adminCollapseRuinFlags);
  }

  onAdminCollapseRuin(callback: (ctx: ReducerEventContext, ruinBuildingEntityId: bigint) => void) {
    this.connection.onReducer("admin_collapse_ruin", callback);
  }

  removeOnAdminCollapseRuin(callback: (ctx: ReducerEventContext, ruinBuildingEntityId: bigint) => void) {
    this.connection.offReducer("admin_collapse_ruin", callback);
  }

  adminCollapseRuins() {
    this.connection.callReducer("admin_collapse_ruins", new Uint8Array(0), this.setCallReducerFlags.adminCollapseRuinsFlags);
  }

  onAdminCollapseRuins(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("admin_collapse_ruins", callback);
  }

  removeOnAdminCollapseRuins(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("admin_collapse_ruins", callback);
  }

  adminCompleteAllPassiveCrafts() {
    this.connection.callReducer("admin_complete_all_passive_crafts", new Uint8Array(0), this.setCallReducerFlags.adminCompleteAllPassiveCraftsFlags);
  }

  onAdminCompleteAllPassiveCrafts(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("admin_complete_all_passive_crafts", callback);
  }

  removeOnAdminCompleteAllPassiveCrafts(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("admin_complete_all_passive_crafts", callback);
  }

  adminCountInventoryItems(itemId: number, limit: number) {
    const __args = { itemId, limit };
    let __writer = new BinaryWriter(1024);
    AdminCountInventoryItems.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_count_inventory_items", __argsBuffer, this.setCallReducerFlags.adminCountInventoryItemsFlags);
  }

  onAdminCountInventoryItems(callback: (ctx: ReducerEventContext, itemId: number, limit: number) => void) {
    this.connection.onReducer("admin_count_inventory_items", callback);
  }

  removeOnAdminCountInventoryItems(callback: (ctx: ReducerEventContext, itemId: number, limit: number) => void) {
    this.connection.offReducer("admin_count_inventory_items", callback);
  }

  adminCreateChatMessage(channelId: ChatChannel, username: string, titleId: number, targetId: bigint, newMessageText: string) {
    const __args = { channelId, username, titleId, targetId, newMessageText };
    let __writer = new BinaryWriter(1024);
    AdminCreateChatMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_create_chat_message", __argsBuffer, this.setCallReducerFlags.adminCreateChatMessageFlags);
  }

  onAdminCreateChatMessage(callback: (ctx: ReducerEventContext, channelId: ChatChannel, username: string, titleId: number, targetId: bigint, newMessageText: string) => void) {
    this.connection.onReducer("admin_create_chat_message", callback);
  }

  removeOnAdminCreateChatMessage(callback: (ctx: ReducerEventContext, channelId: ChatChannel, username: string, titleId: number, targetId: bigint, newMessageText: string) => void) {
    this.connection.offReducer("admin_create_chat_message", callback);
  }

  adminCreatePlayerReport(request: CreatePlayerReportRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    AdminCreatePlayerReport.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_create_player_report", __argsBuffer, this.setCallReducerFlags.adminCreatePlayerReportFlags);
  }

  onAdminCreatePlayerReport(callback: (ctx: ReducerEventContext, request: CreatePlayerReportRequest) => void) {
    this.connection.onReducer("admin_create_player_report", callback);
  }

  removeOnAdminCreatePlayerReport(callback: (ctx: ReducerEventContext, request: CreatePlayerReportRequest) => void) {
    this.connection.offReducer("admin_create_player_report", callback);
  }

  adminDeleteAllItemsOfType(playerUsername: string, itemId: number, isCargo: boolean) {
    const __args = { playerUsername, itemId, isCargo };
    let __writer = new BinaryWriter(1024);
    AdminDeleteAllItemsOfType.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_delete_all_items_of_type", __argsBuffer, this.setCallReducerFlags.adminDeleteAllItemsOfTypeFlags);
  }

  onAdminDeleteAllItemsOfType(callback: (ctx: ReducerEventContext, playerUsername: string, itemId: number, isCargo: boolean) => void) {
    this.connection.onReducer("admin_delete_all_items_of_type", callback);
  }

  removeOnAdminDeleteAllItemsOfType(callback: (ctx: ReducerEventContext, playerUsername: string, itemId: number, isCargo: boolean) => void) {
    this.connection.offReducer("admin_delete_all_items_of_type", callback);
  }

  adminDeleteChatMessage(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminDeleteChatMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_delete_chat_message", __argsBuffer, this.setCallReducerFlags.adminDeleteChatMessageFlags);
  }

  onAdminDeleteChatMessage(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_delete_chat_message", callback);
  }

  removeOnAdminDeleteChatMessage(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_delete_chat_message", callback);
  }

  adminDespawnOverworldEnemies() {
    this.connection.callReducer("admin_despawn_overworld_enemies", new Uint8Array(0), this.setCallReducerFlags.adminDespawnOverworldEnemiesFlags);
  }

  onAdminDespawnOverworldEnemies(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("admin_despawn_overworld_enemies", callback);
  }

  removeOnAdminDespawnOverworldEnemies(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("admin_despawn_overworld_enemies", callback);
  }

  adminFindAllPlayersWithItem(itemId: number, isCargo: boolean, claimEntityId: bigint) {
    const __args = { itemId, isCargo, claimEntityId };
    let __writer = new BinaryWriter(1024);
    AdminFindAllPlayersWithItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_find_all_players_with_item", __argsBuffer, this.setCallReducerFlags.adminFindAllPlayersWithItemFlags);
  }

  onAdminFindAllPlayersWithItem(callback: (ctx: ReducerEventContext, itemId: number, isCargo: boolean, claimEntityId: bigint) => void) {
    this.connection.onReducer("admin_find_all_players_with_item", callback);
  }

  removeOnAdminFindAllPlayersWithItem(callback: (ctx: ReducerEventContext, itemId: number, isCargo: boolean, claimEntityId: bigint) => void) {
    this.connection.offReducer("admin_find_all_players_with_item", callback);
  }

  adminFindAllPlayersWithItemAboveQuantity(itemId: number, isCargo: boolean, claimEntityId: bigint, minQuantity: bigint) {
    const __args = { itemId, isCargo, claimEntityId, minQuantity };
    let __writer = new BinaryWriter(1024);
    AdminFindAllPlayersWithItemAboveQuantity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_find_all_players_with_item_above_quantity", __argsBuffer, this.setCallReducerFlags.adminFindAllPlayersWithItemAboveQuantityFlags);
  }

  onAdminFindAllPlayersWithItemAboveQuantity(callback: (ctx: ReducerEventContext, itemId: number, isCargo: boolean, claimEntityId: bigint, minQuantity: bigint) => void) {
    this.connection.onReducer("admin_find_all_players_with_item_above_quantity", callback);
  }

  removeOnAdminFindAllPlayersWithItemAboveQuantity(callback: (ctx: ReducerEventContext, itemId: number, isCargo: boolean, claimEntityId: bigint, minQuantity: bigint) => void) {
    this.connection.offReducer("admin_find_all_players_with_item_above_quantity", callback);
  }

  adminFindItemsInInventories(itemId: number, isCargo: boolean, minThreshold: bigint) {
    const __args = { itemId, isCargo, minThreshold };
    let __writer = new BinaryWriter(1024);
    AdminFindItemsInInventories.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_find_items_in_inventories", __argsBuffer, this.setCallReducerFlags.adminFindItemsInInventoriesFlags);
  }

  onAdminFindItemsInInventories(callback: (ctx: ReducerEventContext, itemId: number, isCargo: boolean, minThreshold: bigint) => void) {
    this.connection.onReducer("admin_find_items_in_inventories", callback);
  }

  removeOnAdminFindItemsInInventories(callback: (ctx: ReducerEventContext, itemId: number, isCargo: boolean, minThreshold: bigint) => void) {
    this.connection.offReducer("admin_find_items_in_inventories", callback);
  }

  adminFindItemsInTrades(itemId: number, isCargo: boolean, minThreshold: bigint) {
    const __args = { itemId, isCargo, minThreshold };
    let __writer = new BinaryWriter(1024);
    AdminFindItemsInTrades.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_find_items_in_trades", __argsBuffer, this.setCallReducerFlags.adminFindItemsInTradesFlags);
  }

  onAdminFindItemsInTrades(callback: (ctx: ReducerEventContext, itemId: number, isCargo: boolean, minThreshold: bigint) => void) {
    this.connection.onReducer("admin_find_items_in_trades", callback);
  }

  removeOnAdminFindItemsInTrades(callback: (ctx: ReducerEventContext, itemId: number, isCargo: boolean, minThreshold: bigint) => void) {
    this.connection.offReducer("admin_find_items_in_trades", callback);
  }

  adminGrantCollectibles(identity: string, collectibles: number[]) {
    const __args = { identity, collectibles };
    let __writer = new BinaryWriter(1024);
    AdminGrantCollectibles.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_grant_collectibles", __argsBuffer, this.setCallReducerFlags.adminGrantCollectiblesFlags);
  }

  onAdminGrantCollectibles(callback: (ctx: ReducerEventContext, identity: string, collectibles: number[]) => void) {
    this.connection.onReducer("admin_grant_collectibles", callback);
  }

  removeOnAdminGrantCollectibles(callback: (ctx: ReducerEventContext, identity: string, collectibles: number[]) => void) {
    this.connection.offReducer("admin_grant_collectibles", callback);
  }

  adminModifyChatMessage(entityId: bigint, newMessageText: string) {
    const __args = { entityId, newMessageText };
    let __writer = new BinaryWriter(1024);
    AdminModifyChatMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_modify_chat_message", __argsBuffer, this.setCallReducerFlags.adminModifyChatMessageFlags);
  }

  onAdminModifyChatMessage(callback: (ctx: ReducerEventContext, entityId: bigint, newMessageText: string) => void) {
    this.connection.onReducer("admin_modify_chat_message", callback);
  }

  removeOnAdminModifyChatMessage(callback: (ctx: ReducerEventContext, entityId: bigint, newMessageText: string) => void) {
    this.connection.offReducer("admin_modify_chat_message", callback);
  }

  adminRenameBuilding(buildingName: string, newName: string) {
    const __args = { buildingName, newName };
    let __writer = new BinaryWriter(1024);
    AdminRenameBuilding.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_rename_building", __argsBuffer, this.setCallReducerFlags.adminRenameBuildingFlags);
  }

  onAdminRenameBuilding(callback: (ctx: ReducerEventContext, buildingName: string, newName: string) => void) {
    this.connection.onReducer("admin_rename_building", callback);
  }

  removeOnAdminRenameBuilding(callback: (ctx: ReducerEventContext, buildingName: string, newName: string) => void) {
    this.connection.offReducer("admin_rename_building", callback);
  }

  adminRenameBuildingCoord(coord: OffsetCoordinatesSmallMessage, newName: string) {
    const __args = { coord, newName };
    let __writer = new BinaryWriter(1024);
    AdminRenameBuildingCoord.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_rename_building_coord", __argsBuffer, this.setCallReducerFlags.adminRenameBuildingCoordFlags);
  }

  onAdminRenameBuildingCoord(callback: (ctx: ReducerEventContext, coord: OffsetCoordinatesSmallMessage, newName: string) => void) {
    this.connection.onReducer("admin_rename_building_coord", callback);
  }

  removeOnAdminRenameBuildingCoord(callback: (ctx: ReducerEventContext, coord: OffsetCoordinatesSmallMessage, newName: string) => void) {
    this.connection.offReducer("admin_rename_building_coord", callback);
  }

  adminRenameBuildingEntity(entityId: bigint, newName: string) {
    const __args = { entityId, newName };
    let __writer = new BinaryWriter(1024);
    AdminRenameBuildingEntity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_rename_building_entity", __argsBuffer, this.setCallReducerFlags.adminRenameBuildingEntityFlags);
  }

  onAdminRenameBuildingEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.onReducer("admin_rename_building_entity", callback);
  }

  removeOnAdminRenameBuildingEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.offReducer("admin_rename_building_entity", callback);
  }

  adminRenameClaim(claimName: string, newName: string) {
    const __args = { claimName, newName };
    let __writer = new BinaryWriter(1024);
    AdminRenameClaim.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_rename_claim", __argsBuffer, this.setCallReducerFlags.adminRenameClaimFlags);
  }

  onAdminRenameClaim(callback: (ctx: ReducerEventContext, claimName: string, newName: string) => void) {
    this.connection.onReducer("admin_rename_claim", callback);
  }

  removeOnAdminRenameClaim(callback: (ctx: ReducerEventContext, claimName: string, newName: string) => void) {
    this.connection.offReducer("admin_rename_claim", callback);
  }

  adminRenameClaimEntity(entityId: bigint, newName: string) {
    const __args = { entityId, newName };
    let __writer = new BinaryWriter(1024);
    AdminRenameClaimEntity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_rename_claim_entity", __argsBuffer, this.setCallReducerFlags.adminRenameClaimEntityFlags);
  }

  onAdminRenameClaimEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.onReducer("admin_rename_claim_entity", callback);
  }

  removeOnAdminRenameClaimEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.offReducer("admin_rename_claim_entity", callback);
  }

  adminRenameDeployable(deployableName: string, newName: string) {
    const __args = { deployableName, newName };
    let __writer = new BinaryWriter(1024);
    AdminRenameDeployable.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_rename_deployable", __argsBuffer, this.setCallReducerFlags.adminRenameDeployableFlags);
  }

  onAdminRenameDeployable(callback: (ctx: ReducerEventContext, deployableName: string, newName: string) => void) {
    this.connection.onReducer("admin_rename_deployable", callback);
  }

  removeOnAdminRenameDeployable(callback: (ctx: ReducerEventContext, deployableName: string, newName: string) => void) {
    this.connection.offReducer("admin_rename_deployable", callback);
  }

  adminRenameDeployableEntity(entityId: bigint, newName: string) {
    const __args = { entityId, newName };
    let __writer = new BinaryWriter(1024);
    AdminRenameDeployableEntity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_rename_deployable_entity", __argsBuffer, this.setCallReducerFlags.adminRenameDeployableEntityFlags);
  }

  onAdminRenameDeployableEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.onReducer("admin_rename_deployable_entity", callback);
  }

  removeOnAdminRenameDeployableEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.offReducer("admin_rename_deployable_entity", callback);
  }

  adminResetAllHerdLocations() {
    this.connection.callReducer("admin_reset_all_herd_locations", new Uint8Array(0), this.setCallReducerFlags.adminResetAllHerdLocationsFlags);
  }

  onAdminResetAllHerdLocations(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("admin_reset_all_herd_locations", callback);
  }

  removeOnAdminResetAllHerdLocations(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("admin_reset_all_herd_locations", callback);
  }

  adminResetHerdLocations(enemyAiParamsDescId: number) {
    const __args = { enemyAiParamsDescId };
    let __writer = new BinaryWriter(1024);
    AdminResetHerdLocations.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_reset_herd_locations", __argsBuffer, this.setCallReducerFlags.adminResetHerdLocationsFlags);
  }

  onAdminResetHerdLocations(callback: (ctx: ReducerEventContext, enemyAiParamsDescId: number) => void) {
    this.connection.onReducer("admin_reset_herd_locations", callback);
  }

  removeOnAdminResetHerdLocations(callback: (ctx: ReducerEventContext, enemyAiParamsDescId: number) => void) {
    this.connection.offReducer("admin_reset_herd_locations", callback);
  }

  adminResetOnboardingCompletely(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    AdminResetOnboardingCompletely.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_reset_onboarding_completely", __argsBuffer, this.setCallReducerFlags.adminResetOnboardingCompletelyFlags);
  }

  onAdminResetOnboardingCompletely(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("admin_reset_onboarding_completely", callback);
  }

  removeOnAdminResetOnboardingCompletely(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("admin_reset_onboarding_completely", callback);
  }

  adminResourceForceRegen(resourceId: number, iterations: number, ignoreTargetCount: boolean) {
    const __args = { resourceId, iterations, ignoreTargetCount };
    let __writer = new BinaryWriter(1024);
    AdminResourceForceRegen.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_resource_force_regen", __argsBuffer, this.setCallReducerFlags.adminResourceForceRegenFlags);
  }

  onAdminResourceForceRegen(callback: (ctx: ReducerEventContext, resourceId: number, iterations: number, ignoreTargetCount: boolean) => void) {
    this.connection.onReducer("admin_resource_force_regen", callback);
  }

  removeOnAdminResourceForceRegen(callback: (ctx: ReducerEventContext, resourceId: number, iterations: number, ignoreTargetCount: boolean) => void) {
    this.connection.offReducer("admin_resource_force_regen", callback);
  }

  adminResourcesDeleteVerySlow(resourceId: number) {
    const __args = { resourceId };
    let __writer = new BinaryWriter(1024);
    AdminResourcesDeleteVerySlow.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_resources_delete_very_slow", __argsBuffer, this.setCallReducerFlags.adminResourcesDeleteVerySlowFlags);
  }

  onAdminResourcesDeleteVerySlow(callback: (ctx: ReducerEventContext, resourceId: number) => void) {
    this.connection.onReducer("admin_resources_delete_very_slow", callback);
  }

  removeOnAdminResourcesDeleteVerySlow(callback: (ctx: ReducerEventContext, resourceId: number) => void) {
    this.connection.offReducer("admin_resources_delete_very_slow", callback);
  }

  adminResourcesLogCount(threshold: number) {
    const __args = { threshold };
    let __writer = new BinaryWriter(1024);
    AdminResourcesLogCount.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_resources_log_count", __argsBuffer, this.setCallReducerFlags.adminResourcesLogCountFlags);
  }

  onAdminResourcesLogCount(callback: (ctx: ReducerEventContext, threshold: number) => void) {
    this.connection.onReducer("admin_resources_log_count", callback);
  }

  removeOnAdminResourcesLogCount(callback: (ctx: ReducerEventContext, threshold: number) => void) {
    this.connection.offReducer("admin_resources_log_count", callback);
  }

  adminRestoreAllCollapsedRuins() {
    this.connection.callReducer("admin_restore_all_collapsed_ruins", new Uint8Array(0), this.setCallReducerFlags.adminRestoreAllCollapsedRuinsFlags);
  }

  onAdminRestoreAllCollapsedRuins(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("admin_restore_all_collapsed_ruins", callback);
  }

  removeOnAdminRestoreAllCollapsedRuins(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("admin_restore_all_collapsed_ruins", callback);
  }

  adminRestorePlayerState(username: string, restorePosition: boolean, forceSignout: boolean, restoreAllDeployablesPositions: boolean, storeDeployables: boolean, clearCargo: boolean, clearItems: boolean, clearToolbelt: boolean) {
    const __args = { username, restorePosition, forceSignout, restoreAllDeployablesPositions, storeDeployables, clearCargo, clearItems, clearToolbelt };
    let __writer = new BinaryWriter(1024);
    AdminRestorePlayerState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_restore_player_state", __argsBuffer, this.setCallReducerFlags.adminRestorePlayerStateFlags);
  }

  onAdminRestorePlayerState(callback: (ctx: ReducerEventContext, username: string, restorePosition: boolean, forceSignout: boolean, restoreAllDeployablesPositions: boolean, storeDeployables: boolean, clearCargo: boolean, clearItems: boolean, clearToolbelt: boolean) => void) {
    this.connection.onReducer("admin_restore_player_state", callback);
  }

  removeOnAdminRestorePlayerState(callback: (ctx: ReducerEventContext, username: string, restorePosition: boolean, forceSignout: boolean, restoreAllDeployablesPositions: boolean, storeDeployables: boolean, clearCargo: boolean, clearItems: boolean, clearToolbelt: boolean) => void) {
    this.connection.offReducer("admin_restore_player_state", callback);
  }

  adminRestorePlayerStateScheduled(timer: AdminRestorePlayerStateTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    AdminRestorePlayerStateScheduled.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_restore_player_state_scheduled", __argsBuffer, this.setCallReducerFlags.adminRestorePlayerStateScheduledFlags);
  }

  onAdminRestorePlayerStateScheduled(callback: (ctx: ReducerEventContext, timer: AdminRestorePlayerStateTimer) => void) {
    this.connection.onReducer("admin_restore_player_state_scheduled", callback);
  }

  removeOnAdminRestorePlayerStateScheduled(callback: (ctx: ReducerEventContext, timer: AdminRestorePlayerStateTimer) => void) {
    this.connection.offReducer("admin_restore_player_state_scheduled", callback);
  }

  adminSetSignText(deployableName: string, newName: string) {
    const __args = { deployableName, newName };
    let __writer = new BinaryWriter(1024);
    AdminSetSignText.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_set_sign_text", __argsBuffer, this.setCallReducerFlags.adminSetSignTextFlags);
  }

  onAdminSetSignText(callback: (ctx: ReducerEventContext, deployableName: string, newName: string) => void) {
    this.connection.onReducer("admin_set_sign_text", callback);
  }

  removeOnAdminSetSignText(callback: (ctx: ReducerEventContext, deployableName: string, newName: string) => void) {
    this.connection.offReducer("admin_set_sign_text", callback);
  }

  adminSetSignTextCoord(coord: OffsetCoordinatesSmallMessage, newName: string) {
    const __args = { coord, newName };
    let __writer = new BinaryWriter(1024);
    AdminSetSignTextCoord.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_set_sign_text_coord", __argsBuffer, this.setCallReducerFlags.adminSetSignTextCoordFlags);
  }

  onAdminSetSignTextCoord(callback: (ctx: ReducerEventContext, coord: OffsetCoordinatesSmallMessage, newName: string) => void) {
    this.connection.onReducer("admin_set_sign_text_coord", callback);
  }

  removeOnAdminSetSignTextCoord(callback: (ctx: ReducerEventContext, coord: OffsetCoordinatesSmallMessage, newName: string) => void) {
    this.connection.offReducer("admin_set_sign_text_coord", callback);
  }

  adminSetSignTextEntity(entityId: bigint, newName: string) {
    const __args = { entityId, newName };
    let __writer = new BinaryWriter(1024);
    AdminSetSignTextEntity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_set_sign_text_entity", __argsBuffer, this.setCallReducerFlags.adminSetSignTextEntityFlags);
  }

  onAdminSetSignTextEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.onReducer("admin_set_sign_text_entity", callback);
  }

  removeOnAdminSetSignTextEntity(callback: (ctx: ReducerEventContext, entityId: bigint, newName: string) => void) {
    this.connection.offReducer("admin_set_sign_text_entity", callback);
  }

  adminSignOut(identity: Identity) {
    const __args = { identity };
    let __writer = new BinaryWriter(1024);
    AdminSignOut.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_sign_out", __argsBuffer, this.setCallReducerFlags.adminSignOutFlags);
  }

  onAdminSignOut(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.onReducer("admin_sign_out", callback);
  }

  removeOnAdminSignOut(callback: (ctx: ReducerEventContext, identity: Identity) => void) {
    this.connection.offReducer("admin_sign_out", callback);
  }

  adminSignOutAllRegion() {
    this.connection.callReducer("admin_sign_out_all_region", new Uint8Array(0), this.setCallReducerFlags.adminSignOutAllRegionFlags);
  }

  onAdminSignOutAllRegion(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("admin_sign_out_all_region", callback);
  }

  removeOnAdminSignOutAllRegion(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("admin_sign_out_all_region", callback);
  }

  adminSignOutString(identity: string) {
    const __args = { identity };
    let __writer = new BinaryWriter(1024);
    AdminSignOutString.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("admin_sign_out_string", __argsBuffer, this.setCallReducerFlags.adminSignOutStringFlags);
  }

  onAdminSignOutString(callback: (ctx: ReducerEventContext, identity: string) => void) {
    this.connection.onReducer("admin_sign_out_string", callback);
  }

  removeOnAdminSignOutString(callback: (ctx: ReducerEventContext, identity: string) => void) {
    this.connection.offReducer("admin_sign_out_string", callback);
  }

  adminUpdateHousingPortals() {
    this.connection.callReducer("admin_update_housing_portals", new Uint8Array(0), this.setCallReducerFlags.adminUpdateHousingPortalsFlags);
  }

  onAdminUpdateHousingPortals(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("admin_update_housing_portals", callback);
  }

  removeOnAdminUpdateHousingPortals(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("admin_update_housing_portals", callback);
  }

  adminUpdateLightSourceStates() {
    this.connection.callReducer("admin_update_light_source_states", new Uint8Array(0), this.setCallReducerFlags.adminUpdateLightSourceStatesFlags);
  }

  onAdminUpdateLightSourceStates(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("admin_update_light_source_states", callback);
  }

  removeOnAdminUpdateLightSourceStates(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("admin_update_light_source_states", callback);
  }

  attack(request: EntityAttackRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    Attack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("attack", __argsBuffer, this.setCallReducerFlags.attackFlags);
  }

  onAttack(callback: (ctx: ReducerEventContext, request: EntityAttackRequest) => void) {
    this.connection.onReducer("attack", callback);
  }

  removeOnAttack(callback: (ctx: ReducerEventContext, request: EntityAttackRequest) => void) {
    this.connection.offReducer("attack", callback);
  }

  attackImpact(timer: AttackImpactTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    AttackImpact.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("attack_impact", __argsBuffer, this.setCallReducerFlags.attackImpactFlags);
  }

  onAttackImpact(callback: (ctx: ReducerEventContext, timer: AttackImpactTimer) => void) {
    this.connection.onReducer("attack_impact", callback);
  }

  removeOnAttackImpact(callback: (ctx: ReducerEventContext, timer: AttackImpactTimer) => void) {
    this.connection.offReducer("attack_impact", callback);
  }

  attackScheduled(timer: AttackTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    AttackScheduled.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("attack_scheduled", __argsBuffer, this.setCallReducerFlags.attackScheduledFlags);
  }

  onAttackScheduled(callback: (ctx: ReducerEventContext, timer: AttackTimer) => void) {
    this.connection.onReducer("attack_scheduled", callback);
  }

  removeOnAttackScheduled(callback: (ctx: ReducerEventContext, timer: AttackTimer) => void) {
    this.connection.offReducer("attack_scheduled", callback);
  }

  attackStart(request: EntityAttackRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    AttackStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("attack_start", __argsBuffer, this.setCallReducerFlags.attackStartFlags);
  }

  onAttackStart(callback: (ctx: ReducerEventContext, request: EntityAttackRequest) => void) {
    this.connection.onReducer("attack_start", callback);
  }

  removeOnAttackStart(callback: (ctx: ReducerEventContext, request: EntityAttackRequest) => void) {
    this.connection.offReducer("attack_start", callback);
  }

  autoLogoutLoop(timer: AutoLogoutLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    AutoLogoutLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("auto_logout_loop", __argsBuffer, this.setCallReducerFlags.autoLogoutLoopFlags);
  }

  onAutoLogoutLoop(callback: (ctx: ReducerEventContext, timer: AutoLogoutLoopTimer) => void) {
    this.connection.onReducer("auto_logout_loop", callback);
  }

  removeOnAutoLogoutLoop(callback: (ctx: ReducerEventContext, timer: AutoLogoutLoopTimer) => void) {
    this.connection.offReducer("auto_logout_loop", callback);
  }

  barterStallOrderAccept(request: PlayerBarterStallOrderAccept) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    BarterStallOrderAccept.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("barter_stall_order_accept", __argsBuffer, this.setCallReducerFlags.barterStallOrderAcceptFlags);
  }

  onBarterStallOrderAccept(callback: (ctx: ReducerEventContext, request: PlayerBarterStallOrderAccept) => void) {
    this.connection.onReducer("barter_stall_order_accept", callback);
  }

  removeOnBarterStallOrderAccept(callback: (ctx: ReducerEventContext, request: PlayerBarterStallOrderAccept) => void) {
    this.connection.offReducer("barter_stall_order_accept", callback);
  }

  barterStallOrderCreate(request: PlayerBarterStallOrderCreateRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    BarterStallOrderCreate.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("barter_stall_order_create", __argsBuffer, this.setCallReducerFlags.barterStallOrderCreateFlags);
  }

  onBarterStallOrderCreate(callback: (ctx: ReducerEventContext, request: PlayerBarterStallOrderCreateRequest) => void) {
    this.connection.onReducer("barter_stall_order_create", callback);
  }

  removeOnBarterStallOrderCreate(callback: (ctx: ReducerEventContext, request: PlayerBarterStallOrderCreateRequest) => void) {
    this.connection.offReducer("barter_stall_order_create", callback);
  }

  barterStallOrderDelete(request: PlayerBarterStallOrderDeleteRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    BarterStallOrderDelete.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("barter_stall_order_delete", __argsBuffer, this.setCallReducerFlags.barterStallOrderDeleteFlags);
  }

  onBarterStallOrderDelete(callback: (ctx: ReducerEventContext, request: PlayerBarterStallOrderDeleteRequest) => void) {
    this.connection.onReducer("barter_stall_order_delete", callback);
  }

  removeOnBarterStallOrderDelete(callback: (ctx: ReducerEventContext, request: PlayerBarterStallOrderDeleteRequest) => void) {
    this.connection.offReducer("barter_stall_order_delete", callback);
  }

  barterStallSetMarketModeEnabled(request: BarterStallSetMarketModeEnabledRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    BarterStallSetMarketModeEnabled.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("barter_stall_set_market_mode_enabled", __argsBuffer, this.setCallReducerFlags.barterStallSetMarketModeEnabledFlags);
  }

  onBarterStallSetMarketModeEnabled(callback: (ctx: ReducerEventContext, request: BarterStallSetMarketModeEnabledRequest) => void) {
    this.connection.onReducer("barter_stall_set_market_mode_enabled", callback);
  }

  removeOnBarterStallSetMarketModeEnabled(callback: (ctx: ReducerEventContext, request: BarterStallSetMarketModeEnabledRequest) => void) {
    this.connection.offReducer("barter_stall_set_market_mode_enabled", callback);
  }

  blueprintPlace(center: OffsetCoordinatesSmallMessage, blueprintJson: string, settingsJson: string, rotation: number, elevationOffset: number) {
    const __args = { center, blueprintJson, settingsJson, rotation, elevationOffset };
    let __writer = new BinaryWriter(1024);
    BlueprintPlace.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("blueprint_place", __argsBuffer, this.setCallReducerFlags.blueprintPlaceFlags);
  }

  onBlueprintPlace(callback: (ctx: ReducerEventContext, center: OffsetCoordinatesSmallMessage, blueprintJson: string, settingsJson: string, rotation: number, elevationOffset: number) => void) {
    this.connection.onReducer("blueprint_place", callback);
  }

  removeOnBlueprintPlace(callback: (ctx: ReducerEventContext, center: OffsetCoordinatesSmallMessage, blueprintJson: string, settingsJson: string, rotation: number, elevationOffset: number) => void) {
    this.connection.offReducer("blueprint_place", callback);
  }

  buildingDecayAgentLoop(timer: BuildingDecayLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    BuildingDecayAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("building_decay_agent_loop", __argsBuffer, this.setCallReducerFlags.buildingDecayAgentLoopFlags);
  }

  onBuildingDecayAgentLoop(callback: (ctx: ReducerEventContext, timer: BuildingDecayLoopTimer) => void) {
    this.connection.onReducer("building_decay_agent_loop", callback);
  }

  removeOnBuildingDecayAgentLoop(callback: (ctx: ReducerEventContext, timer: BuildingDecayLoopTimer) => void) {
    this.connection.offReducer("building_decay_agent_loop", callback);
  }

  buildingDeconstruct(request: PlayerBuildingDeconstructRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    BuildingDeconstruct.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("building_deconstruct", __argsBuffer, this.setCallReducerFlags.buildingDeconstructFlags);
  }

  onBuildingDeconstruct(callback: (ctx: ReducerEventContext, request: PlayerBuildingDeconstructRequest) => void) {
    this.connection.onReducer("building_deconstruct", callback);
  }

  removeOnBuildingDeconstruct(callback: (ctx: ReducerEventContext, request: PlayerBuildingDeconstructRequest) => void) {
    this.connection.offReducer("building_deconstruct", callback);
  }

  buildingDeconstructStart(request: PlayerBuildingDeconstructRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    BuildingDeconstructStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("building_deconstruct_start", __argsBuffer, this.setCallReducerFlags.buildingDeconstructStartFlags);
  }

  onBuildingDeconstructStart(callback: (ctx: ReducerEventContext, request: PlayerBuildingDeconstructRequest) => void) {
    this.connection.onReducer("building_deconstruct_start", callback);
  }

  removeOnBuildingDeconstructStart(callback: (ctx: ReducerEventContext, request: PlayerBuildingDeconstructRequest) => void) {
    this.connection.offReducer("building_deconstruct_start", callback);
  }

  buildingDespawn(timer: BuildingDespawnTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    BuildingDespawn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("building_despawn", __argsBuffer, this.setCallReducerFlags.buildingDespawnFlags);
  }

  onBuildingDespawn(callback: (ctx: ReducerEventContext, timer: BuildingDespawnTimer) => void) {
    this.connection.onReducer("building_despawn", callback);
  }

  removeOnBuildingDespawn(callback: (ctx: ReducerEventContext, timer: BuildingDespawnTimer) => void) {
    this.connection.offReducer("building_despawn", callback);
  }

  buildingMove(request: PlayerBuildingMoveRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    BuildingMove.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("building_move", __argsBuffer, this.setCallReducerFlags.buildingMoveFlags);
  }

  onBuildingMove(callback: (ctx: ReducerEventContext, request: PlayerBuildingMoveRequest) => void) {
    this.connection.onReducer("building_move", callback);
  }

  removeOnBuildingMove(callback: (ctx: ReducerEventContext, request: PlayerBuildingMoveRequest) => void) {
    this.connection.offReducer("building_move", callback);
  }

  buildingRepair(request: PlayerBuildingRepairRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    BuildingRepair.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("building_repair", __argsBuffer, this.setCallReducerFlags.buildingRepairFlags);
  }

  onBuildingRepair(callback: (ctx: ReducerEventContext, request: PlayerBuildingRepairRequest) => void) {
    this.connection.onReducer("building_repair", callback);
  }

  removeOnBuildingRepair(callback: (ctx: ReducerEventContext, request: PlayerBuildingRepairRequest) => void) {
    this.connection.offReducer("building_repair", callback);
  }

  buildingRepairStart(request: PlayerBuildingRepairRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    BuildingRepairStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("building_repair_start", __argsBuffer, this.setCallReducerFlags.buildingRepairStartFlags);
  }

  onBuildingRepairStart(callback: (ctx: ReducerEventContext, request: PlayerBuildingRepairRequest) => void) {
    this.connection.onReducer("building_repair_start", callback);
  }

  removeOnBuildingRepairStart(callback: (ctx: ReducerEventContext, request: PlayerBuildingRepairRequest) => void) {
    this.connection.offReducer("building_repair_start", callback);
  }

  buildingSetNickname(request: PlayerBuildingSetNicknameRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    BuildingSetNickname.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("building_set_nickname", __argsBuffer, this.setCallReducerFlags.buildingSetNicknameFlags);
  }

  onBuildingSetNickname(callback: (ctx: ReducerEventContext, request: PlayerBuildingSetNicknameRequest) => void) {
    this.connection.onReducer("building_set_nickname", callback);
  }

  removeOnBuildingSetNickname(callback: (ctx: ReducerEventContext, request: PlayerBuildingSetNicknameRequest) => void) {
    this.connection.offReducer("building_set_nickname", callback);
  }

  buildingSetSignText(request: BuildingSetSignTextRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    BuildingSetSignText.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("building_set_sign_text", __argsBuffer, this.setCallReducerFlags.buildingSetSignTextFlags);
  }

  onBuildingSetSignText(callback: (ctx: ReducerEventContext, request: BuildingSetSignTextRequest) => void) {
    this.connection.onReducer("building_set_sign_text", callback);
  }

  removeOnBuildingSetSignText(callback: (ctx: ReducerEventContext, request: BuildingSetSignTextRequest) => void) {
    this.connection.offReducer("building_set_sign_text", callback);
  }

  chatCleanupAgentInsert() {
    this.connection.callReducer("chat_cleanup_agent_insert", new Uint8Array(0), this.setCallReducerFlags.chatCleanupAgentInsertFlags);
  }

  onChatCleanupAgentInsert(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("chat_cleanup_agent_insert", callback);
  }

  removeOnChatCleanupAgentInsert(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("chat_cleanup_agent_insert", callback);
  }

  chatCleanupAgentLoop(timer: ChatCleanupTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    ChatCleanupAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("chat_cleanup_agent_loop", __argsBuffer, this.setCallReducerFlags.chatCleanupAgentLoopFlags);
  }

  onChatCleanupAgentLoop(callback: (ctx: ReducerEventContext, timer: ChatCleanupTimer) => void) {
    this.connection.onReducer("chat_cleanup_agent_loop", callback);
  }

  removeOnChatCleanupAgentLoop(callback: (ctx: ReducerEventContext, timer: ChatCleanupTimer) => void) {
    this.connection.offReducer("chat_cleanup_agent_loop", callback);
  }

  chatPostMessage(request: PlayerChatPostMessageRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ChatPostMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("chat_post_message", __argsBuffer, this.setCallReducerFlags.chatPostMessageFlags);
  }

  onChatPostMessage(callback: (ctx: ReducerEventContext, request: PlayerChatPostMessageRequest) => void) {
    this.connection.onReducer("chat_post_message", callback);
  }

  removeOnChatPostMessage(callback: (ctx: ReducerEventContext, request: PlayerChatPostMessageRequest) => void) {
    this.connection.offReducer("chat_post_message", callback);
  }

  cheatBuildingMove(request: PlayerBuildingMoveRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatBuildingMove.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_building_move", __argsBuffer, this.setCallReducerFlags.cheatBuildingMoveFlags);
  }

  onCheatBuildingMove(callback: (ctx: ReducerEventContext, request: PlayerBuildingMoveRequest) => void) {
    this.connection.onReducer("cheat_building_move", callback);
  }

  removeOnCheatBuildingMove(callback: (ctx: ReducerEventContext, request: PlayerBuildingMoveRequest) => void) {
    this.connection.offReducer("cheat_building_move", callback);
  }

  cheatBuildingPlace(request: PlayerProjectSitePlaceRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatBuildingPlace.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_building_place", __argsBuffer, this.setCallReducerFlags.cheatBuildingPlaceFlags);
  }

  onCheatBuildingPlace(callback: (ctx: ReducerEventContext, request: PlayerProjectSitePlaceRequest) => void) {
    this.connection.onReducer("cheat_building_place", callback);
  }

  removeOnCheatBuildingPlace(callback: (ctx: ReducerEventContext, request: PlayerProjectSitePlaceRequest) => void) {
    this.connection.offReducer("cheat_building_place", callback);
  }

  cheatCargoGrant(request: CheatCargoGrantRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatCargoGrant.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_cargo_grant", __argsBuffer, this.setCallReducerFlags.cheatCargoGrantFlags);
  }

  onCheatCargoGrant(callback: (ctx: ReducerEventContext, request: CheatCargoGrantRequest) => void) {
    this.connection.onReducer("cheat_cargo_grant", callback);
  }

  removeOnCheatCargoGrant(callback: (ctx: ReducerEventContext, request: CheatCargoGrantRequest) => void) {
    this.connection.offReducer("cheat_cargo_grant", callback);
  }

  cheatClaimTakeOwnership(claimEntityId: bigint) {
    const __args = { claimEntityId };
    let __writer = new BinaryWriter(1024);
    CheatClaimTakeOwnership.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_claim_take_ownership", __argsBuffer, this.setCallReducerFlags.cheatClaimTakeOwnershipFlags);
  }

  onCheatClaimTakeOwnership(callback: (ctx: ReducerEventContext, claimEntityId: bigint) => void) {
    this.connection.onReducer("cheat_claim_take_ownership", callback);
  }

  removeOnCheatClaimTakeOwnership(callback: (ctx: ReducerEventContext, claimEntityId: bigint) => void) {
    this.connection.offReducer("cheat_claim_take_ownership", callback);
  }

  cheatClaimTotemAddSupplies(claimEntityId: bigint, amount: number) {
    const __args = { claimEntityId, amount };
    let __writer = new BinaryWriter(1024);
    CheatClaimTotemAddSupplies.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_claim_totem_add_supplies", __argsBuffer, this.setCallReducerFlags.cheatClaimTotemAddSuppliesFlags);
  }

  onCheatClaimTotemAddSupplies(callback: (ctx: ReducerEventContext, claimEntityId: bigint, amount: number) => void) {
    this.connection.onReducer("cheat_claim_totem_add_supplies", callback);
  }

  removeOnCheatClaimTotemAddSupplies(callback: (ctx: ReducerEventContext, claimEntityId: bigint, amount: number) => void) {
    this.connection.offReducer("cheat_claim_totem_add_supplies", callback);
  }

  cheatClaimTotemCompleteCurrentResearch(claimEntityId: bigint) {
    const __args = { claimEntityId };
    let __writer = new BinaryWriter(1024);
    CheatClaimTotemCompleteCurrentResearch.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_claim_totem_complete_current_research", __argsBuffer, this.setCallReducerFlags.cheatClaimTotemCompleteCurrentResearchFlags);
  }

  onCheatClaimTotemCompleteCurrentResearch(callback: (ctx: ReducerEventContext, claimEntityId: bigint) => void) {
    this.connection.onReducer("cheat_claim_totem_complete_current_research", callback);
  }

  removeOnCheatClaimTotemCompleteCurrentResearch(callback: (ctx: ReducerEventContext, claimEntityId: bigint) => void) {
    this.connection.offReducer("cheat_claim_totem_complete_current_research", callback);
  }

  cheatClaimTotemResearchAll(claimEntityId: bigint) {
    const __args = { claimEntityId };
    let __writer = new BinaryWriter(1024);
    CheatClaimTotemResearchAll.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_claim_totem_research_all", __argsBuffer, this.setCallReducerFlags.cheatClaimTotemResearchAllFlags);
  }

  onCheatClaimTotemResearchAll(callback: (ctx: ReducerEventContext, claimEntityId: bigint) => void) {
    this.connection.onReducer("cheat_claim_totem_research_all", callback);
  }

  removeOnCheatClaimTotemResearchAll(callback: (ctx: ReducerEventContext, claimEntityId: bigint) => void) {
    this.connection.offReducer("cheat_claim_totem_research_all", callback);
  }

  cheatClearBuffsAndDebuffs(playerEntityId: bigint) {
    const __args = { playerEntityId };
    let __writer = new BinaryWriter(1024);
    CheatClearBuffsAndDebuffs.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_clear_buffs_and_debuffs", __argsBuffer, this.setCallReducerFlags.cheatClearBuffsAndDebuffsFlags);
  }

  onCheatClearBuffsAndDebuffs(callback: (ctx: ReducerEventContext, playerEntityId: bigint) => void) {
    this.connection.onReducer("cheat_clear_buffs_and_debuffs", callback);
  }

  removeOnCheatClearBuffsAndDebuffs(callback: (ctx: ReducerEventContext, playerEntityId: bigint) => void) {
    this.connection.offReducer("cheat_clear_buffs_and_debuffs", callback);
  }

  cheatCompendiumPlaceEnemy(request: CheatCompendiumEnemyPlaceRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatCompendiumPlaceEnemy.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_compendium_place_enemy", __argsBuffer, this.setCallReducerFlags.cheatCompendiumPlaceEnemyFlags);
  }

  onCheatCompendiumPlaceEnemy(callback: (ctx: ReducerEventContext, request: CheatCompendiumEnemyPlaceRequest) => void) {
    this.connection.onReducer("cheat_compendium_place_enemy", callback);
  }

  removeOnCheatCompendiumPlaceEnemy(callback: (ctx: ReducerEventContext, request: CheatCompendiumEnemyPlaceRequest) => void) {
    this.connection.offReducer("cheat_compendium_place_enemy", callback);
  }

  cheatCompendiumPlaceResource(request: CheatCompendiumItemPlaceRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatCompendiumPlaceResource.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_compendium_place_resource", __argsBuffer, this.setCallReducerFlags.cheatCompendiumPlaceResourceFlags);
  }

  onCheatCompendiumPlaceResource(callback: (ctx: ReducerEventContext, request: CheatCompendiumItemPlaceRequest) => void) {
    this.connection.onReducer("cheat_compendium_place_resource", callback);
  }

  removeOnCheatCompendiumPlaceResource(callback: (ctx: ReducerEventContext, request: CheatCompendiumItemPlaceRequest) => void) {
    this.connection.offReducer("cheat_compendium_place_resource", callback);
  }

  cheatDeleteItem(inventoryEntityId: bigint, pocketIndex: number) {
    const __args = { inventoryEntityId, pocketIndex };
    let __writer = new BinaryWriter(1024);
    CheatDeleteItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_delete_item", __argsBuffer, this.setCallReducerFlags.cheatDeleteItemFlags);
  }

  onCheatDeleteItem(callback: (ctx: ReducerEventContext, inventoryEntityId: bigint, pocketIndex: number) => void) {
    this.connection.onReducer("cheat_delete_item", callback);
  }

  removeOnCheatDeleteItem(callback: (ctx: ReducerEventContext, inventoryEntityId: bigint, pocketIndex: number) => void) {
    this.connection.offReducer("cheat_delete_item", callback);
  }

  cheatDeployableStore(deployableEntityId: bigint) {
    const __args = { deployableEntityId };
    let __writer = new BinaryWriter(1024);
    CheatDeployableStore.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_deployable_store", __argsBuffer, this.setCallReducerFlags.cheatDeployableStoreFlags);
  }

  onCheatDeployableStore(callback: (ctx: ReducerEventContext, deployableEntityId: bigint) => void) {
    this.connection.onReducer("cheat_deployable_store", callback);
  }

  removeOnCheatDeployableStore(callback: (ctx: ReducerEventContext, deployableEntityId: bigint) => void) {
    this.connection.offReducer("cheat_deployable_store", callback);
  }

  cheatDiscoverMap(request: CheatDiscoverMapRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatDiscoverMap.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_discover_map", __argsBuffer, this.setCallReducerFlags.cheatDiscoverMapFlags);
  }

  onCheatDiscoverMap(callback: (ctx: ReducerEventContext, request: CheatDiscoverMapRequest) => void) {
    this.connection.onReducer("cheat_discover_map", callback);
  }

  removeOnCheatDiscoverMap(callback: (ctx: ReducerEventContext, request: CheatDiscoverMapRequest) => void) {
    this.connection.offReducer("cheat_discover_map", callback);
  }

  cheatExperienceGrant(request: CheatExperienceGrantRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatExperienceGrant.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_experience_grant", __argsBuffer, this.setCallReducerFlags.cheatExperienceGrantFlags);
  }

  onCheatExperienceGrant(callback: (ctx: ReducerEventContext, request: CheatExperienceGrantRequest) => void) {
    this.connection.onReducer("cheat_experience_grant", callback);
  }

  removeOnCheatExperienceGrant(callback: (ctx: ReducerEventContext, request: CheatExperienceGrantRequest) => void) {
    this.connection.offReducer("cheat_experience_grant", callback);
  }

  cheatGrantKnowledge(request: CheatGrantKnowledgeRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatGrantKnowledge.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_grant_knowledge", __argsBuffer, this.setCallReducerFlags.cheatGrantKnowledgeFlags);
  }

  onCheatGrantKnowledge(callback: (ctx: ReducerEventContext, request: CheatGrantKnowledgeRequest) => void) {
    this.connection.onReducer("cheat_grant_knowledge", callback);
  }

  removeOnCheatGrantKnowledge(callback: (ctx: ReducerEventContext, request: CheatGrantKnowledgeRequest) => void) {
    this.connection.offReducer("cheat_grant_knowledge", callback);
  }

  cheatGrantTeleportEnergy(playerEntityId: bigint, amount: number) {
    const __args = { playerEntityId, amount };
    let __writer = new BinaryWriter(1024);
    CheatGrantTeleportEnergy.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_grant_teleport_energy", __argsBuffer, this.setCallReducerFlags.cheatGrantTeleportEnergyFlags);
  }

  onCheatGrantTeleportEnergy(callback: (ctx: ReducerEventContext, playerEntityId: bigint, amount: number) => void) {
    this.connection.onReducer("cheat_grant_teleport_energy", callback);
  }

  removeOnCheatGrantTeleportEnergy(callback: (ctx: ReducerEventContext, playerEntityId: bigint, amount: number) => void) {
    this.connection.offReducer("cheat_grant_teleport_energy", callback);
  }

  cheatItemStackGrant(playerEntityId: bigint, itemId: number, quantity: number, isCargo: boolean) {
    const __args = { playerEntityId, itemId, quantity, isCargo };
    let __writer = new BinaryWriter(1024);
    CheatItemStackGrant.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_item_stack_grant", __argsBuffer, this.setCallReducerFlags.cheatItemStackGrantFlags);
  }

  onCheatItemStackGrant(callback: (ctx: ReducerEventContext, playerEntityId: bigint, itemId: number, quantity: number, isCargo: boolean) => void) {
    this.connection.onReducer("cheat_item_stack_grant", callback);
  }

  removeOnCheatItemStackGrant(callback: (ctx: ReducerEventContext, playerEntityId: bigint, itemId: number, quantity: number, isCargo: boolean) => void) {
    this.connection.offReducer("cheat_item_stack_grant", callback);
  }

  cheatItemStackGrantAndEquip(playerEntityId: bigint, itemId: number, quantity: number, isCargo: boolean) {
    const __args = { playerEntityId, itemId, quantity, isCargo };
    let __writer = new BinaryWriter(1024);
    CheatItemStackGrantAndEquip.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_item_stack_grant_and_equip", __argsBuffer, this.setCallReducerFlags.cheatItemStackGrantAndEquipFlags);
  }

  onCheatItemStackGrantAndEquip(callback: (ctx: ReducerEventContext, playerEntityId: bigint, itemId: number, quantity: number, isCargo: boolean) => void) {
    this.connection.onReducer("cheat_item_stack_grant_and_equip", callback);
  }

  removeOnCheatItemStackGrantAndEquip(callback: (ctx: ReducerEventContext, playerEntityId: bigint, itemId: number, quantity: number, isCargo: boolean) => void) {
    this.connection.offReducer("cheat_item_stack_grant_and_equip", callback);
  }

  cheatKill(entityId: bigint) {
    const __args = { entityId };
    let __writer = new BinaryWriter(1024);
    CheatKill.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_kill", __argsBuffer, this.setCallReducerFlags.cheatKillFlags);
  }

  onCheatKill(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.onReducer("cheat_kill", callback);
  }

  removeOnCheatKill(callback: (ctx: ReducerEventContext, entityId: bigint) => void) {
    this.connection.offReducer("cheat_kill", callback);
  }

  cheatPavingAddTile(request: PlayerPavingPlaceTileRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatPavingAddTile.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_paving_add_tile", __argsBuffer, this.setCallReducerFlags.cheatPavingAddTileFlags);
  }

  onCheatPavingAddTile(callback: (ctx: ReducerEventContext, request: PlayerPavingPlaceTileRequest) => void) {
    this.connection.onReducer("cheat_paving_add_tile", callback);
  }

  removeOnCheatPavingAddTile(callback: (ctx: ReducerEventContext, request: PlayerPavingPlaceTileRequest) => void) {
    this.connection.offReducer("cheat_paving_add_tile", callback);
  }

  cheatPavingDestroy(x: number, z: number, dimension: number) {
    const __args = { x, z, dimension };
    let __writer = new BinaryWriter(1024);
    CheatPavingDestroy.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_paving_destroy", __argsBuffer, this.setCallReducerFlags.cheatPavingDestroyFlags);
  }

  onCheatPavingDestroy(callback: (ctx: ReducerEventContext, x: number, z: number, dimension: number) => void) {
    this.connection.onReducer("cheat_paving_destroy", callback);
  }

  removeOnCheatPavingDestroy(callback: (ctx: ReducerEventContext, x: number, z: number, dimension: number) => void) {
    this.connection.offReducer("cheat_paving_destroy", callback);
  }

  cheatPillarShapingAddPillar(request: PlayerPillarShapingPlaceRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatPillarShapingAddPillar.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_pillar_shaping_add_pillar", __argsBuffer, this.setCallReducerFlags.cheatPillarShapingAddPillarFlags);
  }

  onCheatPillarShapingAddPillar(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingPlaceRequest) => void) {
    this.connection.onReducer("cheat_pillar_shaping_add_pillar", callback);
  }

  removeOnCheatPillarShapingAddPillar(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingPlaceRequest) => void) {
    this.connection.offReducer("cheat_pillar_shaping_add_pillar", callback);
  }

  cheatPillarShapingDestroy(request: PlayerPillarShapingDestroyRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatPillarShapingDestroy.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_pillar_shaping_destroy", __argsBuffer, this.setCallReducerFlags.cheatPillarShapingDestroyFlags);
  }

  onCheatPillarShapingDestroy(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingDestroyRequest) => void) {
    this.connection.onReducer("cheat_pillar_shaping_destroy", callback);
  }

  removeOnCheatPillarShapingDestroy(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingDestroyRequest) => void) {
    this.connection.offReducer("cheat_pillar_shaping_destroy", callback);
  }

  cheatProjectSiteAddAllMaterials(projectSiteEntityId: bigint) {
    const __args = { projectSiteEntityId };
    let __writer = new BinaryWriter(1024);
    CheatProjectSiteAddAllMaterials.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_project_site_add_all_materials", __argsBuffer, this.setCallReducerFlags.cheatProjectSiteAddAllMaterialsFlags);
  }

  onCheatProjectSiteAddAllMaterials(callback: (ctx: ReducerEventContext, projectSiteEntityId: bigint) => void) {
    this.connection.onReducer("cheat_project_site_add_all_materials", callback);
  }

  removeOnCheatProjectSiteAddAllMaterials(callback: (ctx: ReducerEventContext, projectSiteEntityId: bigint) => void) {
    this.connection.offReducer("cheat_project_site_add_all_materials", callback);
  }

  cheatRemoveEntityBuilding(buildingEntityId: bigint) {
    const __args = { buildingEntityId };
    let __writer = new BinaryWriter(1024);
    CheatRemoveEntityBuilding.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_remove_entity_building", __argsBuffer, this.setCallReducerFlags.cheatRemoveEntityBuildingFlags);
  }

  onCheatRemoveEntityBuilding(callback: (ctx: ReducerEventContext, buildingEntityId: bigint) => void) {
    this.connection.onReducer("cheat_remove_entity_building", callback);
  }

  removeOnCheatRemoveEntityBuilding(callback: (ctx: ReducerEventContext, buildingEntityId: bigint) => void) {
    this.connection.offReducer("cheat_remove_entity_building", callback);
  }

  cheatRemoveEntityEnemy(enemyEntityId: bigint) {
    const __args = { enemyEntityId };
    let __writer = new BinaryWriter(1024);
    CheatRemoveEntityEnemy.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_remove_entity_enemy", __argsBuffer, this.setCallReducerFlags.cheatRemoveEntityEnemyFlags);
  }

  onCheatRemoveEntityEnemy(callback: (ctx: ReducerEventContext, enemyEntityId: bigint) => void) {
    this.connection.onReducer("cheat_remove_entity_enemy", callback);
  }

  removeOnCheatRemoveEntityEnemy(callback: (ctx: ReducerEventContext, enemyEntityId: bigint) => void) {
    this.connection.offReducer("cheat_remove_entity_enemy", callback);
  }

  cheatRemoveEntityResource(targetEntityId: bigint) {
    const __args = { targetEntityId };
    let __writer = new BinaryWriter(1024);
    CheatRemoveEntityResource.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_remove_entity_resource", __argsBuffer, this.setCallReducerFlags.cheatRemoveEntityResourceFlags);
  }

  onCheatRemoveEntityResource(callback: (ctx: ReducerEventContext, targetEntityId: bigint) => void) {
    this.connection.onReducer("cheat_remove_entity_resource", callback);
  }

  removeOnCheatRemoveEntityResource(callback: (ctx: ReducerEventContext, targetEntityId: bigint) => void) {
    this.connection.offReducer("cheat_remove_entity_resource", callback);
  }

  cheatRemoveItemQuantity(inventoryEntityId: bigint, pocketIndex: number, quantityToRemove: number) {
    const __args = { inventoryEntityId, pocketIndex, quantityToRemove };
    let __writer = new BinaryWriter(1024);
    CheatRemoveItemQuantity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_remove_item_quantity", __argsBuffer, this.setCallReducerFlags.cheatRemoveItemQuantityFlags);
  }

  onCheatRemoveItemQuantity(callback: (ctx: ReducerEventContext, inventoryEntityId: bigint, pocketIndex: number, quantityToRemove: number) => void) {
    this.connection.onReducer("cheat_remove_item_quantity", callback);
  }

  removeOnCheatRemoveItemQuantity(callback: (ctx: ReducerEventContext, inventoryEntityId: bigint, pocketIndex: number, quantityToRemove: number) => void) {
    this.connection.offReducer("cheat_remove_item_quantity", callback);
  }

  cheatSetAiDebugState(request: CheatSetDebugAiStateRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatSetAiDebugState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_set_ai_debug_state", __argsBuffer, this.setCallReducerFlags.cheatSetAiDebugStateFlags);
  }

  onCheatSetAiDebugState(callback: (ctx: ReducerEventContext, request: CheatSetDebugAiStateRequest) => void) {
    this.connection.onReducer("cheat_set_ai_debug_state", callback);
  }

  removeOnCheatSetAiDebugState(callback: (ctx: ReducerEventContext, request: CheatSetDebugAiStateRequest) => void) {
    this.connection.offReducer("cheat_set_ai_debug_state", callback);
  }

  cheatSpawnLootChest(request: CheatSpawnLootChestRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatSpawnLootChest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_spawn_loot_chest", __argsBuffer, this.setCallReducerFlags.cheatSpawnLootChestFlags);
  }

  onCheatSpawnLootChest(callback: (ctx: ReducerEventContext, request: CheatSpawnLootChestRequest) => void) {
    this.connection.onReducer("cheat_spawn_loot_chest", callback);
  }

  removeOnCheatSpawnLootChest(callback: (ctx: ReducerEventContext, request: CheatSpawnLootChestRequest) => void) {
    this.connection.offReducer("cheat_spawn_loot_chest", callback);
  }

  cheatTeleportFloat(request: CheatTeleportFloatRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatTeleportFloat.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_teleport_float", __argsBuffer, this.setCallReducerFlags.cheatTeleportFloatFlags);
  }

  onCheatTeleportFloat(callback: (ctx: ReducerEventContext, request: CheatTeleportFloatRequest) => void) {
    this.connection.onReducer("cheat_teleport_float", callback);
  }

  removeOnCheatTeleportFloat(callback: (ctx: ReducerEventContext, request: CheatTeleportFloatRequest) => void) {
    this.connection.offReducer("cheat_teleport_float", callback);
  }

  cheatTerraform(x: number, z: number, dimension: number, delta: number) {
    const __args = { x, z, dimension, delta };
    let __writer = new BinaryWriter(1024);
    CheatTerraform.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_terraform", __argsBuffer, this.setCallReducerFlags.cheatTerraformFlags);
  }

  onCheatTerraform(callback: (ctx: ReducerEventContext, x: number, z: number, dimension: number, delta: number) => void) {
    this.connection.onReducer("cheat_terraform", callback);
  }

  removeOnCheatTerraform(callback: (ctx: ReducerEventContext, x: number, z: number, dimension: number, delta: number) => void) {
    this.connection.offReducer("cheat_terraform", callback);
  }

  cheatToggleActiveCollectible(request: CheatToggleActiveCollectibleRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatToggleActiveCollectible.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_toggle_active_collectible", __argsBuffer, this.setCallReducerFlags.cheatToggleActiveCollectibleFlags);
  }

  onCheatToggleActiveCollectible(callback: (ctx: ReducerEventContext, request: CheatToggleActiveCollectibleRequest) => void) {
    this.connection.onReducer("cheat_toggle_active_collectible", callback);
  }

  removeOnCheatToggleActiveCollectible(callback: (ctx: ReducerEventContext, request: CheatToggleActiveCollectibleRequest) => void) {
    this.connection.offReducer("cheat_toggle_active_collectible", callback);
  }

  cheatWarp(request: CheatWarpRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CheatWarp.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cheat_warp", __argsBuffer, this.setCallReducerFlags.cheatWarpFlags);
  }

  onCheatWarp(callback: (ctx: ReducerEventContext, request: CheatWarpRequest) => void) {
    this.connection.onReducer("cheat_warp", callback);
  }

  removeOnCheatWarp(callback: (ctx: ReducerEventContext, request: CheatWarpRequest) => void) {
    this.connection.offReducer("cheat_warp", callback);
  }

  claimAddMember(request: PlayerClaimAddMemberRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimAddMember.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_add_member", __argsBuffer, this.setCallReducerFlags.claimAddMemberFlags);
  }

  onClaimAddMember(callback: (ctx: ReducerEventContext, request: PlayerClaimAddMemberRequest) => void) {
    this.connection.onReducer("claim_add_member", callback);
  }

  removeOnClaimAddMember(callback: (ctx: ReducerEventContext, request: PlayerClaimAddMemberRequest) => void) {
    this.connection.offReducer("claim_add_member", callback);
  }

  claimAddRecruitment(request: PlayerClaimAddRecruitmentRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimAddRecruitment.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_add_recruitment", __argsBuffer, this.setCallReducerFlags.claimAddRecruitmentFlags);
  }

  onClaimAddRecruitment(callback: (ctx: ReducerEventContext, request: PlayerClaimAddRecruitmentRequest) => void) {
    this.connection.onReducer("claim_add_recruitment", callback);
  }

  removeOnClaimAddRecruitment(callback: (ctx: ReducerEventContext, request: PlayerClaimAddRecruitmentRequest) => void) {
    this.connection.offReducer("claim_add_recruitment", callback);
  }

  claimAddTile(request: PlayerClaimAddTileRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimAddTile.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_add_tile", __argsBuffer, this.setCallReducerFlags.claimAddTileFlags);
  }

  onClaimAddTile(callback: (ctx: ReducerEventContext, request: PlayerClaimAddTileRequest) => void) {
    this.connection.onReducer("claim_add_tile", callback);
  }

  removeOnClaimAddTile(callback: (ctx: ReducerEventContext, request: PlayerClaimAddTileRequest) => void) {
    this.connection.offReducer("claim_add_tile", callback);
  }

  claimApplyForRecruitment(request: PlayerClaimApplyForRecruitmentRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimApplyForRecruitment.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_apply_for_recruitment", __argsBuffer, this.setCallReducerFlags.claimApplyForRecruitmentFlags);
  }

  onClaimApplyForRecruitment(callback: (ctx: ReducerEventContext, request: PlayerClaimApplyForRecruitmentRequest) => void) {
    this.connection.onReducer("claim_apply_for_recruitment", callback);
  }

  removeOnClaimApplyForRecruitment(callback: (ctx: ReducerEventContext, request: PlayerClaimApplyForRecruitmentRequest) => void) {
    this.connection.offReducer("claim_apply_for_recruitment", callback);
  }

  claimLeave(request: PlayerClaimLeaveRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimLeave.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_leave", __argsBuffer, this.setCallReducerFlags.claimLeaveFlags);
  }

  onClaimLeave(callback: (ctx: ReducerEventContext, request: PlayerClaimLeaveRequest) => void) {
    this.connection.onReducer("claim_leave", callback);
  }

  removeOnClaimLeave(callback: (ctx: ReducerEventContext, request: PlayerClaimLeaveRequest) => void) {
    this.connection.offReducer("claim_leave", callback);
  }

  claimPurchaseSuppliesFromPlayer(request: ClaimPurchaseSuppliesFromPlayerRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimPurchaseSuppliesFromPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_purchase_supplies_from_player", __argsBuffer, this.setCallReducerFlags.claimPurchaseSuppliesFromPlayerFlags);
  }

  onClaimPurchaseSuppliesFromPlayer(callback: (ctx: ReducerEventContext, request: ClaimPurchaseSuppliesFromPlayerRequest) => void) {
    this.connection.onReducer("claim_purchase_supplies_from_player", callback);
  }

  removeOnClaimPurchaseSuppliesFromPlayer(callback: (ctx: ReducerEventContext, request: ClaimPurchaseSuppliesFromPlayerRequest) => void) {
    this.connection.offReducer("claim_purchase_supplies_from_player", callback);
  }

  claimRemoveMember(request: PlayerClaimRemoveMemberRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimRemoveMember.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_remove_member", __argsBuffer, this.setCallReducerFlags.claimRemoveMemberFlags);
  }

  onClaimRemoveMember(callback: (ctx: ReducerEventContext, request: PlayerClaimRemoveMemberRequest) => void) {
    this.connection.onReducer("claim_remove_member", callback);
  }

  removeOnClaimRemoveMember(callback: (ctx: ReducerEventContext, request: PlayerClaimRemoveMemberRequest) => void) {
    this.connection.offReducer("claim_remove_member", callback);
  }

  claimRemoveRecruitment(request: PlayerClaimRemoveRecruitmentRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimRemoveRecruitment.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_remove_recruitment", __argsBuffer, this.setCallReducerFlags.claimRemoveRecruitmentFlags);
  }

  onClaimRemoveRecruitment(callback: (ctx: ReducerEventContext, request: PlayerClaimRemoveRecruitmentRequest) => void) {
    this.connection.onReducer("claim_remove_recruitment", callback);
  }

  removeOnClaimRemoveRecruitment(callback: (ctx: ReducerEventContext, request: PlayerClaimRemoveRecruitmentRequest) => void) {
    this.connection.offReducer("claim_remove_recruitment", callback);
  }

  claimRemoveTile(request: PlayerClaimRemoveTileRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimRemoveTile.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_remove_tile", __argsBuffer, this.setCallReducerFlags.claimRemoveTileFlags);
  }

  onClaimRemoveTile(callback: (ctx: ReducerEventContext, request: PlayerClaimRemoveTileRequest) => void) {
    this.connection.onReducer("claim_remove_tile", callback);
  }

  removeOnClaimRemoveTile(callback: (ctx: ReducerEventContext, request: PlayerClaimRemoveTileRequest) => void) {
    this.connection.offReducer("claim_remove_tile", callback);
  }

  claimRename(request: PlayerClaimRenameRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimRename.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_rename", __argsBuffer, this.setCallReducerFlags.claimRenameFlags);
  }

  onClaimRename(callback: (ctx: ReducerEventContext, request: PlayerClaimRenameRequest) => void) {
    this.connection.onReducer("claim_rename", callback);
  }

  removeOnClaimRename(callback: (ctx: ReducerEventContext, request: PlayerClaimRenameRequest) => void) {
    this.connection.offReducer("claim_rename", callback);
  }

  claimResupply(request: ClaimResupplyRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimResupply.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_resupply", __argsBuffer, this.setCallReducerFlags.claimResupplyFlags);
  }

  onClaimResupply(callback: (ctx: ReducerEventContext, request: ClaimResupplyRequest) => void) {
    this.connection.onReducer("claim_resupply", callback);
  }

  removeOnClaimResupply(callback: (ctx: ReducerEventContext, request: ClaimResupplyRequest) => void) {
    this.connection.offReducer("claim_resupply", callback);
  }

  claimResupplyStart(request: ClaimResupplyRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimResupplyStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_resupply_start", __argsBuffer, this.setCallReducerFlags.claimResupplyStartFlags);
  }

  onClaimResupplyStart(callback: (ctx: ReducerEventContext, request: ClaimResupplyRequest) => void) {
    this.connection.onReducer("claim_resupply_start", callback);
  }

  removeOnClaimResupplyStart(callback: (ctx: ReducerEventContext, request: ClaimResupplyRequest) => void) {
    this.connection.offReducer("claim_resupply_start", callback);
  }

  claimSetMemberPermissions(request: PlayerClaimSetMemberPermissionsRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimSetMemberPermissions.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_set_member_permissions", __argsBuffer, this.setCallReducerFlags.claimSetMemberPermissionsFlags);
  }

  onClaimSetMemberPermissions(callback: (ctx: ReducerEventContext, request: PlayerClaimSetMemberPermissionsRequest) => void) {
    this.connection.onReducer("claim_set_member_permissions", callback);
  }

  removeOnClaimSetMemberPermissions(callback: (ctx: ReducerEventContext, request: PlayerClaimSetMemberPermissionsRequest) => void) {
    this.connection.offReducer("claim_set_member_permissions", callback);
  }

  claimSetPurchaseSupplyPrice(request: ClaimSetPurchaseSupplyPriceRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimSetPurchaseSupplyPrice.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_set_purchase_supply_price", __argsBuffer, this.setCallReducerFlags.claimSetPurchaseSupplyPriceFlags);
  }

  onClaimSetPurchaseSupplyPrice(callback: (ctx: ReducerEventContext, request: ClaimSetPurchaseSupplyPriceRequest) => void) {
    this.connection.onReducer("claim_set_purchase_supply_price", callback);
  }

  removeOnClaimSetPurchaseSupplyPrice(callback: (ctx: ReducerEventContext, request: ClaimSetPurchaseSupplyPriceRequest) => void) {
    this.connection.offReducer("claim_set_purchase_supply_price", callback);
  }

  claimSetPurchaseSupplyThreshold(request: ClaimSetPurchaseSupplyThresholdRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimSetPurchaseSupplyThreshold.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_set_purchase_supply_threshold", __argsBuffer, this.setCallReducerFlags.claimSetPurchaseSupplyThresholdFlags);
  }

  onClaimSetPurchaseSupplyThreshold(callback: (ctx: ReducerEventContext, request: ClaimSetPurchaseSupplyThresholdRequest) => void) {
    this.connection.onReducer("claim_set_purchase_supply_threshold", callback);
  }

  removeOnClaimSetPurchaseSupplyThreshold(callback: (ctx: ReducerEventContext, request: ClaimSetPurchaseSupplyThresholdRequest) => void) {
    this.connection.offReducer("claim_set_purchase_supply_threshold", callback);
  }

  claimTakeOwnership(request: PlayerClaimTakeOwnershipRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimTakeOwnership.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_take_ownership", __argsBuffer, this.setCallReducerFlags.claimTakeOwnershipFlags);
  }

  onClaimTakeOwnership(callback: (ctx: ReducerEventContext, request: PlayerClaimTakeOwnershipRequest) => void) {
    this.connection.onReducer("claim_take_ownership", callback);
  }

  removeOnClaimTakeOwnership(callback: (ctx: ReducerEventContext, request: PlayerClaimTakeOwnershipRequest) => void) {
    this.connection.offReducer("claim_take_ownership", callback);
  }

  claimTechCancel(request: PlayerClaimTechCancelRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimTechCancel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_tech_cancel", __argsBuffer, this.setCallReducerFlags.claimTechCancelFlags);
  }

  onClaimTechCancel(callback: (ctx: ReducerEventContext, request: PlayerClaimTechCancelRequest) => void) {
    this.connection.onReducer("claim_tech_cancel", callback);
  }

  removeOnClaimTechCancel(callback: (ctx: ReducerEventContext, request: PlayerClaimTechCancelRequest) => void) {
    this.connection.offReducer("claim_tech_cancel", callback);
  }

  claimTechLearn(request: PlayerClaimTechLearnRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimTechLearn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_tech_learn", __argsBuffer, this.setCallReducerFlags.claimTechLearnFlags);
  }

  onClaimTechLearn(callback: (ctx: ReducerEventContext, request: PlayerClaimTechLearnRequest) => void) {
    this.connection.onReducer("claim_tech_learn", callback);
  }

  removeOnClaimTechLearn(callback: (ctx: ReducerEventContext, request: PlayerClaimTechLearnRequest) => void) {
    this.connection.offReducer("claim_tech_learn", callback);
  }

  claimTechUnlockTech(timer: ClaimTechUnlockTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    ClaimTechUnlockTech.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_tech_unlock_tech", __argsBuffer, this.setCallReducerFlags.claimTechUnlockTechFlags);
  }

  onClaimTechUnlockTech(callback: (ctx: ReducerEventContext, timer: ClaimTechUnlockTimer) => void) {
    this.connection.onReducer("claim_tech_unlock_tech", callback);
  }

  removeOnClaimTechUnlockTech(callback: (ctx: ReducerEventContext, timer: ClaimTechUnlockTimer) => void) {
    this.connection.offReducer("claim_tech_unlock_tech", callback);
  }

  claimTransferOwnership(request: PlayerClaimTransferOwnershipRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimTransferOwnership.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_transfer_ownership", __argsBuffer, this.setCallReducerFlags.claimTransferOwnershipFlags);
  }

  onClaimTransferOwnership(callback: (ctx: ReducerEventContext, request: PlayerClaimTransferOwnershipRequest) => void) {
    this.connection.onReducer("claim_transfer_ownership", callback);
  }

  removeOnClaimTransferOwnership(callback: (ctx: ReducerEventContext, request: PlayerClaimTransferOwnershipRequest) => void) {
    this.connection.offReducer("claim_transfer_ownership", callback);
  }

  claimTreasuryDeposit(request: PlayerClaimDepositToTreasuryRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimTreasuryDeposit.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_treasury_deposit", __argsBuffer, this.setCallReducerFlags.claimTreasuryDepositFlags);
  }

  onClaimTreasuryDeposit(callback: (ctx: ReducerEventContext, request: PlayerClaimDepositToTreasuryRequest) => void) {
    this.connection.onReducer("claim_treasury_deposit", callback);
  }

  removeOnClaimTreasuryDeposit(callback: (ctx: ReducerEventContext, request: PlayerClaimDepositToTreasuryRequest) => void) {
    this.connection.offReducer("claim_treasury_deposit", callback);
  }

  claimWithdrawFromTreasury(request: PlayerClaimWithdrawFromTreasuryRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClaimWithdrawFromTreasury.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_withdraw_from_treasury", __argsBuffer, this.setCallReducerFlags.claimWithdrawFromTreasuryFlags);
  }

  onClaimWithdrawFromTreasury(callback: (ctx: ReducerEventContext, request: PlayerClaimWithdrawFromTreasuryRequest) => void) {
    this.connection.onReducer("claim_withdraw_from_treasury", callback);
  }

  removeOnClaimWithdrawFromTreasury(callback: (ctx: ReducerEventContext, request: PlayerClaimWithdrawFromTreasuryRequest) => void) {
    this.connection.offReducer("claim_withdraw_from_treasury", callback);
  }

  clearStagedStaticData() {
    this.connection.callReducer("clear_staged_static_data", new Uint8Array(0), this.setCallReducerFlags.clearStagedStaticDataFlags);
  }

  onClearStagedStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("clear_staged_static_data", callback);
  }

  removeOnClearStagedStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("clear_staged_static_data", callback);
  }

  closedListingCollect(request: PlayerClosedListingCollectRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ClosedListingCollect.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("closed_listing_collect", __argsBuffer, this.setCallReducerFlags.closedListingCollectFlags);
  }

  onClosedListingCollect(callback: (ctx: ReducerEventContext, request: PlayerClosedListingCollectRequest) => void) {
    this.connection.onReducer("closed_listing_collect", callback);
  }

  removeOnClosedListingCollect(callback: (ctx: ReducerEventContext, request: PlayerClosedListingCollectRequest) => void) {
    this.connection.offReducer("closed_listing_collect", callback);
  }

  collectStatsReducer(timer: CollectStatsTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    CollectStatsReducer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("collect_stats_reducer", __argsBuffer, this.setCallReducerFlags.collectStatsReducerFlags);
  }

  onCollectStatsReducer(callback: (ctx: ReducerEventContext, timer: CollectStatsTimer) => void) {
    this.connection.onReducer("collect_stats_reducer", callback);
  }

  removeOnCollectStatsReducer(callback: (ctx: ReducerEventContext, timer: CollectStatsTimer) => void) {
    this.connection.offReducer("collect_stats_reducer", callback);
  }

  collectibleActivate(request: PlayerCollectibleActivateRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CollectibleActivate.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("collectible_activate", __argsBuffer, this.setCallReducerFlags.collectibleActivateFlags);
  }

  onCollectibleActivate(callback: (ctx: ReducerEventContext, request: PlayerCollectibleActivateRequest) => void) {
    this.connection.onReducer("collectible_activate", callback);
  }

  removeOnCollectibleActivate(callback: (ctx: ReducerEventContext, request: PlayerCollectibleActivateRequest) => void) {
    this.connection.offReducer("collectible_activate", callback);
  }

  commitStagedStaticData() {
    this.connection.callReducer("commit_staged_static_data", new Uint8Array(0), this.setCallReducerFlags.commitStagedStaticDataFlags);
  }

  onCommitStagedStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("commit_staged_static_data", callback);
  }

  removeOnCommitStagedStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("commit_staged_static_data", callback);
  }

  completeOnboardingQuest(id: number) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    CompleteOnboardingQuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("complete_onboarding_quest", __argsBuffer, this.setCallReducerFlags.completeOnboardingQuestFlags);
  }

  onCompleteOnboardingQuest(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.onReducer("complete_onboarding_quest", callback);
  }

  removeOnCompleteOnboardingQuest(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.offReducer("complete_onboarding_quest", callback);
  }

  completeOnboardingState(id: number) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    CompleteOnboardingState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("complete_onboarding_state", __argsBuffer, this.setCallReducerFlags.completeOnboardingStateFlags);
  }

  onCompleteOnboardingState(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.onReducer("complete_onboarding_state", callback);
  }

  removeOnCompleteOnboardingState(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.offReducer("complete_onboarding_state", callback);
  }

  convertCollectibleToDeed(request: PlayerConvertCollectibleToDeedRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ConvertCollectibleToDeed.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("convert_collectible_to_deed", __argsBuffer, this.setCallReducerFlags.convertCollectibleToDeedFlags);
  }

  onConvertCollectibleToDeed(callback: (ctx: ReducerEventContext, request: PlayerConvertCollectibleToDeedRequest) => void) {
    this.connection.onReducer("convert_collectible_to_deed", callback);
  }

  removeOnConvertCollectibleToDeed(callback: (ctx: ReducerEventContext, request: PlayerConvertCollectibleToDeedRequest) => void) {
    this.connection.offReducer("convert_collectible_to_deed", callback);
  }

  convertDeedToCollectible(request: PlayerConvertDeedToCollectibleRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ConvertDeedToCollectible.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("convert_deed_to_collectible", __argsBuffer, this.setCallReducerFlags.convertDeedToCollectibleFlags);
  }

  onConvertDeedToCollectible(callback: (ctx: ReducerEventContext, request: PlayerConvertDeedToCollectibleRequest) => void) {
    this.connection.onReducer("convert_deed_to_collectible", callback);
  }

  removeOnConvertDeedToCollectible(callback: (ctx: ReducerEventContext, request: PlayerConvertDeedToCollectibleRequest) => void) {
    this.connection.offReducer("convert_deed_to_collectible", callback);
  }

  craftCancel(request: PlayerCraftCancelRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CraftCancel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("craft_cancel", __argsBuffer, this.setCallReducerFlags.craftCancelFlags);
  }

  onCraftCancel(callback: (ctx: ReducerEventContext, request: PlayerCraftCancelRequest) => void) {
    this.connection.onReducer("craft_cancel", callback);
  }

  removeOnCraftCancel(callback: (ctx: ReducerEventContext, request: PlayerCraftCancelRequest) => void) {
    this.connection.offReducer("craft_cancel", callback);
  }

  craftCollect(request: PlayerCraftCollectRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CraftCollect.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("craft_collect", __argsBuffer, this.setCallReducerFlags.craftCollectFlags);
  }

  onCraftCollect(callback: (ctx: ReducerEventContext, request: PlayerCraftCollectRequest) => void) {
    this.connection.onReducer("craft_collect", callback);
  }

  removeOnCraftCollect(callback: (ctx: ReducerEventContext, request: PlayerCraftCollectRequest) => void) {
    this.connection.offReducer("craft_collect", callback);
  }

  craftCollectAll(request: PlayerCraftCollectAllRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CraftCollectAll.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("craft_collect_all", __argsBuffer, this.setCallReducerFlags.craftCollectAllFlags);
  }

  onCraftCollectAll(callback: (ctx: ReducerEventContext, request: PlayerCraftCollectAllRequest) => void) {
    this.connection.onReducer("craft_collect_all", callback);
  }

  removeOnCraftCollectAll(callback: (ctx: ReducerEventContext, request: PlayerCraftCollectAllRequest) => void) {
    this.connection.offReducer("craft_collect_all", callback);
  }

  craftContinue(request: PlayerCraftContinueRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CraftContinue.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("craft_continue", __argsBuffer, this.setCallReducerFlags.craftContinueFlags);
  }

  onCraftContinue(callback: (ctx: ReducerEventContext, request: PlayerCraftContinueRequest) => void) {
    this.connection.onReducer("craft_continue", callback);
  }

  removeOnCraftContinue(callback: (ctx: ReducerEventContext, request: PlayerCraftContinueRequest) => void) {
    this.connection.offReducer("craft_continue", callback);
  }

  craftContinueStart(request: PlayerCraftContinueRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CraftContinueStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("craft_continue_start", __argsBuffer, this.setCallReducerFlags.craftContinueStartFlags);
  }

  onCraftContinueStart(callback: (ctx: ReducerEventContext, request: PlayerCraftContinueRequest) => void) {
    this.connection.onReducer("craft_continue_start", callback);
  }

  removeOnCraftContinueStart(callback: (ctx: ReducerEventContext, request: PlayerCraftContinueRequest) => void) {
    this.connection.offReducer("craft_continue_start", callback);
  }

  craftInitiate(request: PlayerCraftInitiateRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CraftInitiate.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("craft_initiate", __argsBuffer, this.setCallReducerFlags.craftInitiateFlags);
  }

  onCraftInitiate(callback: (ctx: ReducerEventContext, request: PlayerCraftInitiateRequest) => void) {
    this.connection.onReducer("craft_initiate", callback);
  }

  removeOnCraftInitiate(callback: (ctx: ReducerEventContext, request: PlayerCraftInitiateRequest) => void) {
    this.connection.offReducer("craft_initiate", callback);
  }

  craftInitiateStart(request: PlayerCraftInitiateRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    CraftInitiateStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("craft_initiate_start", __argsBuffer, this.setCallReducerFlags.craftInitiateStartFlags);
  }

  onCraftInitiateStart(callback: (ctx: ReducerEventContext, request: PlayerCraftInitiateRequest) => void) {
    this.connection.onReducer("craft_initiate_start", callback);
  }

  removeOnCraftInitiateStart(callback: (ctx: ReducerEventContext, request: PlayerCraftInitiateRequest) => void) {
    this.connection.offReducer("craft_initiate_start", callback);
  }

  craftSetPublic(progressiveActionEntityId: bigint, isPublic: boolean) {
    const __args = { progressiveActionEntityId, isPublic };
    let __writer = new BinaryWriter(1024);
    CraftSetPublic.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("craft_set_public", __argsBuffer, this.setCallReducerFlags.craftSetPublicFlags);
  }

  onCraftSetPublic(callback: (ctx: ReducerEventContext, progressiveActionEntityId: bigint, isPublic: boolean) => void) {
    this.connection.onReducer("craft_set_public", callback);
  }

  removeOnCraftSetPublic(callback: (ctx: ReducerEventContext, progressiveActionEntityId: bigint, isPublic: boolean) => void) {
    this.connection.offReducer("craft_set_public", callback);
  }

  currentVersion() {
    this.connection.callReducer("current_version", new Uint8Array(0), this.setCallReducerFlags.currentVersionFlags);
  }

  onCurrentVersion(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("current_version", callback);
  }

  removeOnCurrentVersion(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("current_version", callback);
  }

  dayNightAgentLoop(timer: DayNightLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    DayNightAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("day_night_agent_loop", __argsBuffer, this.setCallReducerFlags.dayNightAgentLoopFlags);
  }

  onDayNightAgentLoop(callback: (ctx: ReducerEventContext, timer: DayNightLoopTimer) => void) {
    this.connection.onReducer("day_night_agent_loop", callback);
  }

  removeOnDayNightAgentLoop(callback: (ctx: ReducerEventContext, timer: DayNightLoopTimer) => void) {
    this.connection.offReducer("day_night_agent_loop", callback);
  }

  deleteAllNpcs() {
    this.connection.callReducer("delete_all_npcs", new Uint8Array(0), this.setCallReducerFlags.deleteAllNpcsFlags);
  }

  onDeleteAllNpcs(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("delete_all_npcs", callback);
  }

  removeOnDeleteAllNpcs(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("delete_all_npcs", callback);
  }

  deployableDeploy(request: DeployableDeployRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    DeployableDeploy.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("deployable_deploy", __argsBuffer, this.setCallReducerFlags.deployableDeployFlags);
  }

  onDeployableDeploy(callback: (ctx: ReducerEventContext, request: DeployableDeployRequest) => void) {
    this.connection.onReducer("deployable_deploy", callback);
  }

  removeOnDeployableDeploy(callback: (ctx: ReducerEventContext, request: DeployableDeployRequest) => void) {
    this.connection.offReducer("deployable_deploy", callback);
  }

  deployableDeployStart(request: DeployableDeployRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    DeployableDeployStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("deployable_deploy_start", __argsBuffer, this.setCallReducerFlags.deployableDeployStartFlags);
  }

  onDeployableDeployStart(callback: (ctx: ReducerEventContext, request: DeployableDeployRequest) => void) {
    this.connection.onReducer("deployable_deploy_start", callback);
  }

  removeOnDeployableDeployStart(callback: (ctx: ReducerEventContext, request: DeployableDeployRequest) => void) {
    this.connection.offReducer("deployable_deploy_start", callback);
  }

  deployableDismount(request: PlayerDeployableDismountRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    DeployableDismount.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("deployable_dismount", __argsBuffer, this.setCallReducerFlags.deployableDismountFlags);
  }

  onDeployableDismount(callback: (ctx: ReducerEventContext, request: PlayerDeployableDismountRequest) => void) {
    this.connection.onReducer("deployable_dismount", callback);
  }

  removeOnDeployableDismount(callback: (ctx: ReducerEventContext, request: PlayerDeployableDismountRequest) => void) {
    this.connection.offReducer("deployable_dismount", callback);
  }

  deployableDismountScheduled(timer: DeployableDismountTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    DeployableDismountScheduled.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("deployable_dismount_scheduled", __argsBuffer, this.setCallReducerFlags.deployableDismountScheduledFlags);
  }

  onDeployableDismountScheduled(callback: (ctx: ReducerEventContext, timer: DeployableDismountTimer) => void) {
    this.connection.onReducer("deployable_dismount_scheduled", callback);
  }

  removeOnDeployableDismountScheduled(callback: (ctx: ReducerEventContext, timer: DeployableDismountTimer) => void) {
    this.connection.offReducer("deployable_dismount_scheduled", callback);
  }

  deployableMount(request: PlayerDeployableMountRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    DeployableMount.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("deployable_mount", __argsBuffer, this.setCallReducerFlags.deployableMountFlags);
  }

  onDeployableMount(callback: (ctx: ReducerEventContext, request: PlayerDeployableMountRequest) => void) {
    this.connection.onReducer("deployable_mount", callback);
  }

  removeOnDeployableMount(callback: (ctx: ReducerEventContext, request: PlayerDeployableMountRequest) => void) {
    this.connection.offReducer("deployable_mount", callback);
  }

  deployableMove(request: PlayerDeployableMoveRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    DeployableMove.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("deployable_move", __argsBuffer, this.setCallReducerFlags.deployableMoveFlags);
  }

  onDeployableMove(callback: (ctx: ReducerEventContext, request: PlayerDeployableMoveRequest) => void) {
    this.connection.onReducer("deployable_move", callback);
  }

  removeOnDeployableMove(callback: (ctx: ReducerEventContext, request: PlayerDeployableMoveRequest) => void) {
    this.connection.offReducer("deployable_move", callback);
  }

  deployableMoveOffBounds(deployableEntityId: bigint) {
    const __args = { deployableEntityId };
    let __writer = new BinaryWriter(1024);
    DeployableMoveOffBounds.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("deployable_move_off_bounds", __argsBuffer, this.setCallReducerFlags.deployableMoveOffBoundsFlags);
  }

  onDeployableMoveOffBounds(callback: (ctx: ReducerEventContext, deployableEntityId: bigint) => void) {
    this.connection.onReducer("deployable_move_off_bounds", callback);
  }

  removeOnDeployableMoveOffBounds(callback: (ctx: ReducerEventContext, deployableEntityId: bigint) => void) {
    this.connection.offReducer("deployable_move_off_bounds", callback);
  }

  deployableMoveOffClaim(deployableEntityId: bigint) {
    const __args = { deployableEntityId };
    let __writer = new BinaryWriter(1024);
    DeployableMoveOffClaim.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("deployable_move_off_claim", __argsBuffer, this.setCallReducerFlags.deployableMoveOffClaimFlags);
  }

  onDeployableMoveOffClaim(callback: (ctx: ReducerEventContext, deployableEntityId: bigint) => void) {
    this.connection.onReducer("deployable_move_off_claim", callback);
  }

  removeOnDeployableMoveOffClaim(callback: (ctx: ReducerEventContext, deployableEntityId: bigint) => void) {
    this.connection.offReducer("deployable_move_off_claim", callback);
  }

  deployableStore(request: DeployableStoreRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    DeployableStore.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("deployable_store", __argsBuffer, this.setCallReducerFlags.deployableStoreFlags);
  }

  onDeployableStore(callback: (ctx: ReducerEventContext, request: DeployableStoreRequest) => void) {
    this.connection.onReducer("deployable_store", callback);
  }

  removeOnDeployableStore(callback: (ctx: ReducerEventContext, request: DeployableStoreRequest) => void) {
    this.connection.offReducer("deployable_store", callback);
  }

  deployableStoreStart(request: DeployableStoreRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    DeployableStoreStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("deployable_store_start", __argsBuffer, this.setCallReducerFlags.deployableStoreStartFlags);
  }

  onDeployableStoreStart(callback: (ctx: ReducerEventContext, request: DeployableStoreRequest) => void) {
    this.connection.onReducer("deployable_store_start", callback);
  }

  removeOnDeployableStoreStart(callback: (ctx: ReducerEventContext, request: DeployableStoreRequest) => void) {
    this.connection.offReducer("deployable_store_start", callback);
  }

  destroyDimensionNetwork(timer: DestroyDimensionNetworkTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    DestroyDimensionNetwork.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("destroy_dimension_network", __argsBuffer, this.setCallReducerFlags.destroyDimensionNetworkFlags);
  }

  onDestroyDimensionNetwork(callback: (ctx: ReducerEventContext, timer: DestroyDimensionNetworkTimer) => void) {
    this.connection.onReducer("destroy_dimension_network", callback);
  }

  removeOnDestroyDimensionNetwork(callback: (ctx: ReducerEventContext, timer: DestroyDimensionNetworkTimer) => void) {
    this.connection.offReducer("destroy_dimension_network", callback);
  }

  devDeleteWorld() {
    this.connection.callReducer("dev_delete_world", new Uint8Array(0), this.setCallReducerFlags.devDeleteWorldFlags);
  }

  onDevDeleteWorld(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("dev_delete_world", callback);
  }

  removeOnDevDeleteWorld(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("dev_delete_world", callback);
  }

  discoverEntities(request: PlayerDiscoverEntitiesRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    DiscoverEntities.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("discover_entities", __argsBuffer, this.setCallReducerFlags.discoverEntitiesFlags);
  }

  onDiscoverEntities(callback: (ctx: ReducerEventContext, request: PlayerDiscoverEntitiesRequest) => void) {
    this.connection.onReducer("discover_entities", callback);
  }

  removeOnDiscoverEntities(callback: (ctx: ReducerEventContext, request: PlayerDiscoverEntitiesRequest) => void) {
    this.connection.offReducer("discover_entities", callback);
  }

  droppedInventoryDespawn(timer: DroppedInventoryDespawnTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    DroppedInventoryDespawn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("dropped_inventory_despawn", __argsBuffer, this.setCallReducerFlags.droppedInventoryDespawnFlags);
  }

  onDroppedInventoryDespawn(callback: (ctx: ReducerEventContext, timer: DroppedInventoryDespawnTimer) => void) {
    this.connection.onReducer("dropped_inventory_despawn", callback);
  }

  removeOnDroppedInventoryDespawn(callback: (ctx: ReducerEventContext, timer: DroppedInventoryDespawnTimer) => void) {
    this.connection.offReducer("dropped_inventory_despawn", callback);
  }

  droppedInventoryLoseOwnership(timer: DroppedInventoryOwnershipTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    DroppedInventoryLoseOwnership.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("dropped_inventory_lose_ownership", __argsBuffer, this.setCallReducerFlags.droppedInventoryLoseOwnershipFlags);
  }

  onDroppedInventoryLoseOwnership(callback: (ctx: ReducerEventContext, timer: DroppedInventoryOwnershipTimer) => void) {
    this.connection.onReducer("dropped_inventory_lose_ownership", callback);
  }

  removeOnDroppedInventoryLoseOwnership(callback: (ctx: ReducerEventContext, timer: DroppedInventoryOwnershipTimer) => void) {
    this.connection.offReducer("dropped_inventory_lose_ownership", callback);
  }

  duelAgentTimerLoop(timer: DuelAgentTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    DuelAgentTimerLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("duel_agent_timer_loop", __argsBuffer, this.setCallReducerFlags.duelAgentTimerLoopFlags);
  }

  onDuelAgentTimerLoop(callback: (ctx: ReducerEventContext, timer: DuelAgentTimer) => void) {
    this.connection.onReducer("duel_agent_timer_loop", callback);
  }

  removeOnDuelAgentTimerLoop(callback: (ctx: ReducerEventContext, timer: DuelAgentTimer) => void) {
    this.connection.offReducer("duel_agent_timer_loop", callback);
  }

  duelDespawn(timer: DuelDespawnTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    DuelDespawn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("duel_despawn", __argsBuffer, this.setCallReducerFlags.duelDespawnFlags);
  }

  onDuelDespawn(callback: (ctx: ReducerEventContext, timer: DuelDespawnTimer) => void) {
    this.connection.onReducer("duel_despawn", callback);
  }

  removeOnDuelDespawn(callback: (ctx: ReducerEventContext, timer: DuelDespawnTimer) => void) {
    this.connection.offReducer("duel_despawn", callback);
  }

  eat(request: PlayerEatRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    Eat.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("eat", __argsBuffer, this.setCallReducerFlags.eatFlags);
  }

  onEat(callback: (ctx: ReducerEventContext, request: PlayerEatRequest) => void) {
    this.connection.onReducer("eat", callback);
  }

  removeOnEat(callback: (ctx: ReducerEventContext, request: PlayerEatRequest) => void) {
    this.connection.offReducer("eat", callback);
  }

  emote(request: PlayerEmoteRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    Emote.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("emote", __argsBuffer, this.setCallReducerFlags.emoteFlags);
  }

  onEmote(callback: (ctx: ReducerEventContext, request: PlayerEmoteRequest) => void) {
    this.connection.onReducer("emote", callback);
  }

  removeOnEmote(callback: (ctx: ReducerEventContext, request: PlayerEmoteRequest) => void) {
    this.connection.offReducer("emote", callback);
  }

  emoteStart(request: PlayerEmoteRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EmoteStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("emote_start", __argsBuffer, this.setCallReducerFlags.emoteStartFlags);
  }

  onEmoteStart(callback: (ctx: ReducerEventContext, request: PlayerEmoteRequest) => void) {
    this.connection.onReducer("emote_start", callback);
  }

  removeOnEmoteStart(callback: (ctx: ReducerEventContext, request: PlayerEmoteRequest) => void) {
    this.connection.offReducer("emote_start", callback);
  }

  empireAddSiegeSupplies(request: EmpireAddSiegeSuppliesRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EmpireAddSiegeSupplies.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("empire_add_siege_supplies", __argsBuffer, this.setCallReducerFlags.empireAddSiegeSuppliesFlags);
  }

  onEmpireAddSiegeSupplies(callback: (ctx: ReducerEventContext, request: EmpireAddSiegeSuppliesRequest) => void) {
    this.connection.onReducer("empire_add_siege_supplies", callback);
  }

  removeOnEmpireAddSiegeSupplies(callback: (ctx: ReducerEventContext, request: EmpireAddSiegeSuppliesRequest) => void) {
    this.connection.offReducer("empire_add_siege_supplies", callback);
  }

  empireClaimJoin(buildingEntityId: bigint, empireEntityId: bigint) {
    const __args = { buildingEntityId, empireEntityId };
    let __writer = new BinaryWriter(1024);
    EmpireClaimJoin.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("empire_claim_join", __argsBuffer, this.setCallReducerFlags.empireClaimJoinFlags);
  }

  onEmpireClaimJoin(callback: (ctx: ReducerEventContext, buildingEntityId: bigint, empireEntityId: bigint) => void) {
    this.connection.onReducer("empire_claim_join", callback);
  }

  removeOnEmpireClaimJoin(callback: (ctx: ReducerEventContext, buildingEntityId: bigint, empireEntityId: bigint) => void) {
    this.connection.offReducer("empire_claim_join", callback);
  }

  empireCollectHexiteCapsule(request: EmpireCollectHexiteCapsuleRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EmpireCollectHexiteCapsule.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("empire_collect_hexite_capsule", __argsBuffer, this.setCallReducerFlags.empireCollectHexiteCapsuleFlags);
  }

  onEmpireCollectHexiteCapsule(callback: (ctx: ReducerEventContext, request: EmpireCollectHexiteCapsuleRequest) => void) {
    this.connection.onReducer("empire_collect_hexite_capsule", callback);
  }

  removeOnEmpireCollectHexiteCapsule(callback: (ctx: ReducerEventContext, request: EmpireCollectHexiteCapsuleRequest) => void) {
    this.connection.offReducer("empire_collect_hexite_capsule", callback);
  }

  empireDeploySiegeEngine(request: EmpireStartSiegeRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EmpireDeploySiegeEngine.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("empire_deploy_siege_engine", __argsBuffer, this.setCallReducerFlags.empireDeploySiegeEngineFlags);
  }

  onEmpireDeploySiegeEngine(callback: (ctx: ReducerEventContext, request: EmpireStartSiegeRequest) => void) {
    this.connection.onReducer("empire_deploy_siege_engine", callback);
  }

  removeOnEmpireDeploySiegeEngine(callback: (ctx: ReducerEventContext, request: EmpireStartSiegeRequest) => void) {
    this.connection.offReducer("empire_deploy_siege_engine", callback);
  }

  empireDeploySiegeEngineStart(request: EmpireStartSiegeRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EmpireDeploySiegeEngineStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("empire_deploy_siege_engine_start", __argsBuffer, this.setCallReducerFlags.empireDeploySiegeEngineStartFlags);
  }

  onEmpireDeploySiegeEngineStart(callback: (ctx: ReducerEventContext, request: EmpireStartSiegeRequest) => void) {
    this.connection.onReducer("empire_deploy_siege_engine_start", callback);
  }

  removeOnEmpireDeploySiegeEngineStart(callback: (ctx: ReducerEventContext, request: EmpireStartSiegeRequest) => void) {
    this.connection.offReducer("empire_deploy_siege_engine_start", callback);
  }

  empireQueueSupplies(request: EmpireQueueSuppliesRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EmpireQueueSupplies.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("empire_queue_supplies", __argsBuffer, this.setCallReducerFlags.empireQueueSuppliesFlags);
  }

  onEmpireQueueSupplies(callback: (ctx: ReducerEventContext, request: EmpireQueueSuppliesRequest) => void) {
    this.connection.onReducer("empire_queue_supplies", callback);
  }

  removeOnEmpireQueueSupplies(callback: (ctx: ReducerEventContext, request: EmpireQueueSuppliesRequest) => void) {
    this.connection.offReducer("empire_queue_supplies", callback);
  }

  empireResupplyNode(request: EmpireResupplyNodeRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EmpireResupplyNode.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("empire_resupply_node", __argsBuffer, this.setCallReducerFlags.empireResupplyNodeFlags);
  }

  onEmpireResupplyNode(callback: (ctx: ReducerEventContext, request: EmpireResupplyNodeRequest) => void) {
    this.connection.onReducer("empire_resupply_node", callback);
  }

  removeOnEmpireResupplyNode(callback: (ctx: ReducerEventContext, request: EmpireResupplyNodeRequest) => void) {
    this.connection.offReducer("empire_resupply_node", callback);
  }

  empireResupplyNodeStart(request: EmpireResupplyNodeRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EmpireResupplyNodeStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("empire_resupply_node_start", __argsBuffer, this.setCallReducerFlags.empireResupplyNodeStartFlags);
  }

  onEmpireResupplyNodeStart(callback: (ctx: ReducerEventContext, request: EmpireResupplyNodeRequest) => void) {
    this.connection.onReducer("empire_resupply_node_start", callback);
  }

  removeOnEmpireResupplyNodeStart(callback: (ctx: ReducerEventContext, request: EmpireResupplyNodeRequest) => void) {
    this.connection.offReducer("empire_resupply_node_start", callback);
  }

  empireSiegeDepletedWatchtower(request: EmpireStartSiegeRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EmpireSiegeDepletedWatchtower.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("empire_siege_depleted_watchtower", __argsBuffer, this.setCallReducerFlags.empireSiegeDepletedWatchtowerFlags);
  }

  onEmpireSiegeDepletedWatchtower(callback: (ctx: ReducerEventContext, request: EmpireStartSiegeRequest) => void) {
    this.connection.onReducer("empire_siege_depleted_watchtower", callback);
  }

  removeOnEmpireSiegeDepletedWatchtower(callback: (ctx: ReducerEventContext, request: EmpireStartSiegeRequest) => void) {
    this.connection.offReducer("empire_siege_depleted_watchtower", callback);
  }

  endGracePeriod(timer: EndGracePeriodTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    EndGracePeriod.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("end_grace_period", __argsBuffer, this.setCallReducerFlags.endGracePeriodFlags);
  }

  onEndGracePeriod(callback: (ctx: ReducerEventContext, timer: EndGracePeriodTimer) => void) {
    this.connection.onReducer("end_grace_period", callback);
  }

  removeOnEndGracePeriod(callback: (ctx: ReducerEventContext, timer: EndGracePeriodTimer) => void) {
    this.connection.offReducer("end_grace_period", callback);
  }

  enemyClearAggro(request: EnemyClearAggroRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EnemyClearAggro.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_clear_aggro", __argsBuffer, this.setCallReducerFlags.enemyClearAggroFlags);
  }

  onEnemyClearAggro(callback: (ctx: ReducerEventContext, request: EnemyClearAggroRequest) => void) {
    this.connection.onReducer("enemy_clear_aggro", callback);
  }

  removeOnEnemyClearAggro(callback: (ctx: ReducerEventContext, request: EnemyClearAggroRequest) => void) {
    this.connection.offReducer("enemy_clear_aggro", callback);
  }

  enemyDespawn(timer: EnemyDespawnTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    EnemyDespawn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_despawn", __argsBuffer, this.setCallReducerFlags.enemyDespawnFlags);
  }

  onEnemyDespawn(callback: (ctx: ReducerEventContext, timer: EnemyDespawnTimer) => void) {
    this.connection.onReducer("enemy_despawn", callback);
  }

  removeOnEnemyDespawn(callback: (ctx: ReducerEventContext, timer: EnemyDespawnTimer) => void) {
    this.connection.offReducer("enemy_despawn", callback);
  }

  enemyDespawnFromMobMonitor(enemyEntityId: bigint) {
    const __args = { enemyEntityId };
    let __writer = new BinaryWriter(1024);
    EnemyDespawnFromMobMonitor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_despawn_from_mob_monitor", __argsBuffer, this.setCallReducerFlags.enemyDespawnFromMobMonitorFlags);
  }

  onEnemyDespawnFromMobMonitor(callback: (ctx: ReducerEventContext, enemyEntityId: bigint) => void) {
    this.connection.onReducer("enemy_despawn_from_mob_monitor", callback);
  }

  removeOnEnemyDespawnFromMobMonitor(callback: (ctx: ReducerEventContext, enemyEntityId: bigint) => void) {
    this.connection.offReducer("enemy_despawn_from_mob_monitor", callback);
  }

  enemyDespawnFromMobMonitorBatch(enemyEntityIds: bigint[]) {
    const __args = { enemyEntityIds };
    let __writer = new BinaryWriter(1024);
    EnemyDespawnFromMobMonitorBatch.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_despawn_from_mob_monitor_batch", __argsBuffer, this.setCallReducerFlags.enemyDespawnFromMobMonitorBatchFlags);
  }

  onEnemyDespawnFromMobMonitorBatch(callback: (ctx: ReducerEventContext, enemyEntityIds: bigint[]) => void) {
    this.connection.onReducer("enemy_despawn_from_mob_monitor_batch", callback);
  }

  removeOnEnemyDespawnFromMobMonitorBatch(callback: (ctx: ReducerEventContext, enemyEntityIds: bigint[]) => void) {
    this.connection.offReducer("enemy_despawn_from_mob_monitor_batch", callback);
  }

  enemyMove(request: EnemyMoveRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EnemyMove.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_move", __argsBuffer, this.setCallReducerFlags.enemyMoveFlags);
  }

  onEnemyMove(callback: (ctx: ReducerEventContext, request: EnemyMoveRequest) => void) {
    this.connection.onReducer("enemy_move", callback);
  }

  removeOnEnemyMove(callback: (ctx: ReducerEventContext, request: EnemyMoveRequest) => void) {
    this.connection.offReducer("enemy_move", callback);
  }

  enemyMoveBatch(requests: EnemyMoveRequest[]) {
    const __args = { requests };
    let __writer = new BinaryWriter(1024);
    EnemyMoveBatch.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_move_batch", __argsBuffer, this.setCallReducerFlags.enemyMoveBatchFlags);
  }

  onEnemyMoveBatch(callback: (ctx: ReducerEventContext, requests: EnemyMoveRequest[]) => void) {
    this.connection.onReducer("enemy_move_batch", callback);
  }

  removeOnEnemyMoveBatch(callback: (ctx: ReducerEventContext, requests: EnemyMoveRequest[]) => void) {
    this.connection.offReducer("enemy_move_batch", callback);
  }

  enemyRegenAgentLoop(timer: EnemyRegenLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    EnemyRegenAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_regen_agent_loop", __argsBuffer, this.setCallReducerFlags.enemyRegenAgentLoopFlags);
  }

  onEnemyRegenAgentLoop(callback: (ctx: ReducerEventContext, timer: EnemyRegenLoopTimer) => void) {
    this.connection.onReducer("enemy_regen_agent_loop", callback);
  }

  removeOnEnemyRegenAgentLoop(callback: (ctx: ReducerEventContext, timer: EnemyRegenLoopTimer) => void) {
    this.connection.offReducer("enemy_regen_agent_loop", callback);
  }

  enemySetHealth(request: EnemySetHealthRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EnemySetHealth.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_set_health", __argsBuffer, this.setCallReducerFlags.enemySetHealthFlags);
  }

  onEnemySetHealth(callback: (ctx: ReducerEventContext, request: EnemySetHealthRequest) => void) {
    this.connection.onReducer("enemy_set_health", callback);
  }

  removeOnEnemySetHealth(callback: (ctx: ReducerEventContext, request: EnemySetHealthRequest) => void) {
    this.connection.offReducer("enemy_set_health", callback);
  }

  enemySetHealthBatch(requests: EnemySetHealthRequest[]) {
    const __args = { requests };
    let __writer = new BinaryWriter(1024);
    EnemySetHealthBatch.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_set_health_batch", __argsBuffer, this.setCallReducerFlags.enemySetHealthBatchFlags);
  }

  onEnemySetHealthBatch(callback: (ctx: ReducerEventContext, requests: EnemySetHealthRequest[]) => void) {
    this.connection.onReducer("enemy_set_health_batch", callback);
  }

  removeOnEnemySetHealthBatch(callback: (ctx: ReducerEventContext, requests: EnemySetHealthRequest[]) => void) {
    this.connection.offReducer("enemy_set_health_batch", callback);
  }

  enemySpawn(request: EnemySpawnRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EnemySpawn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_spawn", __argsBuffer, this.setCallReducerFlags.enemySpawnFlags);
  }

  onEnemySpawn(callback: (ctx: ReducerEventContext, request: EnemySpawnRequest) => void) {
    this.connection.onReducer("enemy_spawn", callback);
  }

  removeOnEnemySpawn(callback: (ctx: ReducerEventContext, request: EnemySpawnRequest) => void) {
    this.connection.offReducer("enemy_spawn", callback);
  }

  enemySpawnBatch(requests: EnemySpawnRequest[]) {
    const __args = { requests };
    let __writer = new BinaryWriter(1024);
    EnemySpawnBatch.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_spawn_batch", __argsBuffer, this.setCallReducerFlags.enemySpawnBatchFlags);
  }

  onEnemySpawnBatch(callback: (ctx: ReducerEventContext, requests: EnemySpawnRequest[]) => void) {
    this.connection.onReducer("enemy_spawn_batch", callback);
  }

  removeOnEnemySpawnBatch(callback: (ctx: ReducerEventContext, requests: EnemySpawnRequest[]) => void) {
    this.connection.offReducer("enemy_spawn_batch", callback);
  }

  enemySpawnLoot(request: EnemySpawnLootRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EnemySpawnLoot.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("enemy_spawn_loot", __argsBuffer, this.setCallReducerFlags.enemySpawnLootFlags);
  }

  onEnemySpawnLoot(callback: (ctx: ReducerEventContext, request: EnemySpawnLootRequest) => void) {
    this.connection.onReducer("enemy_spawn_loot", callback);
  }

  removeOnEnemySpawnLoot(callback: (ctx: ReducerEventContext, request: EnemySpawnLootRequest) => void) {
    this.connection.offReducer("enemy_spawn_loot", callback);
  }

  environmentDebuffAgentLoop(timer: EnvironmentDebuffLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    EnvironmentDebuffAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("environment_debuff_agent_loop", __argsBuffer, this.setCallReducerFlags.environmentDebuffAgentLoopFlags);
  }

  onEnvironmentDebuffAgentLoop(callback: (ctx: ReducerEventContext, timer: EnvironmentDebuffLoopTimer) => void) {
    this.connection.onReducer("environment_debuff_agent_loop", callback);
  }

  removeOnEnvironmentDebuffAgentLoop(callback: (ctx: ReducerEventContext, timer: EnvironmentDebuffLoopTimer) => void) {
    this.connection.offReducer("environment_debuff_agent_loop", callback);
  }

  equipmentAdd(request: PlayerEquipmentAddRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EquipmentAdd.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("equipment_add", __argsBuffer, this.setCallReducerFlags.equipmentAddFlags);
  }

  onEquipmentAdd(callback: (ctx: ReducerEventContext, request: PlayerEquipmentAddRequest) => void) {
    this.connection.onReducer("equipment_add", callback);
  }

  removeOnEquipmentAdd(callback: (ctx: ReducerEventContext, request: PlayerEquipmentAddRequest) => void) {
    this.connection.offReducer("equipment_add", callback);
  }

  equipmentRemove(request: PlayerEquipmentRemoveRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    EquipmentRemove.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("equipment_remove", __argsBuffer, this.setCallReducerFlags.equipmentRemoveFlags);
  }

  onEquipmentRemove(callback: (ctx: ReducerEventContext, request: PlayerEquipmentRemoveRequest) => void) {
    this.connection.onReducer("equipment_remove", callback);
  }

  removeOnEquipmentRemove(callback: (ctx: ReducerEventContext, request: PlayerEquipmentRemoveRequest) => void) {
    this.connection.offReducer("equipment_remove", callback);
  }

  extract(request: PlayerExtractRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    Extract.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("extract", __argsBuffer, this.setCallReducerFlags.extractFlags);
  }

  onExtract(callback: (ctx: ReducerEventContext, request: PlayerExtractRequest) => void) {
    this.connection.onReducer("extract", callback);
  }

  removeOnExtract(callback: (ctx: ReducerEventContext, request: PlayerExtractRequest) => void) {
    this.connection.offReducer("extract", callback);
  }

  extractStart(request: PlayerExtractRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ExtractStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("extract_start", __argsBuffer, this.setCallReducerFlags.extractStartFlags);
  }

  onExtractStart(callback: (ctx: ReducerEventContext, request: PlayerExtractRequest) => void) {
    this.connection.onReducer("extract_start", callback);
  }

  removeOnExtractStart(callback: (ctx: ReducerEventContext, request: PlayerExtractRequest) => void) {
    this.connection.offReducer("extract_start", callback);
  }

  forceStartAgents() {
    this.connection.callReducer("force_start_agents", new Uint8Array(0), this.setCallReducerFlags.forceStartAgentsFlags);
  }

  onForceStartAgents(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("force_start_agents", callback);
  }

  removeOnForceStartAgents(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("force_start_agents", callback);
  }

  generateDevIsland() {
    this.connection.callReducer("generate_dev_island", new Uint8Array(0), this.setCallReducerFlags.generateDevIslandFlags);
  }

  onGenerateDevIsland(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("generate_dev_island", callback);
  }

  removeOnGenerateDevIsland(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("generate_dev_island", callback);
  }

  generateFlatWorld() {
    this.connection.callReducer("generate_flat_world", new Uint8Array(0), this.setCallReducerFlags.generateFlatWorldFlags);
  }

  onGenerateFlatWorld(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("generate_flat_world", callback);
  }

  removeOnGenerateFlatWorld(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("generate_flat_world", callback);
  }

  generateWorld(worldDefinition: WorldGenWorldDefinition) {
    const __args = { worldDefinition };
    let __writer = new BinaryWriter(1024);
    GenerateWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("generate_world", __argsBuffer, this.setCallReducerFlags.generateWorldFlags);
  }

  onGenerateWorld(callback: (ctx: ReducerEventContext, worldDefinition: WorldGenWorldDefinition) => void) {
    this.connection.onReducer("generate_world", callback);
  }

  removeOnGenerateWorld(callback: (ctx: ReducerEventContext, worldDefinition: WorldGenWorldDefinition) => void) {
    this.connection.offReducer("generate_world", callback);
  }

  growthAgentLoop(timer: GrowthLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    GrowthAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("growth_agent_loop", __argsBuffer, this.setCallReducerFlags.growthAgentLoopFlags);
  }

  onGrowthAgentLoop(callback: (ctx: ReducerEventContext, timer: GrowthLoopTimer) => void) {
    this.connection.onReducer("growth_agent_loop", callback);
  }

  removeOnGrowthAgentLoop(callback: (ctx: ReducerEventContext, timer: GrowthLoopTimer) => void) {
    this.connection.offReducer("growth_agent_loop", callback);
  }

  hideDeployable(timer: HideDeployableTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    HideDeployable.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("hide_deployable", __argsBuffer, this.setCallReducerFlags.hideDeployableFlags);
  }

  onHideDeployable(callback: (ctx: ReducerEventContext, timer: HideDeployableTimer) => void) {
    this.connection.onReducer("hide_deployable", callback);
  }

  removeOnHideDeployable(callback: (ctx: ReducerEventContext, timer: HideDeployableTimer) => void) {
    this.connection.offReducer("hide_deployable", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  importAchievementDesc(records: AchievementDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportAchievementDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_achievement_desc", __argsBuffer, this.setCallReducerFlags.importAchievementDescFlags);
  }

  onImportAchievementDesc(callback: (ctx: ReducerEventContext, records: AchievementDesc[]) => void) {
    this.connection.onReducer("import_achievement_desc", callback);
  }

  removeOnImportAchievementDesc(callback: (ctx: ReducerEventContext, records: AchievementDesc[]) => void) {
    this.connection.offReducer("import_achievement_desc", callback);
  }

  importActiveBuffState(records: ActiveBuffState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportActiveBuffState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_active_buff_state", __argsBuffer, this.setCallReducerFlags.importActiveBuffStateFlags);
  }

  onImportActiveBuffState(callback: (ctx: ReducerEventContext, records: ActiveBuffState[]) => void) {
    this.connection.onReducer("import_active_buff_state", callback);
  }

  removeOnImportActiveBuffState(callback: (ctx: ReducerEventContext, records: ActiveBuffState[]) => void) {
    this.connection.offReducer("import_active_buff_state", callback);
  }

  importAdminBroadcast(records: AdminBroadcast[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportAdminBroadcast.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_admin_broadcast", __argsBuffer, this.setCallReducerFlags.importAdminBroadcastFlags);
  }

  onImportAdminBroadcast(callback: (ctx: ReducerEventContext, records: AdminBroadcast[]) => void) {
    this.connection.onReducer("import_admin_broadcast", callback);
  }

  removeOnImportAdminBroadcast(callback: (ctx: ReducerEventContext, records: AdminBroadcast[]) => void) {
    this.connection.offReducer("import_admin_broadcast", callback);
  }

  importAlertDesc(records: AlertDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportAlertDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_alert_desc", __argsBuffer, this.setCallReducerFlags.importAlertDescFlags);
  }

  onImportAlertDesc(callback: (ctx: ReducerEventContext, records: AlertDesc[]) => void) {
    this.connection.onReducer("import_alert_desc", callback);
  }

  removeOnImportAlertDesc(callback: (ctx: ReducerEventContext, records: AlertDesc[]) => void) {
    this.connection.offReducer("import_alert_desc", callback);
  }

  importAlertState(records: AlertState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportAlertState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_alert_state", __argsBuffer, this.setCallReducerFlags.importAlertStateFlags);
  }

  onImportAlertState(callback: (ctx: ReducerEventContext, records: AlertState[]) => void) {
    this.connection.onReducer("import_alert_state", callback);
  }

  removeOnImportAlertState(callback: (ctx: ReducerEventContext, records: AlertState[]) => void) {
    this.connection.offReducer("import_alert_state", callback);
  }

  importAttackOutcomeState(records: AttackOutcomeState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportAttackOutcomeState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_attack_outcome_state", __argsBuffer, this.setCallReducerFlags.importAttackOutcomeStateFlags);
  }

  onImportAttackOutcomeState(callback: (ctx: ReducerEventContext, records: AttackOutcomeState[]) => void) {
    this.connection.onReducer("import_attack_outcome_state", callback);
  }

  removeOnImportAttackOutcomeState(callback: (ctx: ReducerEventContext, records: AttackOutcomeState[]) => void) {
    this.connection.offReducer("import_attack_outcome_state", callback);
  }

  importBiomeDesc(records: BiomeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportBiomeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_biome_desc", __argsBuffer, this.setCallReducerFlags.importBiomeDescFlags);
  }

  onImportBiomeDesc(callback: (ctx: ReducerEventContext, records: BiomeDesc[]) => void) {
    this.connection.onReducer("import_biome_desc", callback);
  }

  removeOnImportBiomeDesc(callback: (ctx: ReducerEventContext, records: BiomeDesc[]) => void) {
    this.connection.offReducer("import_biome_desc", callback);
  }

  importBuffDesc(records: BuffDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportBuffDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_buff_desc", __argsBuffer, this.setCallReducerFlags.importBuffDescFlags);
  }

  onImportBuffDesc(callback: (ctx: ReducerEventContext, records: BuffDesc[]) => void) {
    this.connection.onReducer("import_buff_desc", callback);
  }

  removeOnImportBuffDesc(callback: (ctx: ReducerEventContext, records: BuffDesc[]) => void) {
    this.connection.offReducer("import_buff_desc", callback);
  }

  importBuffTypeDesc(records: BuffTypeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportBuffTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_buff_type_desc", __argsBuffer, this.setCallReducerFlags.importBuffTypeDescFlags);
  }

  onImportBuffTypeDesc(callback: (ctx: ReducerEventContext, records: BuffTypeDesc[]) => void) {
    this.connection.onReducer("import_buff_type_desc", callback);
  }

  removeOnImportBuffTypeDesc(callback: (ctx: ReducerEventContext, records: BuffTypeDesc[]) => void) {
    this.connection.offReducer("import_buff_type_desc", callback);
  }

  importBuildingClaimDesc(records: BuildingClaimDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportBuildingClaimDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_building_claim_desc", __argsBuffer, this.setCallReducerFlags.importBuildingClaimDescFlags);
  }

  onImportBuildingClaimDesc(callback: (ctx: ReducerEventContext, records: BuildingClaimDesc[]) => void) {
    this.connection.onReducer("import_building_claim_desc", callback);
  }

  removeOnImportBuildingClaimDesc(callback: (ctx: ReducerEventContext, records: BuildingClaimDesc[]) => void) {
    this.connection.offReducer("import_building_claim_desc", callback);
  }

  importBuildingDesc(records: BuildingDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportBuildingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_building_desc", __argsBuffer, this.setCallReducerFlags.importBuildingDescFlags);
  }

  onImportBuildingDesc(callback: (ctx: ReducerEventContext, records: BuildingDesc[]) => void) {
    this.connection.onReducer("import_building_desc", callback);
  }

  removeOnImportBuildingDesc(callback: (ctx: ReducerEventContext, records: BuildingDesc[]) => void) {
    this.connection.offReducer("import_building_desc", callback);
  }

  importBuildingPortalDesc(records: BuildingPortalDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportBuildingPortalDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_building_portal_desc", __argsBuffer, this.setCallReducerFlags.importBuildingPortalDescFlags);
  }

  onImportBuildingPortalDesc(callback: (ctx: ReducerEventContext, records: BuildingPortalDesc[]) => void) {
    this.connection.onReducer("import_building_portal_desc", callback);
  }

  removeOnImportBuildingPortalDesc(callback: (ctx: ReducerEventContext, records: BuildingPortalDesc[]) => void) {
    this.connection.offReducer("import_building_portal_desc", callback);
  }

  importBuildingRepairsDesc(records: BuildingRepairsDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportBuildingRepairsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_building_repairs_desc", __argsBuffer, this.setCallReducerFlags.importBuildingRepairsDescFlags);
  }

  onImportBuildingRepairsDesc(callback: (ctx: ReducerEventContext, records: BuildingRepairsDesc[]) => void) {
    this.connection.onReducer("import_building_repairs_desc", callback);
  }

  removeOnImportBuildingRepairsDesc(callback: (ctx: ReducerEventContext, records: BuildingRepairsDesc[]) => void) {
    this.connection.offReducer("import_building_repairs_desc", callback);
  }

  importBuildingSpawnDesc(records: BuildingSpawnDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportBuildingSpawnDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_building_spawn_desc", __argsBuffer, this.setCallReducerFlags.importBuildingSpawnDescFlags);
  }

  onImportBuildingSpawnDesc(callback: (ctx: ReducerEventContext, records: BuildingSpawnDesc[]) => void) {
    this.connection.onReducer("import_building_spawn_desc", callback);
  }

  removeOnImportBuildingSpawnDesc(callback: (ctx: ReducerEventContext, records: BuildingSpawnDesc[]) => void) {
    this.connection.offReducer("import_building_spawn_desc", callback);
  }

  importBuildingState(records: BuildingState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportBuildingState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_building_state", __argsBuffer, this.setCallReducerFlags.importBuildingStateFlags);
  }

  onImportBuildingState(callback: (ctx: ReducerEventContext, records: BuildingState[]) => void) {
    this.connection.onReducer("import_building_state", callback);
  }

  removeOnImportBuildingState(callback: (ctx: ReducerEventContext, records: BuildingState[]) => void) {
    this.connection.offReducer("import_building_state", callback);
  }

  importBuildingTypeDesc(records: BuildingTypeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportBuildingTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_building_type_desc", __argsBuffer, this.setCallReducerFlags.importBuildingTypeDescFlags);
  }

  onImportBuildingTypeDesc(callback: (ctx: ReducerEventContext, records: BuildingTypeDesc[]) => void) {
    this.connection.onReducer("import_building_type_desc", callback);
  }

  removeOnImportBuildingTypeDesc(callback: (ctx: ReducerEventContext, records: BuildingTypeDesc[]) => void) {
    this.connection.offReducer("import_building_type_desc", callback);
  }

  importCargoDesc(records: CargoDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportCargoDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_cargo_desc", __argsBuffer, this.setCallReducerFlags.importCargoDescFlags);
  }

  onImportCargoDesc(callback: (ctx: ReducerEventContext, records: CargoDesc[]) => void) {
    this.connection.onReducer("import_cargo_desc", callback);
  }

  removeOnImportCargoDesc(callback: (ctx: ReducerEventContext, records: CargoDesc[]) => void) {
    this.connection.offReducer("import_cargo_desc", callback);
  }

  importCharacterStatDesc(records: CharacterStatDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportCharacterStatDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_character_stat_desc", __argsBuffer, this.setCallReducerFlags.importCharacterStatDescFlags);
  }

  onImportCharacterStatDesc(callback: (ctx: ReducerEventContext, records: CharacterStatDesc[]) => void) {
    this.connection.onReducer("import_character_stat_desc", callback);
  }

  removeOnImportCharacterStatDesc(callback: (ctx: ReducerEventContext, records: CharacterStatDesc[]) => void) {
    this.connection.offReducer("import_character_stat_desc", callback);
  }

  importCharacterStatsState(records: CharacterStatsState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportCharacterStatsState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_character_stats_state", __argsBuffer, this.setCallReducerFlags.importCharacterStatsStateFlags);
  }

  onImportCharacterStatsState(callback: (ctx: ReducerEventContext, records: CharacterStatsState[]) => void) {
    this.connection.onReducer("import_character_stats_state", callback);
  }

  removeOnImportCharacterStatsState(callback: (ctx: ReducerEventContext, records: CharacterStatsState[]) => void) {
    this.connection.offReducer("import_character_stats_state", callback);
  }

  importChatMessageState(records: ChatMessageState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportChatMessageState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_chat_message_state", __argsBuffer, this.setCallReducerFlags.importChatMessageStateFlags);
  }

  onImportChatMessageState(callback: (ctx: ReducerEventContext, records: ChatMessageState[]) => void) {
    this.connection.onReducer("import_chat_message_state", callback);
  }

  removeOnImportChatMessageState(callback: (ctx: ReducerEventContext, records: ChatMessageState[]) => void) {
    this.connection.offReducer("import_chat_message_state", callback);
  }

  importChestRarityDesc(records: ChestRarityDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportChestRarityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_chest_rarity_desc", __argsBuffer, this.setCallReducerFlags.importChestRarityDescFlags);
  }

  onImportChestRarityDesc(callback: (ctx: ReducerEventContext, records: ChestRarityDesc[]) => void) {
    this.connection.onReducer("import_chest_rarity_desc", callback);
  }

  removeOnImportChestRarityDesc(callback: (ctx: ReducerEventContext, records: ChestRarityDesc[]) => void) {
    this.connection.offReducer("import_chest_rarity_desc", callback);
  }

  importClaimLocalState(records: ClaimLocalState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportClaimLocalState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_claim_local_state", __argsBuffer, this.setCallReducerFlags.importClaimLocalStateFlags);
  }

  onImportClaimLocalState(callback: (ctx: ReducerEventContext, records: ClaimLocalState[]) => void) {
    this.connection.onReducer("import_claim_local_state", callback);
  }

  removeOnImportClaimLocalState(callback: (ctx: ReducerEventContext, records: ClaimLocalState[]) => void) {
    this.connection.offReducer("import_claim_local_state", callback);
  }

  importClaimRecruitmentState(records: ClaimRecruitmentState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportClaimRecruitmentState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_claim_recruitment_state", __argsBuffer, this.setCallReducerFlags.importClaimRecruitmentStateFlags);
  }

  onImportClaimRecruitmentState(callback: (ctx: ReducerEventContext, records: ClaimRecruitmentState[]) => void) {
    this.connection.onReducer("import_claim_recruitment_state", callback);
  }

  removeOnImportClaimRecruitmentState(callback: (ctx: ReducerEventContext, records: ClaimRecruitmentState[]) => void) {
    this.connection.offReducer("import_claim_recruitment_state", callback);
  }

  importClaimState(records: ClaimState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportClaimState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_claim_state", __argsBuffer, this.setCallReducerFlags.importClaimStateFlags);
  }

  onImportClaimState(callback: (ctx: ReducerEventContext, records: ClaimState[]) => void) {
    this.connection.onReducer("import_claim_state", callback);
  }

  removeOnImportClaimState(callback: (ctx: ReducerEventContext, records: ClaimState[]) => void) {
    this.connection.offReducer("import_claim_state", callback);
  }

  importClaimTechDesc(records: ClaimTechDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportClaimTechDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_claim_tech_desc", __argsBuffer, this.setCallReducerFlags.importClaimTechDescFlags);
  }

  onImportClaimTechDesc(callback: (ctx: ReducerEventContext, records: ClaimTechDesc[]) => void) {
    this.connection.onReducer("import_claim_tech_desc", callback);
  }

  removeOnImportClaimTechDesc(callback: (ctx: ReducerEventContext, records: ClaimTechDesc[]) => void) {
    this.connection.offReducer("import_claim_tech_desc", callback);
  }

  importClaimTechState(records: ClaimTechState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportClaimTechState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_claim_tech_state", __argsBuffer, this.setCallReducerFlags.importClaimTechStateFlags);
  }

  onImportClaimTechState(callback: (ctx: ReducerEventContext, records: ClaimTechState[]) => void) {
    this.connection.onReducer("import_claim_tech_state", callback);
  }

  removeOnImportClaimTechState(callback: (ctx: ReducerEventContext, records: ClaimTechState[]) => void) {
    this.connection.offReducer("import_claim_tech_state", callback);
  }

  importClaimTileCost(records: ClaimTileCost[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportClaimTileCost.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_claim_tile_cost", __argsBuffer, this.setCallReducerFlags.importClaimTileCostFlags);
  }

  onImportClaimTileCost(callback: (ctx: ReducerEventContext, records: ClaimTileCost[]) => void) {
    this.connection.onReducer("import_claim_tile_cost", callback);
  }

  removeOnImportClaimTileCost(callback: (ctx: ReducerEventContext, records: ClaimTileCost[]) => void) {
    this.connection.offReducer("import_claim_tile_cost", callback);
  }

  importClaimTileState(records: ClaimTileState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportClaimTileState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_claim_tile_state", __argsBuffer, this.setCallReducerFlags.importClaimTileStateFlags);
  }

  onImportClaimTileState(callback: (ctx: ReducerEventContext, records: ClaimTileState[]) => void) {
    this.connection.onReducer("import_claim_tile_state", callback);
  }

  removeOnImportClaimTileState(callback: (ctx: ReducerEventContext, records: ClaimTileState[]) => void) {
    this.connection.offReducer("import_claim_tile_state", callback);
  }

  importClimbRequirementDesc(records: ClimbRequirementDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportClimbRequirementDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_climb_requirement_desc", __argsBuffer, this.setCallReducerFlags.importClimbRequirementDescFlags);
  }

  onImportClimbRequirementDesc(callback: (ctx: ReducerEventContext, records: ClimbRequirementDesc[]) => void) {
    this.connection.onReducer("import_climb_requirement_desc", callback);
  }

  removeOnImportClimbRequirementDesc(callback: (ctx: ReducerEventContext, records: ClimbRequirementDesc[]) => void) {
    this.connection.offReducer("import_climb_requirement_desc", callback);
  }

  importClothingDesc(records: ClothingDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportClothingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_clothing_desc", __argsBuffer, this.setCallReducerFlags.importClothingDescFlags);
  }

  onImportClothingDesc(callback: (ctx: ReducerEventContext, records: ClothingDesc[]) => void) {
    this.connection.onReducer("import_clothing_desc", callback);
  }

  removeOnImportClothingDesc(callback: (ctx: ReducerEventContext, records: ClothingDesc[]) => void) {
    this.connection.offReducer("import_clothing_desc", callback);
  }

  importCollectibleDesc(records: CollectibleDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportCollectibleDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_collectible_desc", __argsBuffer, this.setCallReducerFlags.importCollectibleDescFlags);
  }

  onImportCollectibleDesc(callback: (ctx: ReducerEventContext, records: CollectibleDesc[]) => void) {
    this.connection.onReducer("import_collectible_desc", callback);
  }

  removeOnImportCollectibleDesc(callback: (ctx: ReducerEventContext, records: CollectibleDesc[]) => void) {
    this.connection.offReducer("import_collectible_desc", callback);
  }

  importCombatActionDesc(records: CombatActionDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportCombatActionDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_combat_action_desc", __argsBuffer, this.setCallReducerFlags.importCombatActionDescFlags);
  }

  onImportCombatActionDesc(callback: (ctx: ReducerEventContext, records: CombatActionDesc[]) => void) {
    this.connection.onReducer("import_combat_action_desc", callback);
  }

  removeOnImportCombatActionDesc(callback: (ctx: ReducerEventContext, records: CombatActionDesc[]) => void) {
    this.connection.offReducer("import_combat_action_desc", callback);
  }

  importCombatState(records: CombatState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportCombatState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_combat_state", __argsBuffer, this.setCallReducerFlags.importCombatStateFlags);
  }

  onImportCombatState(callback: (ctx: ReducerEventContext, records: CombatState[]) => void) {
    this.connection.onReducer("import_combat_state", callback);
  }

  removeOnImportCombatState(callback: (ctx: ReducerEventContext, records: CombatState[]) => void) {
    this.connection.offReducer("import_combat_state", callback);
  }

  importConfig(records: Config[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportConfig.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_config", __argsBuffer, this.setCallReducerFlags.importConfigFlags);
  }

  onImportConfig(callback: (ctx: ReducerEventContext, records: Config[]) => void) {
    this.connection.onReducer("import_config", callback);
  }

  removeOnImportConfig(callback: (ctx: ReducerEventContext, records: Config[]) => void) {
    this.connection.offReducer("import_config", callback);
  }

  importConstructionRecipeDesc(records: ConstructionRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportConstructionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_construction_recipe_desc", __argsBuffer, this.setCallReducerFlags.importConstructionRecipeDescFlags);
  }

  onImportConstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: ConstructionRecipeDesc[]) => void) {
    this.connection.onReducer("import_construction_recipe_desc", callback);
  }

  removeOnImportConstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: ConstructionRecipeDesc[]) => void) {
    this.connection.offReducer("import_construction_recipe_desc", callback);
  }

  importCraftingRecipeDesc(records: CraftingRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportCraftingRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_crafting_recipe_desc", __argsBuffer, this.setCallReducerFlags.importCraftingRecipeDescFlags);
  }

  onImportCraftingRecipeDesc(callback: (ctx: ReducerEventContext, records: CraftingRecipeDesc[]) => void) {
    this.connection.onReducer("import_crafting_recipe_desc", callback);
  }

  removeOnImportCraftingRecipeDesc(callback: (ctx: ReducerEventContext, records: CraftingRecipeDesc[]) => void) {
    this.connection.offReducer("import_crafting_recipe_desc", callback);
  }

  importDeconstructionRecipeDesc(records: DeconstructionRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportDeconstructionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_deconstruction_recipe_desc", __argsBuffer, this.setCallReducerFlags.importDeconstructionRecipeDescFlags);
  }

  onImportDeconstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: DeconstructionRecipeDesc[]) => void) {
    this.connection.onReducer("import_deconstruction_recipe_desc", callback);
  }

  removeOnImportDeconstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: DeconstructionRecipeDesc[]) => void) {
    this.connection.offReducer("import_deconstruction_recipe_desc", callback);
  }

  importDeployableDesc(records: DeployableDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportDeployableDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_deployable_desc", __argsBuffer, this.setCallReducerFlags.importDeployableDescFlags);
  }

  onImportDeployableDesc(callback: (ctx: ReducerEventContext, records: DeployableDesc[]) => void) {
    this.connection.onReducer("import_deployable_desc", callback);
  }

  removeOnImportDeployableDesc(callback: (ctx: ReducerEventContext, records: DeployableDesc[]) => void) {
    this.connection.offReducer("import_deployable_desc", callback);
  }

  importDeployableState(records: DeployableState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportDeployableState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_deployable_state", __argsBuffer, this.setCallReducerFlags.importDeployableStateFlags);
  }

  onImportDeployableState(callback: (ctx: ReducerEventContext, records: DeployableState[]) => void) {
    this.connection.onReducer("import_deployable_state", callback);
  }

  removeOnImportDeployableState(callback: (ctx: ReducerEventContext, records: DeployableState[]) => void) {
    this.connection.offReducer("import_deployable_state", callback);
  }

  importDimensionDescriptionState(records: DimensionDescriptionState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportDimensionDescriptionState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_dimension_description_state", __argsBuffer, this.setCallReducerFlags.importDimensionDescriptionStateFlags);
  }

  onImportDimensionDescriptionState(callback: (ctx: ReducerEventContext, records: DimensionDescriptionState[]) => void) {
    this.connection.onReducer("import_dimension_description_state", callback);
  }

  removeOnImportDimensionDescriptionState(callback: (ctx: ReducerEventContext, records: DimensionDescriptionState[]) => void) {
    this.connection.offReducer("import_dimension_description_state", callback);
  }

  importDimensionNetworkDescriptionState(records: DimensionNetworkState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportDimensionNetworkDescriptionState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_dimension_network_description_state", __argsBuffer, this.setCallReducerFlags.importDimensionNetworkDescriptionStateFlags);
  }

  onImportDimensionNetworkDescriptionState(callback: (ctx: ReducerEventContext, records: DimensionNetworkState[]) => void) {
    this.connection.onReducer("import_dimension_network_description_state", callback);
  }

  removeOnImportDimensionNetworkDescriptionState(callback: (ctx: ReducerEventContext, records: DimensionNetworkState[]) => void) {
    this.connection.offReducer("import_dimension_network_description_state", callback);
  }

  importDistantVisibleEntityDesc(records: DistantVisibleEntityDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportDistantVisibleEntityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_distant_visible_entity_desc", __argsBuffer, this.setCallReducerFlags.importDistantVisibleEntityDescFlags);
  }

  onImportDistantVisibleEntityDesc(callback: (ctx: ReducerEventContext, records: DistantVisibleEntityDesc[]) => void) {
    this.connection.onReducer("import_distant_visible_entity_desc", callback);
  }

  removeOnImportDistantVisibleEntityDesc(callback: (ctx: ReducerEventContext, records: DistantVisibleEntityDesc[]) => void) {
    this.connection.offReducer("import_distant_visible_entity_desc", callback);
  }

  importDroppedInventoryState(records: DroppedInventoryState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportDroppedInventoryState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_dropped_inventory_state", __argsBuffer, this.setCallReducerFlags.importDroppedInventoryStateFlags);
  }

  onImportDroppedInventoryState(callback: (ctx: ReducerEventContext, records: DroppedInventoryState[]) => void) {
    this.connection.onReducer("import_dropped_inventory_state", callback);
  }

  removeOnImportDroppedInventoryState(callback: (ctx: ReducerEventContext, records: DroppedInventoryState[]) => void) {
    this.connection.offReducer("import_dropped_inventory_state", callback);
  }

  importElevatorDesc(records: ElevatorDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportElevatorDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_elevator_desc", __argsBuffer, this.setCallReducerFlags.importElevatorDescFlags);
  }

  onImportElevatorDesc(callback: (ctx: ReducerEventContext, records: ElevatorDesc[]) => void) {
    this.connection.onReducer("import_elevator_desc", callback);
  }

  removeOnImportElevatorDesc(callback: (ctx: ReducerEventContext, records: ElevatorDesc[]) => void) {
    this.connection.offReducer("import_elevator_desc", callback);
  }

  importEmoteDesc(records: EmoteDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEmoteDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_emote_desc", __argsBuffer, this.setCallReducerFlags.importEmoteDescFlags);
  }

  onImportEmoteDesc(callback: (ctx: ReducerEventContext, records: EmoteDesc[]) => void) {
    this.connection.onReducer("import_emote_desc", callback);
  }

  removeOnImportEmoteDesc(callback: (ctx: ReducerEventContext, records: EmoteDesc[]) => void) {
    this.connection.offReducer("import_emote_desc", callback);
  }

  importEmpireColorsDesc(records: EmpireColorDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEmpireColorsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_empire_colors_desc", __argsBuffer, this.setCallReducerFlags.importEmpireColorsDescFlags);
  }

  onImportEmpireColorsDesc(callback: (ctx: ReducerEventContext, records: EmpireColorDesc[]) => void) {
    this.connection.onReducer("import_empire_colors_desc", callback);
  }

  removeOnImportEmpireColorsDesc(callback: (ctx: ReducerEventContext, records: EmpireColorDesc[]) => void) {
    this.connection.offReducer("import_empire_colors_desc", callback);
  }

  importEmpireIconDesc(records: EmpireIconDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEmpireIconDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_empire_icon_desc", __argsBuffer, this.setCallReducerFlags.importEmpireIconDescFlags);
  }

  onImportEmpireIconDesc(callback: (ctx: ReducerEventContext, records: EmpireIconDesc[]) => void) {
    this.connection.onReducer("import_empire_icon_desc", callback);
  }

  removeOnImportEmpireIconDesc(callback: (ctx: ReducerEventContext, records: EmpireIconDesc[]) => void) {
    this.connection.offReducer("import_empire_icon_desc", callback);
  }

  importEmpireNotificationDesc(records: EmpireNotificationDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEmpireNotificationDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_empire_notification_desc", __argsBuffer, this.setCallReducerFlags.importEmpireNotificationDescFlags);
  }

  onImportEmpireNotificationDesc(callback: (ctx: ReducerEventContext, records: EmpireNotificationDesc[]) => void) {
    this.connection.onReducer("import_empire_notification_desc", callback);
  }

  removeOnImportEmpireNotificationDesc(callback: (ctx: ReducerEventContext, records: EmpireNotificationDesc[]) => void) {
    this.connection.offReducer("import_empire_notification_desc", callback);
  }

  importEmpireRankDesc(records: EmpireRankDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEmpireRankDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_empire_rank_desc", __argsBuffer, this.setCallReducerFlags.importEmpireRankDescFlags);
  }

  onImportEmpireRankDesc(callback: (ctx: ReducerEventContext, records: EmpireRankDesc[]) => void) {
    this.connection.onReducer("import_empire_rank_desc", callback);
  }

  removeOnImportEmpireRankDesc(callback: (ctx: ReducerEventContext, records: EmpireRankDesc[]) => void) {
    this.connection.offReducer("import_empire_rank_desc", callback);
  }

  importEmpireSuppliesDesc(records: EmpireSuppliesDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEmpireSuppliesDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_empire_supplies_desc", __argsBuffer, this.setCallReducerFlags.importEmpireSuppliesDescFlags);
  }

  onImportEmpireSuppliesDesc(callback: (ctx: ReducerEventContext, records: EmpireSuppliesDesc[]) => void) {
    this.connection.onReducer("import_empire_supplies_desc", callback);
  }

  removeOnImportEmpireSuppliesDesc(callback: (ctx: ReducerEventContext, records: EmpireSuppliesDesc[]) => void) {
    this.connection.offReducer("import_empire_supplies_desc", callback);
  }

  importEmpireTerritoryDesc(records: EmpireTerritoryDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEmpireTerritoryDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_empire_territory_desc", __argsBuffer, this.setCallReducerFlags.importEmpireTerritoryDescFlags);
  }

  onImportEmpireTerritoryDesc(callback: (ctx: ReducerEventContext, records: EmpireTerritoryDesc[]) => void) {
    this.connection.onReducer("import_empire_territory_desc", callback);
  }

  removeOnImportEmpireTerritoryDesc(callback: (ctx: ReducerEventContext, records: EmpireTerritoryDesc[]) => void) {
    this.connection.offReducer("import_empire_territory_desc", callback);
  }

  importEnemyAiParamsDesc(records: EnemyAiParamsDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEnemyAiParamsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_enemy_ai_params_desc", __argsBuffer, this.setCallReducerFlags.importEnemyAiParamsDescFlags);
  }

  onImportEnemyAiParamsDesc(callback: (ctx: ReducerEventContext, records: EnemyAiParamsDesc[]) => void) {
    this.connection.onReducer("import_enemy_ai_params_desc", callback);
  }

  removeOnImportEnemyAiParamsDesc(callback: (ctx: ReducerEventContext, records: EnemyAiParamsDesc[]) => void) {
    this.connection.offReducer("import_enemy_ai_params_desc", callback);
  }

  importEnemyDesc(records: EnemyDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEnemyDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_enemy_desc", __argsBuffer, this.setCallReducerFlags.importEnemyDescFlags);
  }

  onImportEnemyDesc(callback: (ctx: ReducerEventContext, records: EnemyDesc[]) => void) {
    this.connection.onReducer("import_enemy_desc", callback);
  }

  removeOnImportEnemyDesc(callback: (ctx: ReducerEventContext, records: EnemyDesc[]) => void) {
    this.connection.offReducer("import_enemy_desc", callback);
  }

  importEnemyState(records: EnemyState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEnemyState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_enemy_state", __argsBuffer, this.setCallReducerFlags.importEnemyStateFlags);
  }

  onImportEnemyState(callback: (ctx: ReducerEventContext, records: EnemyState[]) => void) {
    this.connection.onReducer("import_enemy_state", callback);
  }

  removeOnImportEnemyState(callback: (ctx: ReducerEventContext, records: EnemyState[]) => void) {
    this.connection.offReducer("import_enemy_state", callback);
  }

  importEnvironmentDebuffDesc(records: EnvironmentDebuffDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEnvironmentDebuffDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_environment_debuff_desc", __argsBuffer, this.setCallReducerFlags.importEnvironmentDebuffDescFlags);
  }

  onImportEnvironmentDebuffDesc(callback: (ctx: ReducerEventContext, records: EnvironmentDebuffDesc[]) => void) {
    this.connection.onReducer("import_environment_debuff_desc", callback);
  }

  removeOnImportEnvironmentDebuffDesc(callback: (ctx: ReducerEventContext, records: EnvironmentDebuffDesc[]) => void) {
    this.connection.offReducer("import_environment_debuff_desc", callback);
  }

  importEquipmentDesc(records: EquipmentDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEquipmentDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_equipment_desc", __argsBuffer, this.setCallReducerFlags.importEquipmentDescFlags);
  }

  onImportEquipmentDesc(callback: (ctx: ReducerEventContext, records: EquipmentDesc[]) => void) {
    this.connection.onReducer("import_equipment_desc", callback);
  }

  removeOnImportEquipmentDesc(callback: (ctx: ReducerEventContext, records: EquipmentDesc[]) => void) {
    this.connection.offReducer("import_equipment_desc", callback);
  }

  importEquipmentState(records: EquipmentState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportEquipmentState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_equipment_state", __argsBuffer, this.setCallReducerFlags.importEquipmentStateFlags);
  }

  onImportEquipmentState(callback: (ctx: ReducerEventContext, records: EquipmentState[]) => void) {
    this.connection.onReducer("import_equipment_state", callback);
  }

  removeOnImportEquipmentState(callback: (ctx: ReducerEventContext, records: EquipmentState[]) => void) {
    this.connection.offReducer("import_equipment_state", callback);
  }

  importExperienceState(records: ExperienceState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportExperienceState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_experience_state", __argsBuffer, this.setCallReducerFlags.importExperienceStateFlags);
  }

  onImportExperienceState(callback: (ctx: ReducerEventContext, records: ExperienceState[]) => void) {
    this.connection.onReducer("import_experience_state", callback);
  }

  removeOnImportExperienceState(callback: (ctx: ReducerEventContext, records: ExperienceState[]) => void) {
    this.connection.offReducer("import_experience_state", callback);
  }

  importExplorationChunksState(records: ExplorationChunksState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportExplorationChunksState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_exploration_chunks_state", __argsBuffer, this.setCallReducerFlags.importExplorationChunksStateFlags);
  }

  onImportExplorationChunksState(callback: (ctx: ReducerEventContext, records: ExplorationChunksState[]) => void) {
    this.connection.onReducer("import_exploration_chunks_state", callback);
  }

  removeOnImportExplorationChunksState(callback: (ctx: ReducerEventContext, records: ExplorationChunksState[]) => void) {
    this.connection.offReducer("import_exploration_chunks_state", callback);
  }

  importExtractionRecipeDesc(records: ExtractionRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportExtractionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_extraction_recipe_desc", __argsBuffer, this.setCallReducerFlags.importExtractionRecipeDescFlags);
  }

  onImportExtractionRecipeDesc(callback: (ctx: ReducerEventContext, records: ExtractionRecipeDesc[]) => void) {
    this.connection.onReducer("import_extraction_recipe_desc", callback);
  }

  removeOnImportExtractionRecipeDesc(callback: (ctx: ReducerEventContext, records: ExtractionRecipeDesc[]) => void) {
    this.connection.offReducer("import_extraction_recipe_desc", callback);
  }

  importFoodDesc(records: FoodDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportFoodDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_food_desc", __argsBuffer, this.setCallReducerFlags.importFoodDescFlags);
  }

  onImportFoodDesc(callback: (ctx: ReducerEventContext, records: FoodDesc[]) => void) {
    this.connection.onReducer("import_food_desc", callback);
  }

  removeOnImportFoodDesc(callback: (ctx: ReducerEventContext, records: FoodDesc[]) => void) {
    this.connection.offReducer("import_food_desc", callback);
  }

  importFootprintTileState(records: FootprintTileState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportFootprintTileState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_footprint_tile_state", __argsBuffer, this.setCallReducerFlags.importFootprintTileStateFlags);
  }

  onImportFootprintTileState(callback: (ctx: ReducerEventContext, records: FootprintTileState[]) => void) {
    this.connection.onReducer("import_footprint_tile_state", callback);
  }

  removeOnImportFootprintTileState(callback: (ctx: ReducerEventContext, records: FootprintTileState[]) => void) {
    this.connection.offReducer("import_footprint_tile_state", callback);
  }

  importGateDesc(records: GateDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportGateDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_gate_desc", __argsBuffer, this.setCallReducerFlags.importGateDescFlags);
  }

  onImportGateDesc(callback: (ctx: ReducerEventContext, records: GateDesc[]) => void) {
    this.connection.onReducer("import_gate_desc", callback);
  }

  removeOnImportGateDesc(callback: (ctx: ReducerEventContext, records: GateDesc[]) => void) {
    this.connection.offReducer("import_gate_desc", callback);
  }

  importGlobals(records: Globals[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportGlobals.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_globals", __argsBuffer, this.setCallReducerFlags.importGlobalsFlags);
  }

  onImportGlobals(callback: (ctx: ReducerEventContext, records: Globals[]) => void) {
    this.connection.onReducer("import_globals", callback);
  }

  removeOnImportGlobals(callback: (ctx: ReducerEventContext, records: Globals[]) => void) {
    this.connection.offReducer("import_globals", callback);
  }

  importGrowthState(records: GrowthState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportGrowthState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_growth_state", __argsBuffer, this.setCallReducerFlags.importGrowthStateFlags);
  }

  onImportGrowthState(callback: (ctx: ReducerEventContext, records: GrowthState[]) => void) {
    this.connection.onReducer("import_growth_state", callback);
  }

  removeOnImportGrowthState(callback: (ctx: ReducerEventContext, records: GrowthState[]) => void) {
    this.connection.offReducer("import_growth_state", callback);
  }

  importHealthState(records: HealthState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportHealthState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_health_state", __argsBuffer, this.setCallReducerFlags.importHealthStateFlags);
  }

  onImportHealthState(callback: (ctx: ReducerEventContext, records: HealthState[]) => void) {
    this.connection.onReducer("import_health_state", callback);
  }

  removeOnImportHealthState(callback: (ctx: ReducerEventContext, records: HealthState[]) => void) {
    this.connection.offReducer("import_health_state", callback);
  }

  importHerdCache(records: HerdState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportHerdCache.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_herd_cache", __argsBuffer, this.setCallReducerFlags.importHerdCacheFlags);
  }

  onImportHerdCache(callback: (ctx: ReducerEventContext, records: HerdState[]) => void) {
    this.connection.onReducer("import_herd_cache", callback);
  }

  removeOnImportHerdCache(callback: (ctx: ReducerEventContext, records: HerdState[]) => void) {
    this.connection.offReducer("import_herd_cache", callback);
  }

  importHexiteExchangeEntryDesc(records: HexiteExchangeEntryDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportHexiteExchangeEntryDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_hexite_exchange_entry_desc", __argsBuffer, this.setCallReducerFlags.importHexiteExchangeEntryDescFlags);
  }

  onImportHexiteExchangeEntryDesc(callback: (ctx: ReducerEventContext, records: HexiteExchangeEntryDesc[]) => void) {
    this.connection.onReducer("import_hexite_exchange_entry_desc", callback);
  }

  removeOnImportHexiteExchangeEntryDesc(callback: (ctx: ReducerEventContext, records: HexiteExchangeEntryDesc[]) => void) {
    this.connection.offReducer("import_hexite_exchange_entry_desc", callback);
  }

  importIdentityRole(records: IdentityRole[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportIdentityRole.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_identity_role", __argsBuffer, this.setCallReducerFlags.importIdentityRoleFlags);
  }

  onImportIdentityRole(callback: (ctx: ReducerEventContext, records: IdentityRole[]) => void) {
    this.connection.onReducer("import_identity_role", callback);
  }

  removeOnImportIdentityRole(callback: (ctx: ReducerEventContext, records: IdentityRole[]) => void) {
    this.connection.offReducer("import_identity_role", callback);
  }

  importInteriorCollapseTriggerState(records: InteriorCollapseTriggerState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportInteriorCollapseTriggerState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_interior_collapse_trigger_state", __argsBuffer, this.setCallReducerFlags.importInteriorCollapseTriggerStateFlags);
  }

  onImportInteriorCollapseTriggerState(callback: (ctx: ReducerEventContext, records: InteriorCollapseTriggerState[]) => void) {
    this.connection.onReducer("import_interior_collapse_trigger_state", callback);
  }

  removeOnImportInteriorCollapseTriggerState(callback: (ctx: ReducerEventContext, records: InteriorCollapseTriggerState[]) => void) {
    this.connection.offReducer("import_interior_collapse_trigger_state", callback);
  }

  importInteriorEnvironmentDesc(records: InteriorEnvironmentDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportInteriorEnvironmentDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_interior_environment_desc", __argsBuffer, this.setCallReducerFlags.importInteriorEnvironmentDescFlags);
  }

  onImportInteriorEnvironmentDesc(callback: (ctx: ReducerEventContext, records: InteriorEnvironmentDesc[]) => void) {
    this.connection.onReducer("import_interior_environment_desc", callback);
  }

  removeOnImportInteriorEnvironmentDesc(callback: (ctx: ReducerEventContext, records: InteriorEnvironmentDesc[]) => void) {
    this.connection.offReducer("import_interior_environment_desc", callback);
  }

  importInteriorInstanceDesc(records: InteriorInstanceDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportInteriorInstanceDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_interior_instance_desc", __argsBuffer, this.setCallReducerFlags.importInteriorInstanceDescFlags);
  }

  onImportInteriorInstanceDesc(callback: (ctx: ReducerEventContext, records: InteriorInstanceDesc[]) => void) {
    this.connection.onReducer("import_interior_instance_desc", callback);
  }

  removeOnImportInteriorInstanceDesc(callback: (ctx: ReducerEventContext, records: InteriorInstanceDesc[]) => void) {
    this.connection.offReducer("import_interior_instance_desc", callback);
  }

  importInteriorNetworkDesc(records: InteriorNetworkDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportInteriorNetworkDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_interior_network_desc", __argsBuffer, this.setCallReducerFlags.importInteriorNetworkDescFlags);
  }

  onImportInteriorNetworkDesc(callback: (ctx: ReducerEventContext, records: InteriorNetworkDesc[]) => void) {
    this.connection.onReducer("import_interior_network_desc", callback);
  }

  removeOnImportInteriorNetworkDesc(callback: (ctx: ReducerEventContext, records: InteriorNetworkDesc[]) => void) {
    this.connection.offReducer("import_interior_network_desc", callback);
  }

  importInteriorPortalConnectionsDesc(records: InteriorPortalConnectionsDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportInteriorPortalConnectionsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_interior_portal_connections_desc", __argsBuffer, this.setCallReducerFlags.importInteriorPortalConnectionsDescFlags);
  }

  onImportInteriorPortalConnectionsDesc(callback: (ctx: ReducerEventContext, records: InteriorPortalConnectionsDesc[]) => void) {
    this.connection.onReducer("import_interior_portal_connections_desc", callback);
  }

  removeOnImportInteriorPortalConnectionsDesc(callback: (ctx: ReducerEventContext, records: InteriorPortalConnectionsDesc[]) => void) {
    this.connection.offReducer("import_interior_portal_connections_desc", callback);
  }

  importInteriorShapeDesc(records: InteriorShapeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportInteriorShapeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_interior_shape_desc", __argsBuffer, this.setCallReducerFlags.importInteriorShapeDescFlags);
  }

  onImportInteriorShapeDesc(callback: (ctx: ReducerEventContext, records: InteriorShapeDesc[]) => void) {
    this.connection.onReducer("import_interior_shape_desc", callback);
  }

  removeOnImportInteriorShapeDesc(callback: (ctx: ReducerEventContext, records: InteriorShapeDesc[]) => void) {
    this.connection.offReducer("import_interior_shape_desc", callback);
  }

  importInteriorSpawnDesc(records: InteriorSpawnDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportInteriorSpawnDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_interior_spawn_desc", __argsBuffer, this.setCallReducerFlags.importInteriorSpawnDescFlags);
  }

  onImportInteriorSpawnDesc(callback: (ctx: ReducerEventContext, records: InteriorSpawnDesc[]) => void) {
    this.connection.onReducer("import_interior_spawn_desc", callback);
  }

  removeOnImportInteriorSpawnDesc(callback: (ctx: ReducerEventContext, records: InteriorSpawnDesc[]) => void) {
    this.connection.offReducer("import_interior_spawn_desc", callback);
  }

  importInventoryState(records: InventoryState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportInventoryState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_inventory_state", __argsBuffer, this.setCallReducerFlags.importInventoryStateFlags);
  }

  onImportInventoryState(callback: (ctx: ReducerEventContext, records: InventoryState[]) => void) {
    this.connection.onReducer("import_inventory_state", callback);
  }

  removeOnImportInventoryState(callback: (ctx: ReducerEventContext, records: InventoryState[]) => void) {
    this.connection.offReducer("import_inventory_state", callback);
  }

  importItemConversionRecipeDesc(records: ItemConversionRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportItemConversionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_item_conversion_recipe_desc", __argsBuffer, this.setCallReducerFlags.importItemConversionRecipeDescFlags);
  }

  onImportItemConversionRecipeDesc(callback: (ctx: ReducerEventContext, records: ItemConversionRecipeDesc[]) => void) {
    this.connection.onReducer("import_item_conversion_recipe_desc", callback);
  }

  removeOnImportItemConversionRecipeDesc(callback: (ctx: ReducerEventContext, records: ItemConversionRecipeDesc[]) => void) {
    this.connection.offReducer("import_item_conversion_recipe_desc", callback);
  }

  importItemDesc(records: ItemDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportItemDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_item_desc", __argsBuffer, this.setCallReducerFlags.importItemDescFlags);
  }

  onImportItemDesc(callback: (ctx: ReducerEventContext, records: ItemDesc[]) => void) {
    this.connection.onReducer("import_item_desc", callback);
  }

  removeOnImportItemDesc(callback: (ctx: ReducerEventContext, records: ItemDesc[]) => void) {
    this.connection.offReducer("import_item_desc", callback);
  }

  importItemListDesc(records: ItemListDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportItemListDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_item_list_desc", __argsBuffer, this.setCallReducerFlags.importItemListDescFlags);
  }

  onImportItemListDesc(callback: (ctx: ReducerEventContext, records: ItemListDesc[]) => void) {
    this.connection.onReducer("import_item_list_desc", callback);
  }

  removeOnImportItemListDesc(callback: (ctx: ReducerEventContext, records: ItemListDesc[]) => void) {
    this.connection.offReducer("import_item_list_desc", callback);
  }

  importKnowledgeAchievementState(records: KnowledgeAchievementState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeAchievementState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_achievement_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeAchievementStateFlags);
  }

  onImportKnowledgeAchievementState(callback: (ctx: ReducerEventContext, records: KnowledgeAchievementState[]) => void) {
    this.connection.onReducer("import_knowledge_achievement_state", callback);
  }

  removeOnImportKnowledgeAchievementState(callback: (ctx: ReducerEventContext, records: KnowledgeAchievementState[]) => void) {
    this.connection.offReducer("import_knowledge_achievement_state", callback);
  }

  importKnowledgeBattleActionState(records: KnowledgeBattleActionState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeBattleActionState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_battle_action_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeBattleActionStateFlags);
  }

  onImportKnowledgeBattleActionState(callback: (ctx: ReducerEventContext, records: KnowledgeBattleActionState[]) => void) {
    this.connection.onReducer("import_knowledge_battle_action_state", callback);
  }

  removeOnImportKnowledgeBattleActionState(callback: (ctx: ReducerEventContext, records: KnowledgeBattleActionState[]) => void) {
    this.connection.offReducer("import_knowledge_battle_action_state", callback);
  }

  importKnowledgeBuildingState(records: KnowledgeBuildingState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeBuildingState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_building_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeBuildingStateFlags);
  }

  onImportKnowledgeBuildingState(callback: (ctx: ReducerEventContext, records: KnowledgeBuildingState[]) => void) {
    this.connection.onReducer("import_knowledge_building_state", callback);
  }

  removeOnImportKnowledgeBuildingState(callback: (ctx: ReducerEventContext, records: KnowledgeBuildingState[]) => void) {
    this.connection.offReducer("import_knowledge_building_state", callback);
  }

  importKnowledgeCargoState(records: KnowledgeCargoState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeCargoState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_cargo_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeCargoStateFlags);
  }

  onImportKnowledgeCargoState(callback: (ctx: ReducerEventContext, records: KnowledgeCargoState[]) => void) {
    this.connection.onReducer("import_knowledge_cargo_state", callback);
  }

  removeOnImportKnowledgeCargoState(callback: (ctx: ReducerEventContext, records: KnowledgeCargoState[]) => void) {
    this.connection.offReducer("import_knowledge_cargo_state", callback);
  }

  importKnowledgeConstructionState(records: KnowledgeConstructionState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeConstructionState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_construction_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeConstructionStateFlags);
  }

  onImportKnowledgeConstructionState(callback: (ctx: ReducerEventContext, records: KnowledgeConstructionState[]) => void) {
    this.connection.onReducer("import_knowledge_construction_state", callback);
  }

  removeOnImportKnowledgeConstructionState(callback: (ctx: ReducerEventContext, records: KnowledgeConstructionState[]) => void) {
    this.connection.offReducer("import_knowledge_construction_state", callback);
  }

  importKnowledgeCraftState(records: KnowledgeCraftState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeCraftState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_craft_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeCraftStateFlags);
  }

  onImportKnowledgeCraftState(callback: (ctx: ReducerEventContext, records: KnowledgeCraftState[]) => void) {
    this.connection.onReducer("import_knowledge_craft_state", callback);
  }

  removeOnImportKnowledgeCraftState(callback: (ctx: ReducerEventContext, records: KnowledgeCraftState[]) => void) {
    this.connection.offReducer("import_knowledge_craft_state", callback);
  }

  importKnowledgeDeployableState(records: KnowledgeDeployableState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeDeployableState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_deployable_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeDeployableStateFlags);
  }

  onImportKnowledgeDeployableState(callback: (ctx: ReducerEventContext, records: KnowledgeDeployableState[]) => void) {
    this.connection.onReducer("import_knowledge_deployable_state", callback);
  }

  removeOnImportKnowledgeDeployableState(callback: (ctx: ReducerEventContext, records: KnowledgeDeployableState[]) => void) {
    this.connection.offReducer("import_knowledge_deployable_state", callback);
  }

  importKnowledgeEnemyState(records: KnowledgeEnemyState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeEnemyState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_enemy_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeEnemyStateFlags);
  }

  onImportKnowledgeEnemyState(callback: (ctx: ReducerEventContext, records: KnowledgeEnemyState[]) => void) {
    this.connection.onReducer("import_knowledge_enemy_state", callback);
  }

  removeOnImportKnowledgeEnemyState(callback: (ctx: ReducerEventContext, records: KnowledgeEnemyState[]) => void) {
    this.connection.offReducer("import_knowledge_enemy_state", callback);
  }

  importKnowledgeExtractState(records: KnowledgeExtractState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeExtractState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_extract_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeExtractStateFlags);
  }

  onImportKnowledgeExtractState(callback: (ctx: ReducerEventContext, records: KnowledgeExtractState[]) => void) {
    this.connection.onReducer("import_knowledge_extract_state", callback);
  }

  removeOnImportKnowledgeExtractState(callback: (ctx: ReducerEventContext, records: KnowledgeExtractState[]) => void) {
    this.connection.offReducer("import_knowledge_extract_state", callback);
  }

  importKnowledgeItemState(records: KnowledgeItemState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeItemState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_item_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeItemStateFlags);
  }

  onImportKnowledgeItemState(callback: (ctx: ReducerEventContext, records: KnowledgeItemState[]) => void) {
    this.connection.onReducer("import_knowledge_item_state", callback);
  }

  removeOnImportKnowledgeItemState(callback: (ctx: ReducerEventContext, records: KnowledgeItemState[]) => void) {
    this.connection.offReducer("import_knowledge_item_state", callback);
  }

  importKnowledgeLoreState(records: KnowledgeLoreState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeLoreState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_lore_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeLoreStateFlags);
  }

  onImportKnowledgeLoreState(callback: (ctx: ReducerEventContext, records: KnowledgeLoreState[]) => void) {
    this.connection.onReducer("import_knowledge_lore_state", callback);
  }

  removeOnImportKnowledgeLoreState(callback: (ctx: ReducerEventContext, records: KnowledgeLoreState[]) => void) {
    this.connection.offReducer("import_knowledge_lore_state", callback);
  }

  importKnowledgeNpcState(records: KnowledgeNpcState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeNpcState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_npc_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeNpcStateFlags);
  }

  onImportKnowledgeNpcState(callback: (ctx: ReducerEventContext, records: KnowledgeNpcState[]) => void) {
    this.connection.onReducer("import_knowledge_npc_state", callback);
  }

  removeOnImportKnowledgeNpcState(callback: (ctx: ReducerEventContext, records: KnowledgeNpcState[]) => void) {
    this.connection.offReducer("import_knowledge_npc_state", callback);
  }

  importKnowledgePavingState(records: KnowledgePavingState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgePavingState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_paving_state", __argsBuffer, this.setCallReducerFlags.importKnowledgePavingStateFlags);
  }

  onImportKnowledgePavingState(callback: (ctx: ReducerEventContext, records: KnowledgePavingState[]) => void) {
    this.connection.onReducer("import_knowledge_paving_state", callback);
  }

  removeOnImportKnowledgePavingState(callback: (ctx: ReducerEventContext, records: KnowledgePavingState[]) => void) {
    this.connection.offReducer("import_knowledge_paving_state", callback);
  }

  importKnowledgePillarShapingState(records: KnowledgePillarShapingState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgePillarShapingState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_pillar_shaping_state", __argsBuffer, this.setCallReducerFlags.importKnowledgePillarShapingStateFlags);
  }

  onImportKnowledgePillarShapingState(callback: (ctx: ReducerEventContext, records: KnowledgePillarShapingState[]) => void) {
    this.connection.onReducer("import_knowledge_pillar_shaping_state", callback);
  }

  removeOnImportKnowledgePillarShapingState(callback: (ctx: ReducerEventContext, records: KnowledgePillarShapingState[]) => void) {
    this.connection.offReducer("import_knowledge_pillar_shaping_state", callback);
  }

  importKnowledgeResourcePlacementState(records: KnowledgeResourcePlacementState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeResourcePlacementState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_resource_placement_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeResourcePlacementStateFlags);
  }

  onImportKnowledgeResourcePlacementState(callback: (ctx: ReducerEventContext, records: KnowledgeResourcePlacementState[]) => void) {
    this.connection.onReducer("import_knowledge_resource_placement_state", callback);
  }

  removeOnImportKnowledgeResourcePlacementState(callback: (ctx: ReducerEventContext, records: KnowledgeResourcePlacementState[]) => void) {
    this.connection.offReducer("import_knowledge_resource_placement_state", callback);
  }

  importKnowledgeResourceState(records: KnowledgeResourceState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeResourceState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_resource_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeResourceStateFlags);
  }

  onImportKnowledgeResourceState(callback: (ctx: ReducerEventContext, records: KnowledgeResourceState[]) => void) {
    this.connection.onReducer("import_knowledge_resource_state", callback);
  }

  removeOnImportKnowledgeResourceState(callback: (ctx: ReducerEventContext, records: KnowledgeResourceState[]) => void) {
    this.connection.offReducer("import_knowledge_resource_state", callback);
  }

  importKnowledgeRuinsState(records: KnowledgeRuinsState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeRuinsState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_ruins_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeRuinsStateFlags);
  }

  onImportKnowledgeRuinsState(callback: (ctx: ReducerEventContext, records: KnowledgeRuinsState[]) => void) {
    this.connection.onReducer("import_knowledge_ruins_state", callback);
  }

  removeOnImportKnowledgeRuinsState(callback: (ctx: ReducerEventContext, records: KnowledgeRuinsState[]) => void) {
    this.connection.offReducer("import_knowledge_ruins_state", callback);
  }

  importKnowledgeScrollDesc(records: KnowledgeScrollDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeScrollDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_scroll_desc", __argsBuffer, this.setCallReducerFlags.importKnowledgeScrollDescFlags);
  }

  onImportKnowledgeScrollDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollDesc[]) => void) {
    this.connection.onReducer("import_knowledge_scroll_desc", callback);
  }

  removeOnImportKnowledgeScrollDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollDesc[]) => void) {
    this.connection.offReducer("import_knowledge_scroll_desc", callback);
  }

  importKnowledgeScrollTypeDesc(records: KnowledgeScrollTypeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeScrollTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_scroll_type_desc", __argsBuffer, this.setCallReducerFlags.importKnowledgeScrollTypeDescFlags);
  }

  onImportKnowledgeScrollTypeDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollTypeDesc[]) => void) {
    this.connection.onReducer("import_knowledge_scroll_type_desc", callback);
  }

  removeOnImportKnowledgeScrollTypeDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollTypeDesc[]) => void) {
    this.connection.offReducer("import_knowledge_scroll_type_desc", callback);
  }

  importKnowledgeSecondaryState(records: KnowledgeSecondaryState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeSecondaryState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_secondary_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeSecondaryStateFlags);
  }

  onImportKnowledgeSecondaryState(callback: (ctx: ReducerEventContext, records: KnowledgeSecondaryState[]) => void) {
    this.connection.onReducer("import_knowledge_secondary_state", callback);
  }

  removeOnImportKnowledgeSecondaryState(callback: (ctx: ReducerEventContext, records: KnowledgeSecondaryState[]) => void) {
    this.connection.offReducer("import_knowledge_secondary_state", callback);
  }

  importKnowledgeStatModifierDesc(records: KnowledgeStatModifierDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeStatModifierDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_stat_modifier_desc", __argsBuffer, this.setCallReducerFlags.importKnowledgeStatModifierDescFlags);
  }

  onImportKnowledgeStatModifierDesc(callback: (ctx: ReducerEventContext, records: KnowledgeStatModifierDesc[]) => void) {
    this.connection.onReducer("import_knowledge_stat_modifier_desc", callback);
  }

  removeOnImportKnowledgeStatModifierDesc(callback: (ctx: ReducerEventContext, records: KnowledgeStatModifierDesc[]) => void) {
    this.connection.offReducer("import_knowledge_stat_modifier_desc", callback);
  }

  importKnowledgeVaultState(records: KnowledgeVaultState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportKnowledgeVaultState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_knowledge_vault_state", __argsBuffer, this.setCallReducerFlags.importKnowledgeVaultStateFlags);
  }

  onImportKnowledgeVaultState(callback: (ctx: ReducerEventContext, records: KnowledgeVaultState[]) => void) {
    this.connection.onReducer("import_knowledge_vault_state", callback);
  }

  removeOnImportKnowledgeVaultState(callback: (ctx: ReducerEventContext, records: KnowledgeVaultState[]) => void) {
    this.connection.offReducer("import_knowledge_vault_state", callback);
  }

  importLocationCache(records: LocationCache[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportLocationCache.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_location_cache", __argsBuffer, this.setCallReducerFlags.importLocationCacheFlags);
  }

  onImportLocationCache(callback: (ctx: ReducerEventContext, records: LocationCache[]) => void) {
    this.connection.onReducer("import_location_cache", callback);
  }

  removeOnImportLocationCache(callback: (ctx: ReducerEventContext, records: LocationCache[]) => void) {
    this.connection.offReducer("import_location_cache", callback);
  }

  importLocationState(records: LocationState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportLocationState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_location_state", __argsBuffer, this.setCallReducerFlags.importLocationStateFlags);
  }

  onImportLocationState(callback: (ctx: ReducerEventContext, records: LocationState[]) => void) {
    this.connection.onReducer("import_location_state", callback);
  }

  removeOnImportLocationState(callback: (ctx: ReducerEventContext, records: LocationState[]) => void) {
    this.connection.offReducer("import_location_state", callback);
  }

  importLootChestDesc(records: LootChestDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportLootChestDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_loot_chest_desc", __argsBuffer, this.setCallReducerFlags.importLootChestDescFlags);
  }

  onImportLootChestDesc(callback: (ctx: ReducerEventContext, records: LootChestDesc[]) => void) {
    this.connection.onReducer("import_loot_chest_desc", callback);
  }

  removeOnImportLootChestDesc(callback: (ctx: ReducerEventContext, records: LootChestDesc[]) => void) {
    this.connection.offReducer("import_loot_chest_desc", callback);
  }

  importLootChestState(records: LootChestState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportLootChestState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_loot_chest_state", __argsBuffer, this.setCallReducerFlags.importLootChestStateFlags);
  }

  onImportLootChestState(callback: (ctx: ReducerEventContext, records: LootChestState[]) => void) {
    this.connection.onReducer("import_loot_chest_state", callback);
  }

  removeOnImportLootChestState(callback: (ctx: ReducerEventContext, records: LootChestState[]) => void) {
    this.connection.offReducer("import_loot_chest_state", callback);
  }

  importLootRarityDesc(records: LootRarityDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportLootRarityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_loot_rarity_desc", __argsBuffer, this.setCallReducerFlags.importLootRarityDescFlags);
  }

  onImportLootRarityDesc(callback: (ctx: ReducerEventContext, records: LootRarityDesc[]) => void) {
    this.connection.onReducer("import_loot_rarity_desc", callback);
  }

  removeOnImportLootRarityDesc(callback: (ctx: ReducerEventContext, records: LootRarityDesc[]) => void) {
    this.connection.offReducer("import_loot_rarity_desc", callback);
  }

  importLootTableDesc(records: LootTableDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportLootTableDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_loot_table_desc", __argsBuffer, this.setCallReducerFlags.importLootTableDescFlags);
  }

  onImportLootTableDesc(callback: (ctx: ReducerEventContext, records: LootTableDesc[]) => void) {
    this.connection.onReducer("import_loot_table_desc", callback);
  }

  removeOnImportLootTableDesc(callback: (ctx: ReducerEventContext, records: LootTableDesc[]) => void) {
    this.connection.offReducer("import_loot_table_desc", callback);
  }

  importMobileEntityState(records: MobileEntityState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportMobileEntityState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_mobile_entity_state", __argsBuffer, this.setCallReducerFlags.importMobileEntityStateFlags);
  }

  onImportMobileEntityState(callback: (ctx: ReducerEventContext, records: MobileEntityState[]) => void) {
    this.connection.onReducer("import_mobile_entity_state", callback);
  }

  removeOnImportMobileEntityState(callback: (ctx: ReducerEventContext, records: MobileEntityState[]) => void) {
    this.connection.offReducer("import_mobile_entity_state", callback);
  }

  importMountingState(records: MountingState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportMountingState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_mounting_state", __argsBuffer, this.setCallReducerFlags.importMountingStateFlags);
  }

  onImportMountingState(callback: (ctx: ReducerEventContext, records: MountingState[]) => void) {
    this.connection.onReducer("import_mounting_state", callback);
  }

  removeOnImportMountingState(callback: (ctx: ReducerEventContext, records: MountingState[]) => void) {
    this.connection.offReducer("import_mounting_state", callback);
  }

  importNpcDesc(records: NpcDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportNpcDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_npc_desc", __argsBuffer, this.setCallReducerFlags.importNpcDescFlags);
  }

  onImportNpcDesc(callback: (ctx: ReducerEventContext, records: NpcDesc[]) => void) {
    this.connection.onReducer("import_npc_desc", callback);
  }

  removeOnImportNpcDesc(callback: (ctx: ReducerEventContext, records: NpcDesc[]) => void) {
    this.connection.offReducer("import_npc_desc", callback);
  }

  importNpcState(records: NpcState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportNpcState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_npc_state", __argsBuffer, this.setCallReducerFlags.importNpcStateFlags);
  }

  onImportNpcState(callback: (ctx: ReducerEventContext, records: NpcState[]) => void) {
    this.connection.onReducer("import_npc_state", callback);
  }

  removeOnImportNpcState(callback: (ctx: ReducerEventContext, records: NpcState[]) => void) {
    this.connection.offReducer("import_npc_state", callback);
  }

  importOnboardingRewardDesc(records: OnboardingRewardDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportOnboardingRewardDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_onboarding_reward_desc", __argsBuffer, this.setCallReducerFlags.importOnboardingRewardDescFlags);
  }

  onImportOnboardingRewardDesc(callback: (ctx: ReducerEventContext, records: OnboardingRewardDesc[]) => void) {
    this.connection.onReducer("import_onboarding_reward_desc", callback);
  }

  removeOnImportOnboardingRewardDesc(callback: (ctx: ReducerEventContext, records: OnboardingRewardDesc[]) => void) {
    this.connection.offReducer("import_onboarding_reward_desc", callback);
  }

  importOnboardingState(records: OnboardingState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportOnboardingState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_onboarding_state", __argsBuffer, this.setCallReducerFlags.importOnboardingStateFlags);
  }

  onImportOnboardingState(callback: (ctx: ReducerEventContext, records: OnboardingState[]) => void) {
    this.connection.onReducer("import_onboarding_state", callback);
  }

  removeOnImportOnboardingState(callback: (ctx: ReducerEventContext, records: OnboardingState[]) => void) {
    this.connection.offReducer("import_onboarding_state", callback);
  }

  importParametersDesc(records: ParametersDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportParametersDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_parameters_desc", __argsBuffer, this.setCallReducerFlags.importParametersDescFlags);
  }

  onImportParametersDesc(callback: (ctx: ReducerEventContext, records: ParametersDesc[]) => void) {
    this.connection.onReducer("import_parameters_desc", callback);
  }

  removeOnImportParametersDesc(callback: (ctx: ReducerEventContext, records: ParametersDesc[]) => void) {
    this.connection.offReducer("import_parameters_desc", callback);
  }

  importPathfindingDesc(records: PathfindingDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportPathfindingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_pathfinding_desc", __argsBuffer, this.setCallReducerFlags.importPathfindingDescFlags);
  }

  onImportPathfindingDesc(callback: (ctx: ReducerEventContext, records: PathfindingDesc[]) => void) {
    this.connection.onReducer("import_pathfinding_desc", callback);
  }

  removeOnImportPathfindingDesc(callback: (ctx: ReducerEventContext, records: PathfindingDesc[]) => void) {
    this.connection.offReducer("import_pathfinding_desc", callback);
  }

  importPavedTileState(records: PavedTileState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportPavedTileState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_paved_tile_state", __argsBuffer, this.setCallReducerFlags.importPavedTileStateFlags);
  }

  onImportPavedTileState(callback: (ctx: ReducerEventContext, records: PavedTileState[]) => void) {
    this.connection.onReducer("import_paved_tile_state", callback);
  }

  removeOnImportPavedTileState(callback: (ctx: ReducerEventContext, records: PavedTileState[]) => void) {
    this.connection.offReducer("import_paved_tile_state", callback);
  }

  importPavingTileDesc(records: PavingTileDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportPavingTileDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_paving_tile_desc", __argsBuffer, this.setCallReducerFlags.importPavingTileDescFlags);
  }

  onImportPavingTileDesc(callback: (ctx: ReducerEventContext, records: PavingTileDesc[]) => void) {
    this.connection.onReducer("import_paving_tile_desc", callback);
  }

  removeOnImportPavingTileDesc(callback: (ctx: ReducerEventContext, records: PavingTileDesc[]) => void) {
    this.connection.offReducer("import_paving_tile_desc", callback);
  }

  importPillarShapingDesc(records: PillarShapingDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportPillarShapingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_pillar_shaping_desc", __argsBuffer, this.setCallReducerFlags.importPillarShapingDescFlags);
  }

  onImportPillarShapingDesc(callback: (ctx: ReducerEventContext, records: PillarShapingDesc[]) => void) {
    this.connection.onReducer("import_pillar_shaping_desc", callback);
  }

  removeOnImportPillarShapingDesc(callback: (ctx: ReducerEventContext, records: PillarShapingDesc[]) => void) {
    this.connection.offReducer("import_pillar_shaping_desc", callback);
  }

  importPlayerActionDesc(records: PlayerActionDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportPlayerActionDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_player_action_desc", __argsBuffer, this.setCallReducerFlags.importPlayerActionDescFlags);
  }

  onImportPlayerActionDesc(callback: (ctx: ReducerEventContext, records: PlayerActionDesc[]) => void) {
    this.connection.onReducer("import_player_action_desc", callback);
  }

  removeOnImportPlayerActionDesc(callback: (ctx: ReducerEventContext, records: PlayerActionDesc[]) => void) {
    this.connection.offReducer("import_player_action_desc", callback);
  }

  importPlayerActionState(records: PlayerActionState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportPlayerActionState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_player_action_state", __argsBuffer, this.setCallReducerFlags.importPlayerActionStateFlags);
  }

  onImportPlayerActionState(callback: (ctx: ReducerEventContext, records: PlayerActionState[]) => void) {
    this.connection.onReducer("import_player_action_state", callback);
  }

  removeOnImportPlayerActionState(callback: (ctx: ReducerEventContext, records: PlayerActionState[]) => void) {
    this.connection.offReducer("import_player_action_state", callback);
  }

  importPlayerHousingDesc(records: PlayerHousingDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportPlayerHousingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_player_housing_desc", __argsBuffer, this.setCallReducerFlags.importPlayerHousingDescFlags);
  }

  onImportPlayerHousingDesc(callback: (ctx: ReducerEventContext, records: PlayerHousingDesc[]) => void) {
    this.connection.onReducer("import_player_housing_desc", callback);
  }

  removeOnImportPlayerHousingDesc(callback: (ctx: ReducerEventContext, records: PlayerHousingDesc[]) => void) {
    this.connection.offReducer("import_player_housing_desc", callback);
  }

  importPlayerPrefsState(records: PlayerPrefsState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportPlayerPrefsState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_player_prefs_state", __argsBuffer, this.setCallReducerFlags.importPlayerPrefsStateFlags);
  }

  onImportPlayerPrefsState(callback: (ctx: ReducerEventContext, records: PlayerPrefsState[]) => void) {
    this.connection.onReducer("import_player_prefs_state", callback);
  }

  removeOnImportPlayerPrefsState(callback: (ctx: ReducerEventContext, records: PlayerPrefsState[]) => void) {
    this.connection.offReducer("import_player_prefs_state", callback);
  }

  importPlayerState(records: PlayerState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportPlayerState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_player_state", __argsBuffer, this.setCallReducerFlags.importPlayerStateFlags);
  }

  onImportPlayerState(callback: (ctx: ReducerEventContext, records: PlayerState[]) => void) {
    this.connection.onReducer("import_player_state", callback);
  }

  removeOnImportPlayerState(callback: (ctx: ReducerEventContext, records: PlayerState[]) => void) {
    this.connection.offReducer("import_player_state", callback);
  }

  importPortalState(records: PortalState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportPortalState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_portal_state", __argsBuffer, this.setCallReducerFlags.importPortalStateFlags);
  }

  onImportPortalState(callback: (ctx: ReducerEventContext, records: PortalState[]) => void) {
    this.connection.onReducer("import_portal_state", callback);
  }

  removeOnImportPortalState(callback: (ctx: ReducerEventContext, records: PortalState[]) => void) {
    this.connection.offReducer("import_portal_state", callback);
  }

  importPrivateParametersDesc(records: PrivateParametersDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportPrivateParametersDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_private_parameters_desc", __argsBuffer, this.setCallReducerFlags.importPrivateParametersDescFlags);
  }

  onImportPrivateParametersDesc(callback: (ctx: ReducerEventContext, records: PrivateParametersDesc[]) => void) {
    this.connection.onReducer("import_private_parameters_desc", callback);
  }

  removeOnImportPrivateParametersDesc(callback: (ctx: ReducerEventContext, records: PrivateParametersDesc[]) => void) {
    this.connection.offReducer("import_private_parameters_desc", callback);
  }

  importProgressiveActionState(records: ProgressiveActionState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportProgressiveActionState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_progressive_action_state", __argsBuffer, this.setCallReducerFlags.importProgressiveActionStateFlags);
  }

  onImportProgressiveActionState(callback: (ctx: ReducerEventContext, records: ProgressiveActionState[]) => void) {
    this.connection.onReducer("import_progressive_action_state", callback);
  }

  removeOnImportProgressiveActionState(callback: (ctx: ReducerEventContext, records: ProgressiveActionState[]) => void) {
    this.connection.offReducer("import_progressive_action_state", callback);
  }

  importProjectSiteState(records: ProjectSiteState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportProjectSiteState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_project_site_state", __argsBuffer, this.setCallReducerFlags.importProjectSiteStateFlags);
  }

  onImportProjectSiteState(callback: (ctx: ReducerEventContext, records: ProjectSiteState[]) => void) {
    this.connection.onReducer("import_project_site_state", callback);
  }

  removeOnImportProjectSiteState(callback: (ctx: ReducerEventContext, records: ProjectSiteState[]) => void) {
    this.connection.offReducer("import_project_site_state", callback);
  }

  importRentState(records: RentState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportRentState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_rent_state", __argsBuffer, this.setCallReducerFlags.importRentStateFlags);
  }

  onImportRentState(callback: (ctx: ReducerEventContext, records: RentState[]) => void) {
    this.connection.onReducer("import_rent_state", callback);
  }

  removeOnImportRentState(callback: (ctx: ReducerEventContext, records: RentState[]) => void) {
    this.connection.offReducer("import_rent_state", callback);
  }

  importReservedNameDesc(records: ReservedNameDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportReservedNameDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_reserved_name_desc", __argsBuffer, this.setCallReducerFlags.importReservedNameDescFlags);
  }

  onImportReservedNameDesc(callback: (ctx: ReducerEventContext, records: ReservedNameDesc[]) => void) {
    this.connection.onReducer("import_reserved_name_desc", callback);
  }

  removeOnImportReservedNameDesc(callback: (ctx: ReducerEventContext, records: ReservedNameDesc[]) => void) {
    this.connection.offReducer("import_reserved_name_desc", callback);
  }

  importResourceClumpDesc(records: ResourceClumpDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportResourceClumpDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_resource_clump_desc", __argsBuffer, this.setCallReducerFlags.importResourceClumpDescFlags);
  }

  onImportResourceClumpDesc(callback: (ctx: ReducerEventContext, records: ResourceClumpDesc[]) => void) {
    this.connection.onReducer("import_resource_clump_desc", callback);
  }

  removeOnImportResourceClumpDesc(callback: (ctx: ReducerEventContext, records: ResourceClumpDesc[]) => void) {
    this.connection.offReducer("import_resource_clump_desc", callback);
  }

  importResourceCount(records: ResourceCount[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportResourceCount.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_resource_count", __argsBuffer, this.setCallReducerFlags.importResourceCountFlags);
  }

  onImportResourceCount(callback: (ctx: ReducerEventContext, records: ResourceCount[]) => void) {
    this.connection.onReducer("import_resource_count", callback);
  }

  removeOnImportResourceCount(callback: (ctx: ReducerEventContext, records: ResourceCount[]) => void) {
    this.connection.offReducer("import_resource_count", callback);
  }

  importResourceDesc(records: ResourceDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportResourceDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_resource_desc", __argsBuffer, this.setCallReducerFlags.importResourceDescFlags);
  }

  onImportResourceDesc(callback: (ctx: ReducerEventContext, records: ResourceDesc[]) => void) {
    this.connection.onReducer("import_resource_desc", callback);
  }

  removeOnImportResourceDesc(callback: (ctx: ReducerEventContext, records: ResourceDesc[]) => void) {
    this.connection.offReducer("import_resource_desc", callback);
  }

  importResourceGrowthRecipeDesc(records: ResourceGrowthRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportResourceGrowthRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_resource_growth_recipe_desc", __argsBuffer, this.setCallReducerFlags.importResourceGrowthRecipeDescFlags);
  }

  onImportResourceGrowthRecipeDesc(callback: (ctx: ReducerEventContext, records: ResourceGrowthRecipeDesc[]) => void) {
    this.connection.onReducer("import_resource_growth_recipe_desc", callback);
  }

  removeOnImportResourceGrowthRecipeDesc(callback: (ctx: ReducerEventContext, records: ResourceGrowthRecipeDesc[]) => void) {
    this.connection.offReducer("import_resource_growth_recipe_desc", callback);
  }

  importResourcePlacementRecipeDesc(records: ResourcePlacementRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportResourcePlacementRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_resource_placement_recipe_desc", __argsBuffer, this.setCallReducerFlags.importResourcePlacementRecipeDescFlags);
  }

  onImportResourcePlacementRecipeDesc(callback: (ctx: ReducerEventContext, records: ResourcePlacementRecipeDesc[]) => void) {
    this.connection.onReducer("import_resource_placement_recipe_desc", callback);
  }

  removeOnImportResourcePlacementRecipeDesc(callback: (ctx: ReducerEventContext, records: ResourcePlacementRecipeDesc[]) => void) {
    this.connection.offReducer("import_resource_placement_recipe_desc", callback);
  }

  importResourceState(records: ResourceState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportResourceState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_resource_state", __argsBuffer, this.setCallReducerFlags.importResourceStateFlags);
  }

  onImportResourceState(callback: (ctx: ReducerEventContext, records: ResourceState[]) => void) {
    this.connection.onReducer("import_resource_state", callback);
  }

  removeOnImportResourceState(callback: (ctx: ReducerEventContext, records: ResourceState[]) => void) {
    this.connection.offReducer("import_resource_state", callback);
  }

  importResourcesLog(records: ResourcesLog[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportResourcesLog.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_resources_log", __argsBuffer, this.setCallReducerFlags.importResourcesLogFlags);
  }

  onImportResourcesLog(callback: (ctx: ReducerEventContext, records: ResourcesLog[]) => void) {
    this.connection.onReducer("import_resources_log", callback);
  }

  removeOnImportResourcesLog(callback: (ctx: ReducerEventContext, records: ResourcesLog[]) => void) {
    this.connection.offReducer("import_resources_log", callback);
  }

  importSatiationState(records: SatiationState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportSatiationState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_satiation_state", __argsBuffer, this.setCallReducerFlags.importSatiationStateFlags);
  }

  onImportSatiationState(callback: (ctx: ReducerEventContext, records: SatiationState[]) => void) {
    this.connection.onReducer("import_satiation_state", callback);
  }

  removeOnImportSatiationState(callback: (ctx: ReducerEventContext, records: SatiationState[]) => void) {
    this.connection.offReducer("import_satiation_state", callback);
  }

  importSecondaryKnowledgeDesc(records: SecondaryKnowledgeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportSecondaryKnowledgeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_secondary_knowledge_desc", __argsBuffer, this.setCallReducerFlags.importSecondaryKnowledgeDescFlags);
  }

  onImportSecondaryKnowledgeDesc(callback: (ctx: ReducerEventContext, records: SecondaryKnowledgeDesc[]) => void) {
    this.connection.onReducer("import_secondary_knowledge_desc", callback);
  }

  removeOnImportSecondaryKnowledgeDesc(callback: (ctx: ReducerEventContext, records: SecondaryKnowledgeDesc[]) => void) {
    this.connection.offReducer("import_secondary_knowledge_desc", callback);
  }

  importServerIdentity(records: ServerIdentity[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportServerIdentity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_server_identity", __argsBuffer, this.setCallReducerFlags.importServerIdentityFlags);
  }

  onImportServerIdentity(callback: (ctx: ReducerEventContext, records: ServerIdentity[]) => void) {
    this.connection.onReducer("import_server_identity", callback);
  }

  removeOnImportServerIdentity(callback: (ctx: ReducerEventContext, records: ServerIdentity[]) => void) {
    this.connection.offReducer("import_server_identity", callback);
  }

  importSignedInPlayerState(records: SignedInPlayerState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportSignedInPlayerState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_signed_in_player_state", __argsBuffer, this.setCallReducerFlags.importSignedInPlayerStateFlags);
  }

  onImportSignedInPlayerState(callback: (ctx: ReducerEventContext, records: SignedInPlayerState[]) => void) {
    this.connection.onReducer("import_signed_in_player_state", callback);
  }

  removeOnImportSignedInPlayerState(callback: (ctx: ReducerEventContext, records: SignedInPlayerState[]) => void) {
    this.connection.offReducer("import_signed_in_player_state", callback);
  }

  importSkillDesc(records: SkillDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportSkillDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_skill_desc", __argsBuffer, this.setCallReducerFlags.importSkillDescFlags);
  }

  onImportSkillDesc(callback: (ctx: ReducerEventContext, records: SkillDesc[]) => void) {
    this.connection.onReducer("import_skill_desc", callback);
  }

  removeOnImportSkillDesc(callback: (ctx: ReducerEventContext, records: SkillDesc[]) => void) {
    this.connection.offReducer("import_skill_desc", callback);
  }

  importStaminaState(records: StaminaState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportStaminaState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_stamina_state", __argsBuffer, this.setCallReducerFlags.importStaminaStateFlags);
  }

  onImportStaminaState(callback: (ctx: ReducerEventContext, records: StaminaState[]) => void) {
    this.connection.onReducer("import_stamina_state", callback);
  }

  removeOnImportStaminaState(callback: (ctx: ReducerEventContext, records: StaminaState[]) => void) {
    this.connection.offReducer("import_stamina_state", callback);
  }

  importTargetState(records: TargetState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportTargetState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_target_state", __argsBuffer, this.setCallReducerFlags.importTargetStateFlags);
  }

  onImportTargetState(callback: (ctx: ReducerEventContext, records: TargetState[]) => void) {
    this.connection.onReducer("import_target_state", callback);
  }

  removeOnImportTargetState(callback: (ctx: ReducerEventContext, records: TargetState[]) => void) {
    this.connection.offReducer("import_target_state", callback);
  }

  importTargetableState(records: TargetableState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportTargetableState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_targetable_state", __argsBuffer, this.setCallReducerFlags.importTargetableStateFlags);
  }

  onImportTargetableState(callback: (ctx: ReducerEventContext, records: TargetableState[]) => void) {
    this.connection.onReducer("import_targetable_state", callback);
  }

  removeOnImportTargetableState(callback: (ctx: ReducerEventContext, records: TargetableState[]) => void) {
    this.connection.offReducer("import_targetable_state", callback);
  }

  importTargetingMatrixDesc(records: TargetingMatrixDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportTargetingMatrixDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_targeting_matrix_desc", __argsBuffer, this.setCallReducerFlags.importTargetingMatrixDescFlags);
  }

  onImportTargetingMatrixDesc(callback: (ctx: ReducerEventContext, records: TargetingMatrixDesc[]) => void) {
    this.connection.onReducer("import_targeting_matrix_desc", callback);
  }

  removeOnImportTargetingMatrixDesc(callback: (ctx: ReducerEventContext, records: TargetingMatrixDesc[]) => void) {
    this.connection.offReducer("import_targeting_matrix_desc", callback);
  }

  importTeleportItemDesc(records: TeleportItemDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportTeleportItemDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_teleport_item_desc", __argsBuffer, this.setCallReducerFlags.importTeleportItemDescFlags);
  }

  onImportTeleportItemDesc(callback: (ctx: ReducerEventContext, records: TeleportItemDesc[]) => void) {
    this.connection.onReducer("import_teleport_item_desc", callback);
  }

  removeOnImportTeleportItemDesc(callback: (ctx: ReducerEventContext, records: TeleportItemDesc[]) => void) {
    this.connection.offReducer("import_teleport_item_desc", callback);
  }

  importTerraformRecipeDesc(records: TerraformRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportTerraformRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_terraform_recipe_desc", __argsBuffer, this.setCallReducerFlags.importTerraformRecipeDescFlags);
  }

  onImportTerraformRecipeDesc(callback: (ctx: ReducerEventContext, records: TerraformRecipeDesc[]) => void) {
    this.connection.onReducer("import_terraform_recipe_desc", callback);
  }

  removeOnImportTerraformRecipeDesc(callback: (ctx: ReducerEventContext, records: TerraformRecipeDesc[]) => void) {
    this.connection.offReducer("import_terraform_recipe_desc", callback);
  }

  importTerrainChunkState(records: TerrainChunkState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportTerrainChunkState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_terrain_chunk_state", __argsBuffer, this.setCallReducerFlags.importTerrainChunkStateFlags);
  }

  onImportTerrainChunkState(callback: (ctx: ReducerEventContext, records: TerrainChunkState[]) => void) {
    this.connection.onReducer("import_terrain_chunk_state", callback);
  }

  removeOnImportTerrainChunkState(callback: (ctx: ReducerEventContext, records: TerrainChunkState[]) => void) {
    this.connection.offReducer("import_terrain_chunk_state", callback);
  }

  importToolDesc(records: ToolDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportToolDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_tool_desc", __argsBuffer, this.setCallReducerFlags.importToolDescFlags);
  }

  onImportToolDesc(callback: (ctx: ReducerEventContext, records: ToolDesc[]) => void) {
    this.connection.onReducer("import_tool_desc", callback);
  }

  removeOnImportToolDesc(callback: (ctx: ReducerEventContext, records: ToolDesc[]) => void) {
    this.connection.offReducer("import_tool_desc", callback);
  }

  importToolTypeDesc(records: ToolTypeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportToolTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_tool_type_desc", __argsBuffer, this.setCallReducerFlags.importToolTypeDescFlags);
  }

  onImportToolTypeDesc(callback: (ctx: ReducerEventContext, records: ToolTypeDesc[]) => void) {
    this.connection.onReducer("import_tool_type_desc", callback);
  }

  removeOnImportToolTypeDesc(callback: (ctx: ReducerEventContext, records: ToolTypeDesc[]) => void) {
    this.connection.offReducer("import_tool_type_desc", callback);
  }

  importTradeOrderState(records: TradeOrderState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportTradeOrderState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_trade_order_state", __argsBuffer, this.setCallReducerFlags.importTradeOrderStateFlags);
  }

  onImportTradeOrderState(callback: (ctx: ReducerEventContext, records: TradeOrderState[]) => void) {
    this.connection.onReducer("import_trade_order_state", callback);
  }

  removeOnImportTradeOrderState(callback: (ctx: ReducerEventContext, records: TradeOrderState[]) => void) {
    this.connection.offReducer("import_trade_order_state", callback);
  }

  importTradeSessionState(records: TradeSessionState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportTradeSessionState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_trade_session_state", __argsBuffer, this.setCallReducerFlags.importTradeSessionStateFlags);
  }

  onImportTradeSessionState(callback: (ctx: ReducerEventContext, records: TradeSessionState[]) => void) {
    this.connection.onReducer("import_trade_session_state", callback);
  }

  removeOnImportTradeSessionState(callback: (ctx: ReducerEventContext, records: TradeSessionState[]) => void) {
    this.connection.offReducer("import_trade_session_state", callback);
  }

  importTravelerTaskDesc(records: TravelerTaskDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportTravelerTaskDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_traveler_task_desc", __argsBuffer, this.setCallReducerFlags.importTravelerTaskDescFlags);
  }

  onImportTravelerTaskDesc(callback: (ctx: ReducerEventContext, records: TravelerTaskDesc[]) => void) {
    this.connection.onReducer("import_traveler_task_desc", callback);
  }

  removeOnImportTravelerTaskDesc(callback: (ctx: ReducerEventContext, records: TravelerTaskDesc[]) => void) {
    this.connection.offReducer("import_traveler_task_desc", callback);
  }

  importTravelerTradeOrderDesc(records: TravelerTradeOrderDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportTravelerTradeOrderDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_traveler_trade_order_desc", __argsBuffer, this.setCallReducerFlags.importTravelerTradeOrderDescFlags);
  }

  onImportTravelerTradeOrderDesc(callback: (ctx: ReducerEventContext, records: TravelerTradeOrderDesc[]) => void) {
    this.connection.onReducer("import_traveler_trade_order_desc", callback);
  }

  removeOnImportTravelerTradeOrderDesc(callback: (ctx: ReducerEventContext, records: TravelerTradeOrderDesc[]) => void) {
    this.connection.offReducer("import_traveler_trade_order_desc", callback);
  }

  importUserModerationState(records: UserModerationState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportUserModerationState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_user_moderation_state", __argsBuffer, this.setCallReducerFlags.importUserModerationStateFlags);
  }

  onImportUserModerationState(callback: (ctx: ReducerEventContext, records: UserModerationState[]) => void) {
    this.connection.onReducer("import_user_moderation_state", callback);
  }

  removeOnImportUserModerationState(callback: (ctx: ReducerEventContext, records: UserModerationState[]) => void) {
    this.connection.offReducer("import_user_moderation_state", callback);
  }

  importUserState(records: UserState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportUserState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_user_state", __argsBuffer, this.setCallReducerFlags.importUserStateFlags);
  }

  onImportUserState(callback: (ctx: ReducerEventContext, records: UserState[]) => void) {
    this.connection.onReducer("import_user_state", callback);
  }

  removeOnImportUserState(callback: (ctx: ReducerEventContext, records: UserState[]) => void) {
    this.connection.offReducer("import_user_state", callback);
  }

  importVaultState(records: VaultState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportVaultState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_vault_state", __argsBuffer, this.setCallReducerFlags.importVaultStateFlags);
  }

  onImportVaultState(callback: (ctx: ReducerEventContext, records: VaultState[]) => void) {
    this.connection.onReducer("import_vault_state", callback);
  }

  removeOnImportVaultState(callback: (ctx: ReducerEventContext, records: VaultState[]) => void) {
    this.connection.offReducer("import_vault_state", callback);
  }

  importWallDesc(records: WallDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportWallDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_wall_desc", __argsBuffer, this.setCallReducerFlags.importWallDescFlags);
  }

  onImportWallDesc(callback: (ctx: ReducerEventContext, records: WallDesc[]) => void) {
    this.connection.onReducer("import_wall_desc", callback);
  }

  removeOnImportWallDesc(callback: (ctx: ReducerEventContext, records: WallDesc[]) => void) {
    this.connection.offReducer("import_wall_desc", callback);
  }

  importWeaponDesc(records: WeaponDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportWeaponDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_weapon_desc", __argsBuffer, this.setCallReducerFlags.importWeaponDescFlags);
  }

  onImportWeaponDesc(callback: (ctx: ReducerEventContext, records: WeaponDesc[]) => void) {
    this.connection.onReducer("import_weapon_desc", callback);
  }

  removeOnImportWeaponDesc(callback: (ctx: ReducerEventContext, records: WeaponDesc[]) => void) {
    this.connection.offReducer("import_weapon_desc", callback);
  }

  importWeaponTypeDesc(records: WeaponTypeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportWeaponTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_weapon_type_desc", __argsBuffer, this.setCallReducerFlags.importWeaponTypeDescFlags);
  }

  onImportWeaponTypeDesc(callback: (ctx: ReducerEventContext, records: WeaponTypeDesc[]) => void) {
    this.connection.onReducer("import_weapon_type_desc", callback);
  }

  removeOnImportWeaponTypeDesc(callback: (ctx: ReducerEventContext, records: WeaponTypeDesc[]) => void) {
    this.connection.offReducer("import_weapon_type_desc", callback);
  }

  importWorldRegionNameState(records: WorldRegionNameState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportWorldRegionNameState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_world_region_name_state", __argsBuffer, this.setCallReducerFlags.importWorldRegionNameStateFlags);
  }

  onImportWorldRegionNameState(callback: (ctx: ReducerEventContext, records: WorldRegionNameState[]) => void) {
    this.connection.onReducer("import_world_region_name_state", callback);
  }

  removeOnImportWorldRegionNameState(callback: (ctx: ReducerEventContext, records: WorldRegionNameState[]) => void) {
    this.connection.offReducer("import_world_region_name_state", callback);
  }

  importWorldRegionState(records: WorldRegionState[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    ImportWorldRegionState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("import_world_region_state", __argsBuffer, this.setCallReducerFlags.importWorldRegionStateFlags);
  }

  onImportWorldRegionState(callback: (ctx: ReducerEventContext, records: WorldRegionState[]) => void) {
    this.connection.onReducer("import_world_region_state", callback);
  }

  removeOnImportWorldRegionState(callback: (ctx: ReducerEventContext, records: WorldRegionState[]) => void) {
    this.connection.offReducer("import_world_region_state", callback);
  }

  insertDeveloperIdentity(identity: string, developerName: string, serviceName: string, email: string, isExternal: boolean) {
    const __args = { identity, developerName, serviceName, email, isExternal };
    let __writer = new BinaryWriter(1024);
    InsertDeveloperIdentity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("insert_developer_identity", __argsBuffer, this.setCallReducerFlags.insertDeveloperIdentityFlags);
  }

  onInsertDeveloperIdentity(callback: (ctx: ReducerEventContext, identity: string, developerName: string, serviceName: string, email: string, isExternal: boolean) => void) {
    this.connection.onReducer("insert_developer_identity", callback);
  }

  removeOnInsertDeveloperIdentity(callback: (ctx: ReducerEventContext, identity: string, developerName: string, serviceName: string, email: string, isExternal: boolean) => void) {
    this.connection.offReducer("insert_developer_identity", callback);
  }

  insertResourcesLog(resourcesLog: ResourcesLog) {
    const __args = { resourcesLog };
    let __writer = new BinaryWriter(1024);
    InsertResourcesLog.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("insert_resources_log", __argsBuffer, this.setCallReducerFlags.insertResourcesLogFlags);
  }

  onInsertResourcesLog(callback: (ctx: ReducerEventContext, resourcesLog: ResourcesLog) => void) {
    this.connection.onReducer("insert_resources_log", callback);
  }

  removeOnInsertResourcesLog(callback: (ctx: ReducerEventContext, resourcesLog: ResourcesLog) => void) {
    this.connection.offReducer("insert_resources_log", callback);
  }

  insertTerrainChunk(terrainChunk: TerrainChunkState, buildings: WorldGenGeneratedBuilding[], resources: WorldGenGeneratedResourceDeposit[]) {
    const __args = { terrainChunk, buildings, resources };
    let __writer = new BinaryWriter(1024);
    InsertTerrainChunk.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("insert_terrain_chunk", __argsBuffer, this.setCallReducerFlags.insertTerrainChunkFlags);
  }

  onInsertTerrainChunk(callback: (ctx: ReducerEventContext, terrainChunk: TerrainChunkState, buildings: WorldGenGeneratedBuilding[], resources: WorldGenGeneratedResourceDeposit[]) => void) {
    this.connection.onReducer("insert_terrain_chunk", callback);
  }

  removeOnInsertTerrainChunk(callback: (ctx: ReducerEventContext, terrainChunk: TerrainChunkState, buildings: WorldGenGeneratedBuilding[], resources: WorldGenGeneratedResourceDeposit[]) => void) {
    this.connection.offReducer("insert_terrain_chunk", callback);
  }

  interiorSetCollapsed(dimensionNetworkEntityId: bigint, isCollapsed: boolean) {
    const __args = { dimensionNetworkEntityId, isCollapsed };
    let __writer = new BinaryWriter(1024);
    InteriorSetCollapsed.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interior_set_collapsed", __argsBuffer, this.setCallReducerFlags.interiorSetCollapsedFlags);
  }

  onInteriorSetCollapsed(callback: (ctx: ReducerEventContext, dimensionNetworkEntityId: bigint, isCollapsed: boolean) => void) {
    this.connection.onReducer("interior_set_collapsed", callback);
  }

  removeOnInteriorSetCollapsed(callback: (ctx: ReducerEventContext, dimensionNetworkEntityId: bigint, isCollapsed: boolean) => void) {
    this.connection.offReducer("interior_set_collapsed", callback);
  }

  interiorSetCollapsedScheduled(timer: InteriorSetCollapsedTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    InteriorSetCollapsedScheduled.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interior_set_collapsed_scheduled", __argsBuffer, this.setCallReducerFlags.interiorSetCollapsedScheduledFlags);
  }

  onInteriorSetCollapsedScheduled(callback: (ctx: ReducerEventContext, timer: InteriorSetCollapsedTimer) => void) {
    this.connection.onReducer("interior_set_collapsed_scheduled", callback);
  }

  removeOnInteriorSetCollapsedScheduled(callback: (ctx: ReducerEventContext, timer: InteriorSetCollapsedTimer) => void) {
    this.connection.offReducer("interior_set_collapsed_scheduled", callback);
  }

  inventoryCreatePersonal(buildingEntityId: bigint) {
    const __args = { buildingEntityId };
    let __writer = new BinaryWriter(1024);
    InventoryCreatePersonal.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("inventory_create_personal", __argsBuffer, this.setCallReducerFlags.inventoryCreatePersonalFlags);
  }

  onInventoryCreatePersonal(callback: (ctx: ReducerEventContext, buildingEntityId: bigint) => void) {
    this.connection.onReducer("inventory_create_personal", callback);
  }

  removeOnInventoryCreatePersonal(callback: (ctx: ReducerEventContext, buildingEntityId: bigint) => void) {
    this.connection.offReducer("inventory_create_personal", callback);
  }

  inventorySort(targetEntityId: bigint) {
    const __args = { targetEntityId };
    let __writer = new BinaryWriter(1024);
    InventorySort.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("inventory_sort", __argsBuffer, this.setCallReducerFlags.inventorySortFlags);
  }

  onInventorySort(callback: (ctx: ReducerEventContext, targetEntityId: bigint) => void) {
    this.connection.onReducer("inventory_sort", callback);
  }

  removeOnInventorySort(callback: (ctx: ReducerEventContext, targetEntityId: bigint) => void) {
    this.connection.offReducer("inventory_sort", callback);
  }

  itemConvert(request: PlayerItemConvertRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ItemConvert.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("item_convert", __argsBuffer, this.setCallReducerFlags.itemConvertFlags);
  }

  onItemConvert(callback: (ctx: ReducerEventContext, request: PlayerItemConvertRequest) => void) {
    this.connection.onReducer("item_convert", callback);
  }

  removeOnItemConvert(callback: (ctx: ReducerEventContext, request: PlayerItemConvertRequest) => void) {
    this.connection.offReducer("item_convert", callback);
  }

  itemConvertStart(request: PlayerItemConvertRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ItemConvertStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("item_convert_start", __argsBuffer, this.setCallReducerFlags.itemConvertStartFlags);
  }

  onItemConvertStart(callback: (ctx: ReducerEventContext, request: PlayerItemConvertRequest) => void) {
    this.connection.onReducer("item_convert_start", callback);
  }

  removeOnItemConvertStart(callback: (ctx: ReducerEventContext, request: PlayerItemConvertRequest) => void) {
    this.connection.offReducer("item_convert_start", callback);
  }

  itemDrop(request: PlayerItemDropRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ItemDrop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("item_drop", __argsBuffer, this.setCallReducerFlags.itemDropFlags);
  }

  onItemDrop(callback: (ctx: ReducerEventContext, request: PlayerItemDropRequest) => void) {
    this.connection.onReducer("item_drop", callback);
  }

  removeOnItemDrop(callback: (ctx: ReducerEventContext, request: PlayerItemDropRequest) => void) {
    this.connection.offReducer("item_drop", callback);
  }

  itemPickUp(request: PlayerDroppedInventoryPickUpRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ItemPickUp.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("item_pick_up", __argsBuffer, this.setCallReducerFlags.itemPickUpFlags);
  }

  onItemPickUp(callback: (ctx: ReducerEventContext, request: PlayerDroppedInventoryPickUpRequest) => void) {
    this.connection.onReducer("item_pick_up", callback);
  }

  removeOnItemPickUp(callback: (ctx: ReducerEventContext, request: PlayerDroppedInventoryPickUpRequest) => void) {
    this.connection.offReducer("item_pick_up", callback);
  }

  itemStackMove(request: PlayerItemStackMoveRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ItemStackMove.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("item_stack_move", __argsBuffer, this.setCallReducerFlags.itemStackMoveFlags);
  }

  onItemStackMove(callback: (ctx: ReducerEventContext, request: PlayerItemStackMoveRequest) => void) {
    this.connection.onReducer("item_stack_move", callback);
  }

  removeOnItemStackMove(callback: (ctx: ReducerEventContext, request: PlayerItemStackMoveRequest) => void) {
    this.connection.offReducer("item_stack_move", callback);
  }

  itemStackMoveAll(request: PlayerItemStackMoveAllRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ItemStackMoveAll.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("item_stack_move_all", __argsBuffer, this.setCallReducerFlags.itemStackMoveAllFlags);
  }

  onItemStackMoveAll(callback: (ctx: ReducerEventContext, request: PlayerItemStackMoveAllRequest) => void) {
    this.connection.onReducer("item_stack_move_all", callback);
  }

  removeOnItemStackMoveAll(callback: (ctx: ReducerEventContext, request: PlayerItemStackMoveAllRequest) => void) {
    this.connection.offReducer("item_stack_move_all", callback);
  }

  itemStackSplit(request: PlayerItemStackSplitRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ItemStackSplit.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("item_stack_split", __argsBuffer, this.setCallReducerFlags.itemStackSplitFlags);
  }

  onItemStackSplit(callback: (ctx: ReducerEventContext, request: PlayerItemStackSplitRequest) => void) {
    this.connection.onReducer("item_stack_split", callback);
  }

  removeOnItemStackSplit(callback: (ctx: ReducerEventContext, request: PlayerItemStackSplitRequest) => void) {
    this.connection.offReducer("item_stack_split", callback);
  }

  itemUse(request: PlayerItemUseRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ItemUse.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("item_use", __argsBuffer, this.setCallReducerFlags.itemUseFlags);
  }

  onItemUse(callback: (ctx: ReducerEventContext, request: PlayerItemUseRequest) => void) {
    this.connection.onReducer("item_use", callback);
  }

  removeOnItemUse(callback: (ctx: ReducerEventContext, request: PlayerItemUseRequest) => void) {
    this.connection.offReducer("item_use", callback);
  }

  itemUseStart(request: PlayerItemUseRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ItemUseStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("item_use_start", __argsBuffer, this.setCallReducerFlags.itemUseStartFlags);
  }

  onItemUseStart(callback: (ctx: ReducerEventContext, request: PlayerItemUseRequest) => void) {
    this.connection.onReducer("item_use_start", callback);
  }

  removeOnItemUseStart(callback: (ctx: ReducerEventContext, request: PlayerItemUseRequest) => void) {
    this.connection.offReducer("item_use_start", callback);
  }

  loadConfig(environmentNames: string[], contents: string[]) {
    const __args = { environmentNames, contents };
    let __writer = new BinaryWriter(1024);
    LoadConfig.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("load_config", __argsBuffer, this.setCallReducerFlags.loadConfigFlags);
  }

  onLoadConfig(callback: (ctx: ReducerEventContext, environmentNames: string[], contents: string[]) => void) {
    this.connection.onReducer("load_config", callback);
  }

  removeOnLoadConfig(callback: (ctx: ReducerEventContext, environmentNames: string[], contents: string[]) => void) {
    this.connection.offReducer("load_config", callback);
  }

  logClaimMemberLeaderboard() {
    this.connection.callReducer("log_claim_member_leaderboard", new Uint8Array(0), this.setCallReducerFlags.logClaimMemberLeaderboardFlags);
  }

  onLogClaimMemberLeaderboard(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("log_claim_member_leaderboard", callback);
  }

  removeOnLogClaimMemberLeaderboard(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("log_claim_member_leaderboard", callback);
  }

  logClaimTierLeaderboard() {
    this.connection.callReducer("log_claim_tier_leaderboard", new Uint8Array(0), this.setCallReducerFlags.logClaimTierLeaderboardFlags);
  }

  onLogClaimTierLeaderboard(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("log_claim_tier_leaderboard", callback);
  }

  removeOnLogClaimTierLeaderboard(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("log_claim_tier_leaderboard", callback);
  }

  lootChestDespawn(timer: LootChestDespawnTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    LootChestDespawn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("loot_chest_despawn", __argsBuffer, this.setCallReducerFlags.lootChestDespawnFlags);
  }

  onLootChestDespawn(callback: (ctx: ReducerEventContext, timer: LootChestDespawnTimer) => void) {
    this.connection.onReducer("loot_chest_despawn", callback);
  }

  removeOnLootChestDespawn(callback: (ctx: ReducerEventContext, timer: LootChestDespawnTimer) => void) {
    this.connection.offReducer("loot_chest_despawn", callback);
  }

  lootChestSpawn(timer: LootChestSpawnTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    LootChestSpawn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("loot_chest_spawn", __argsBuffer, this.setCallReducerFlags.lootChestSpawnFlags);
  }

  onLootChestSpawn(callback: (ctx: ReducerEventContext, timer: LootChestSpawnTimer) => void) {
    this.connection.onReducer("loot_chest_spawn", callback);
  }

  removeOnLootChestSpawn(callback: (ctx: ReducerEventContext, timer: LootChestSpawnTimer) => void) {
    this.connection.offReducer("loot_chest_spawn", callback);
  }

  npcAiAgentLoop(timer: NpcAiLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    NpcAiAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("npc_ai_agent_loop", __argsBuffer, this.setCallReducerFlags.npcAiAgentLoopFlags);
  }

  onNpcAiAgentLoop(callback: (ctx: ReducerEventContext, timer: NpcAiLoopTimer) => void) {
    this.connection.onReducer("npc_ai_agent_loop", callback);
  }

  removeOnNpcAiAgentLoop(callback: (ctx: ReducerEventContext, timer: NpcAiLoopTimer) => void) {
    this.connection.offReducer("npc_ai_agent_loop", callback);
  }

  onDurabilityZero(timer: OnDurabilityZeroTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    OnDurabilityZero.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("on_durability_zero", __argsBuffer, this.setCallReducerFlags.onDurabilityZeroFlags);
  }

  onOnDurabilityZero(callback: (ctx: ReducerEventContext, timer: OnDurabilityZeroTimer) => void) {
    this.connection.onReducer("on_durability_zero", callback);
  }

  removeOnOnDurabilityZero(callback: (ctx: ReducerEventContext, timer: OnDurabilityZeroTimer) => void) {
    this.connection.offReducer("on_durability_zero", callback);
  }

  onInterModuleMessageProcessed(id: bigint, error: string | undefined) {
    const __args = { id, error };
    let __writer = new BinaryWriter(1024);
    OnInterModuleMessageProcessed.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("on_inter_module_message_processed", __argsBuffer, this.setCallReducerFlags.onInterModuleMessageProcessedFlags);
  }

  onOnInterModuleMessageProcessed(callback: (ctx: ReducerEventContext, id: bigint, error: string | undefined) => void) {
    this.connection.onReducer("on_inter_module_message_processed", callback);
  }

  removeOnOnInterModuleMessageProcessed(callback: (ctx: ReducerEventContext, id: bigint, error: string | undefined) => void) {
    this.connection.offReducer("on_inter_module_message_processed", callback);
  }

  orderCancel(request: PlayerOrderCancelRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    OrderCancel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("order_cancel", __argsBuffer, this.setCallReducerFlags.orderCancelFlags);
  }

  onOrderCancel(callback: (ctx: ReducerEventContext, request: PlayerOrderCancelRequest) => void) {
    this.connection.onReducer("order_cancel", callback);
  }

  removeOnOrderCancel(callback: (ctx: ReducerEventContext, request: PlayerOrderCancelRequest) => void) {
    this.connection.offReducer("order_cancel", callback);
  }

  orderCollect(request: PlayerOrderCollectRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    OrderCollect.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("order_collect", __argsBuffer, this.setCallReducerFlags.orderCollectFlags);
  }

  onOrderCollect(callback: (ctx: ReducerEventContext, request: PlayerOrderCollectRequest) => void) {
    this.connection.onReducer("order_collect", callback);
  }

  removeOnOrderCollect(callback: (ctx: ReducerEventContext, request: PlayerOrderCollectRequest) => void) {
    this.connection.offReducer("order_collect", callback);
  }

  orderEditBuyOrder(request: PlayerEditOrderRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    OrderEditBuyOrder.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("order_edit_buy_order", __argsBuffer, this.setCallReducerFlags.orderEditBuyOrderFlags);
  }

  onOrderEditBuyOrder(callback: (ctx: ReducerEventContext, request: PlayerEditOrderRequest) => void) {
    this.connection.onReducer("order_edit_buy_order", callback);
  }

  removeOnOrderEditBuyOrder(callback: (ctx: ReducerEventContext, request: PlayerEditOrderRequest) => void) {
    this.connection.offReducer("order_edit_buy_order", callback);
  }

  orderEditSellOrder(request: PlayerEditOrderRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    OrderEditSellOrder.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("order_edit_sell_order", __argsBuffer, this.setCallReducerFlags.orderEditSellOrderFlags);
  }

  onOrderEditSellOrder(callback: (ctx: ReducerEventContext, request: PlayerEditOrderRequest) => void) {
    this.connection.onReducer("order_edit_sell_order", callback);
  }

  removeOnOrderEditSellOrder(callback: (ctx: ReducerEventContext, request: PlayerEditOrderRequest) => void) {
    this.connection.offReducer("order_edit_sell_order", callback);
  }

  orderPostBuyOrder(request: PlayerPostOrderRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    OrderPostBuyOrder.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("order_post_buy_order", __argsBuffer, this.setCallReducerFlags.orderPostBuyOrderFlags);
  }

  onOrderPostBuyOrder(callback: (ctx: ReducerEventContext, request: PlayerPostOrderRequest) => void) {
    this.connection.onReducer("order_post_buy_order", callback);
  }

  removeOnOrderPostBuyOrder(callback: (ctx: ReducerEventContext, request: PlayerPostOrderRequest) => void) {
    this.connection.offReducer("order_post_buy_order", callback);
  }

  orderPostSellOrder(request: PlayerPostOrderRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    OrderPostSellOrder.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("order_post_sell_order", __argsBuffer, this.setCallReducerFlags.orderPostSellOrderFlags);
  }

  onOrderPostSellOrder(callback: (ctx: ReducerEventContext, request: PlayerPostOrderRequest) => void) {
    this.connection.onReducer("order_post_sell_order", callback);
  }

  removeOnOrderPostSellOrder(callback: (ctx: ReducerEventContext, request: PlayerPostOrderRequest) => void) {
    this.connection.offReducer("order_post_sell_order", callback);
  }

  passiveCraftCancel(passiveCraftEntityId: bigint) {
    const __args = { passiveCraftEntityId };
    let __writer = new BinaryWriter(1024);
    PassiveCraftCancel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("passive_craft_cancel", __argsBuffer, this.setCallReducerFlags.passiveCraftCancelFlags);
  }

  onPassiveCraftCancel(callback: (ctx: ReducerEventContext, passiveCraftEntityId: bigint) => void) {
    this.connection.onReducer("passive_craft_cancel", callback);
  }

  removeOnPassiveCraftCancel(callback: (ctx: ReducerEventContext, passiveCraftEntityId: bigint) => void) {
    this.connection.offReducer("passive_craft_cancel", callback);
  }

  passiveCraftCollect(passiveCraftEntityId: bigint) {
    const __args = { passiveCraftEntityId };
    let __writer = new BinaryWriter(1024);
    PassiveCraftCollect.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("passive_craft_collect", __argsBuffer, this.setCallReducerFlags.passiveCraftCollectFlags);
  }

  onPassiveCraftCollect(callback: (ctx: ReducerEventContext, passiveCraftEntityId: bigint) => void) {
    this.connection.onReducer("passive_craft_collect", callback);
  }

  removeOnPassiveCraftCollect(callback: (ctx: ReducerEventContext, passiveCraftEntityId: bigint) => void) {
    this.connection.offReducer("passive_craft_collect", callback);
  }

  passiveCraftCollectAll(buildingEntityId: bigint) {
    const __args = { buildingEntityId };
    let __writer = new BinaryWriter(1024);
    PassiveCraftCollectAll.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("passive_craft_collect_all", __argsBuffer, this.setCallReducerFlags.passiveCraftCollectAllFlags);
  }

  onPassiveCraftCollectAll(callback: (ctx: ReducerEventContext, buildingEntityId: bigint) => void) {
    this.connection.onReducer("passive_craft_collect_all", callback);
  }

  removeOnPassiveCraftCollectAll(callback: (ctx: ReducerEventContext, buildingEntityId: bigint) => void) {
    this.connection.offReducer("passive_craft_collect_all", callback);
  }

  passiveCraftProcess(timer: PassiveCraftTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    PassiveCraftProcess.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("passive_craft_process", __argsBuffer, this.setCallReducerFlags.passiveCraftProcessFlags);
  }

  onPassiveCraftProcess(callback: (ctx: ReducerEventContext, timer: PassiveCraftTimer) => void) {
    this.connection.onReducer("passive_craft_process", callback);
  }

  removeOnPassiveCraftProcess(callback: (ctx: ReducerEventContext, timer: PassiveCraftTimer) => void) {
    this.connection.offReducer("passive_craft_process", callback);
  }

  passiveCraftQueue(request: PlayerPassiveCraftQueueRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PassiveCraftQueue.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("passive_craft_queue", __argsBuffer, this.setCallReducerFlags.passiveCraftQueueFlags);
  }

  onPassiveCraftQueue(callback: (ctx: ReducerEventContext, request: PlayerPassiveCraftQueueRequest) => void) {
    this.connection.onReducer("passive_craft_queue", callback);
  }

  removeOnPassiveCraftQueue(callback: (ctx: ReducerEventContext, request: PlayerPassiveCraftQueueRequest) => void) {
    this.connection.offReducer("passive_craft_queue", callback);
  }

  pausePlayTimer(request: PlayerPausePlayTimerRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PausePlayTimer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("pause_play_timer", __argsBuffer, this.setCallReducerFlags.pausePlayTimerFlags);
  }

  onPausePlayTimer(callback: (ctx: ReducerEventContext, request: PlayerPausePlayTimerRequest) => void) {
    this.connection.onReducer("pause_play_timer", callback);
  }

  removeOnPausePlayTimer(callback: (ctx: ReducerEventContext, request: PlayerPausePlayTimerRequest) => void) {
    this.connection.offReducer("pause_play_timer", callback);
  }

  pavingDestroyTile(request: PlayerPavingDestroyTileRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PavingDestroyTile.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("paving_destroy_tile", __argsBuffer, this.setCallReducerFlags.pavingDestroyTileFlags);
  }

  onPavingDestroyTile(callback: (ctx: ReducerEventContext, request: PlayerPavingDestroyTileRequest) => void) {
    this.connection.onReducer("paving_destroy_tile", callback);
  }

  removeOnPavingDestroyTile(callback: (ctx: ReducerEventContext, request: PlayerPavingDestroyTileRequest) => void) {
    this.connection.offReducer("paving_destroy_tile", callback);
  }

  pavingDestroyTileStart(request: PlayerPavingDestroyTileRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PavingDestroyTileStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("paving_destroy_tile_start", __argsBuffer, this.setCallReducerFlags.pavingDestroyTileStartFlags);
  }

  onPavingDestroyTileStart(callback: (ctx: ReducerEventContext, request: PlayerPavingDestroyTileRequest) => void) {
    this.connection.onReducer("paving_destroy_tile_start", callback);
  }

  removeOnPavingDestroyTileStart(callback: (ctx: ReducerEventContext, request: PlayerPavingDestroyTileRequest) => void) {
    this.connection.offReducer("paving_destroy_tile_start", callback);
  }

  pavingPlaceTile(request: PlayerPavingPlaceTileRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PavingPlaceTile.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("paving_place_tile", __argsBuffer, this.setCallReducerFlags.pavingPlaceTileFlags);
  }

  onPavingPlaceTile(callback: (ctx: ReducerEventContext, request: PlayerPavingPlaceTileRequest) => void) {
    this.connection.onReducer("paving_place_tile", callback);
  }

  removeOnPavingPlaceTile(callback: (ctx: ReducerEventContext, request: PlayerPavingPlaceTileRequest) => void) {
    this.connection.offReducer("paving_place_tile", callback);
  }

  pavingPlaceTileStart(request: PlayerPavingPlaceTileRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PavingPlaceTileStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("paving_place_tile_start", __argsBuffer, this.setCallReducerFlags.pavingPlaceTileStartFlags);
  }

  onPavingPlaceTileStart(callback: (ctx: ReducerEventContext, request: PlayerPavingPlaceTileRequest) => void) {
    this.connection.onReducer("paving_place_tile_start", callback);
  }

  removeOnPavingPlaceTileStart(callback: (ctx: ReducerEventContext, request: PlayerPavingPlaceTileRequest) => void) {
    this.connection.offReducer("paving_place_tile_start", callback);
  }

  permissionEdit(request: PlayerPermissionEditRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PermissionEdit.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("permission_edit", __argsBuffer, this.setCallReducerFlags.permissionEditFlags);
  }

  onPermissionEdit(callback: (ctx: ReducerEventContext, request: PlayerPermissionEditRequest) => void) {
    this.connection.onReducer("permission_edit", callback);
  }

  removeOnPermissionEdit(callback: (ctx: ReducerEventContext, request: PlayerPermissionEditRequest) => void) {
    this.connection.offReducer("permission_edit", callback);
  }

  pillarShapingDestroy(request: PlayerPillarShapingDestroyRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PillarShapingDestroy.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("pillar_shaping_destroy", __argsBuffer, this.setCallReducerFlags.pillarShapingDestroyFlags);
  }

  onPillarShapingDestroy(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingDestroyRequest) => void) {
    this.connection.onReducer("pillar_shaping_destroy", callback);
  }

  removeOnPillarShapingDestroy(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingDestroyRequest) => void) {
    this.connection.offReducer("pillar_shaping_destroy", callback);
  }

  pillarShapingDestroyStart(request: PlayerPillarShapingDestroyRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PillarShapingDestroyStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("pillar_shaping_destroy_start", __argsBuffer, this.setCallReducerFlags.pillarShapingDestroyStartFlags);
  }

  onPillarShapingDestroyStart(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingDestroyRequest) => void) {
    this.connection.onReducer("pillar_shaping_destroy_start", callback);
  }

  removeOnPillarShapingDestroyStart(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingDestroyRequest) => void) {
    this.connection.offReducer("pillar_shaping_destroy_start", callback);
  }

  pillarShapingPlacePillar(request: PlayerPillarShapingPlaceRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PillarShapingPlacePillar.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("pillar_shaping_place_pillar", __argsBuffer, this.setCallReducerFlags.pillarShapingPlacePillarFlags);
  }

  onPillarShapingPlacePillar(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingPlaceRequest) => void) {
    this.connection.onReducer("pillar_shaping_place_pillar", callback);
  }

  removeOnPillarShapingPlacePillar(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingPlaceRequest) => void) {
    this.connection.offReducer("pillar_shaping_place_pillar", callback);
  }

  pillarShapingPlacePillarStart(request: PlayerPillarShapingPlaceRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PillarShapingPlacePillarStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("pillar_shaping_place_pillar_start", __argsBuffer, this.setCallReducerFlags.pillarShapingPlacePillarStartFlags);
  }

  onPillarShapingPlacePillarStart(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingPlaceRequest) => void) {
    this.connection.onReducer("pillar_shaping_place_pillar_start", callback);
  }

  removeOnPillarShapingPlacePillarStart(callback: (ctx: ReducerEventContext, request: PlayerPillarShapingPlaceRequest) => void) {
    this.connection.offReducer("pillar_shaping_place_pillar_start", callback);
  }

  playerActionCancel(clientCancel: boolean) {
    const __args = { clientCancel };
    let __writer = new BinaryWriter(1024);
    PlayerActionCancel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_action_cancel", __argsBuffer, this.setCallReducerFlags.playerActionCancelFlags);
  }

  onPlayerActionCancel(callback: (ctx: ReducerEventContext, clientCancel: boolean) => void) {
    this.connection.onReducer("player_action_cancel", callback);
  }

  removeOnPlayerActionCancel(callback: (ctx: ReducerEventContext, clientCancel: boolean) => void) {
    this.connection.offReducer("player_action_cancel", callback);
  }

  playerCancelRegionTransfer() {
    this.connection.callReducer("player_cancel_region_transfer", new Uint8Array(0), this.setCallReducerFlags.playerCancelRegionTransferFlags);
  }

  onPlayerCancelRegionTransfer(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("player_cancel_region_transfer", callback);
  }

  removeOnPlayerCancelRegionTransfer(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("player_cancel_region_transfer", callback);
  }

  playerClearActionState(actorId: bigint, currentAction: PlayerActionType, layer: PlayerActionLayer, lastActionResult: PlayerActionResult) {
    const __args = { actorId, currentAction, layer, lastActionResult };
    let __writer = new BinaryWriter(1024);
    PlayerClearActionState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_clear_action_state", __argsBuffer, this.setCallReducerFlags.playerClearActionStateFlags);
  }

  onPlayerClearActionState(callback: (ctx: ReducerEventContext, actorId: bigint, currentAction: PlayerActionType, layer: PlayerActionLayer, lastActionResult: PlayerActionResult) => void) {
    this.connection.onReducer("player_clear_action_state", callback);
  }

  removeOnPlayerClearActionState(callback: (ctx: ReducerEventContext, actorId: bigint, currentAction: PlayerActionType, layer: PlayerActionLayer, lastActionResult: PlayerActionResult) => void) {
    this.connection.offReducer("player_clear_action_state", callback);
  }

  playerClimb(request: PlayerClimbRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerClimb.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_climb", __argsBuffer, this.setCallReducerFlags.playerClimbFlags);
  }

  onPlayerClimb(callback: (ctx: ReducerEventContext, request: PlayerClimbRequest) => void) {
    this.connection.onReducer("player_climb", callback);
  }

  removeOnPlayerClimb(callback: (ctx: ReducerEventContext, request: PlayerClimbRequest) => void) {
    this.connection.offReducer("player_climb", callback);
  }

  playerClimbStart(request: PlayerClimbRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerClimbStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_climb_start", __argsBuffer, this.setCallReducerFlags.playerClimbStartFlags);
  }

  onPlayerClimbStart(callback: (ctx: ReducerEventContext, request: PlayerClimbRequest) => void) {
    this.connection.onReducer("player_climb_start", callback);
  }

  removeOnPlayerClimbStart(callback: (ctx: ReducerEventContext, request: PlayerClimbRequest) => void) {
    this.connection.offReducer("player_climb_start", callback);
  }

  playerCompleteTask(request: PlayerCompleteTaskRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerCompleteTask.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_complete_task", __argsBuffer, this.setCallReducerFlags.playerCompleteTaskFlags);
  }

  onPlayerCompleteTask(callback: (ctx: ReducerEventContext, request: PlayerCompleteTaskRequest) => void) {
    this.connection.onReducer("player_complete_task", callback);
  }

  removeOnPlayerCompleteTask(callback: (ctx: ReducerEventContext, request: PlayerCompleteTaskRequest) => void) {
    this.connection.offReducer("player_complete_task", callback);
  }

  playerDeathStart(timer: PlayerDeathTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    PlayerDeathStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_death_start", __argsBuffer, this.setCallReducerFlags.playerDeathStartFlags);
  }

  onPlayerDeathStart(callback: (ctx: ReducerEventContext, timer: PlayerDeathTimer) => void) {
    this.connection.onReducer("player_death_start", callback);
  }

  removeOnPlayerDeathStart(callback: (ctx: ReducerEventContext, timer: PlayerDeathTimer) => void) {
    this.connection.offReducer("player_death_start", callback);
  }

  playerDismissAlert(request: PlayerDismissAlertRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerDismissAlert.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_dismiss_alert", __argsBuffer, this.setCallReducerFlags.playerDismissAlertFlags);
  }

  onPlayerDismissAlert(callback: (ctx: ReducerEventContext, request: PlayerDismissAlertRequest) => void) {
    this.connection.onReducer("player_dismiss_alert", callback);
  }

  removeOnPlayerDismissAlert(callback: (ctx: ReducerEventContext, request: PlayerDismissAlertRequest) => void) {
    this.connection.offReducer("player_dismiss_alert", callback);
  }

  playerDuelInitiate(targetPlayerEntityId: bigint) {
    const __args = { targetPlayerEntityId };
    let __writer = new BinaryWriter(1024);
    PlayerDuelInitiate.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_duel_initiate", __argsBuffer, this.setCallReducerFlags.playerDuelInitiateFlags);
  }

  onPlayerDuelInitiate(callback: (ctx: ReducerEventContext, targetPlayerEntityId: bigint) => void) {
    this.connection.onReducer("player_duel_initiate", callback);
  }

  removeOnPlayerDuelInitiate(callback: (ctx: ReducerEventContext, targetPlayerEntityId: bigint) => void) {
    this.connection.offReducer("player_duel_initiate", callback);
  }

  playerElevatorArrive(timer: PlayerUseElevatorTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    PlayerElevatorArrive.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_elevator_arrive", __argsBuffer, this.setCallReducerFlags.playerElevatorArriveFlags);
  }

  onPlayerElevatorArrive(callback: (ctx: ReducerEventContext, timer: PlayerUseElevatorTimer) => void) {
    this.connection.onReducer("player_elevator_arrive", callback);
  }

  removeOnPlayerElevatorArrive(callback: (ctx: ReducerEventContext, timer: PlayerUseElevatorTimer) => void) {
    this.connection.offReducer("player_elevator_arrive", callback);
  }

  playerHousingChangeEntrance(buildingEntityId: bigint) {
    const __args = { buildingEntityId };
    let __writer = new BinaryWriter(1024);
    PlayerHousingChangeEntrance.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_housing_change_entrance", __argsBuffer, this.setCallReducerFlags.playerHousingChangeEntranceFlags);
  }

  onPlayerHousingChangeEntrance(callback: (ctx: ReducerEventContext, buildingEntityId: bigint) => void) {
    this.connection.onReducer("player_housing_change_entrance", callback);
  }

  removeOnPlayerHousingChangeEntrance(callback: (ctx: ReducerEventContext, buildingEntityId: bigint) => void) {
    this.connection.offReducer("player_housing_change_entrance", callback);
  }

  playerHousingEnter(request: PlayerHousingEnterRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerHousingEnter.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_housing_enter", __argsBuffer, this.setCallReducerFlags.playerHousingEnterFlags);
  }

  onPlayerHousingEnter(callback: (ctx: ReducerEventContext, request: PlayerHousingEnterRequest) => void) {
    this.connection.onReducer("player_housing_enter", callback);
  }

  removeOnPlayerHousingEnter(callback: (ctx: ReducerEventContext, request: PlayerHousingEnterRequest) => void) {
    this.connection.offReducer("player_housing_enter", callback);
  }

  playerHousingEvictPlayer(request: PlayerHousingEvictPlayerRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerHousingEvictPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_housing_evict_player", __argsBuffer, this.setCallReducerFlags.playerHousingEvictPlayerFlags);
  }

  onPlayerHousingEvictPlayer(callback: (ctx: ReducerEventContext, request: PlayerHousingEvictPlayerRequest) => void) {
    this.connection.onReducer("player_housing_evict_player", callback);
  }

  removeOnPlayerHousingEvictPlayer(callback: (ctx: ReducerEventContext, request: PlayerHousingEvictPlayerRequest) => void) {
    this.connection.offReducer("player_housing_evict_player", callback);
  }

  playerHousingEvictPlayerComplete(timer: PlayerHousingEvictPlayerTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    PlayerHousingEvictPlayerComplete.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_housing_evict_player_complete", __argsBuffer, this.setCallReducerFlags.playerHousingEvictPlayerCompleteFlags);
  }

  onPlayerHousingEvictPlayerComplete(callback: (ctx: ReducerEventContext, timer: PlayerHousingEvictPlayerTimer) => void) {
    this.connection.onReducer("player_housing_evict_player_complete", callback);
  }

  removeOnPlayerHousingEvictPlayerComplete(callback: (ctx: ReducerEventContext, timer: PlayerHousingEvictPlayerTimer) => void) {
    this.connection.offReducer("player_housing_evict_player_complete", callback);
  }

  playerHousingIncomeAgentLoop(timer: PlayerHousingIncomeLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    PlayerHousingIncomeAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_housing_income_agent_loop", __argsBuffer, this.setCallReducerFlags.playerHousingIncomeAgentLoopFlags);
  }

  onPlayerHousingIncomeAgentLoop(callback: (ctx: ReducerEventContext, timer: PlayerHousingIncomeLoopTimer) => void) {
    this.connection.onReducer("player_housing_income_agent_loop", callback);
  }

  removeOnPlayerHousingIncomeAgentLoop(callback: (ctx: ReducerEventContext, timer: PlayerHousingIncomeLoopTimer) => void) {
    this.connection.offReducer("player_housing_income_agent_loop", callback);
  }

  playerHousingRequestAccess(request: PlayerHousingRequestAccessRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerHousingRequestAccess.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_housing_request_access", __argsBuffer, this.setCallReducerFlags.playerHousingRequestAccessFlags);
  }

  onPlayerHousingRequestAccess(callback: (ctx: ReducerEventContext, request: PlayerHousingRequestAccessRequest) => void) {
    this.connection.onReducer("player_housing_request_access", callback);
  }

  removeOnPlayerHousingRequestAccess(callback: (ctx: ReducerEventContext, request: PlayerHousingRequestAccessRequest) => void) {
    this.connection.offReducer("player_housing_request_access", callback);
  }

  playerHousingUpdate(buildingEntityId: bigint) {
    const __args = { buildingEntityId };
    let __writer = new BinaryWriter(1024);
    PlayerHousingUpdate.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_housing_update", __argsBuffer, this.setCallReducerFlags.playerHousingUpdateFlags);
  }

  onPlayerHousingUpdate(callback: (ctx: ReducerEventContext, buildingEntityId: bigint) => void) {
    this.connection.onReducer("player_housing_update", callback);
  }

  removeOnPlayerHousingUpdate(callback: (ctx: ReducerEventContext, buildingEntityId: bigint) => void) {
    this.connection.offReducer("player_housing_update", callback);
  }

  playerMove(request: PlayerMoveRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerMove.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_move", __argsBuffer, this.setCallReducerFlags.playerMoveFlags);
  }

  onPlayerMove(callback: (ctx: ReducerEventContext, request: PlayerMoveRequest) => void) {
    this.connection.onReducer("player_move", callback);
  }

  removeOnPlayerMove(callback: (ctx: ReducerEventContext, request: PlayerMoveRequest) => void) {
    this.connection.offReducer("player_move", callback);
  }

  playerNotificationEventReducer(timer: PlayerNotificationEvent) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    PlayerNotificationEventReducer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_notification_event_reducer", __argsBuffer, this.setCallReducerFlags.playerNotificationEventReducerFlags);
  }

  onPlayerNotificationEventReducer(callback: (ctx: ReducerEventContext, timer: PlayerNotificationEvent) => void) {
    this.connection.onReducer("player_notification_event_reducer", callback);
  }

  removeOnPlayerNotificationEventReducer(callback: (ctx: ReducerEventContext, timer: PlayerNotificationEvent) => void) {
    this.connection.offReducer("player_notification_event_reducer", callback);
  }

  playerQueueJoin() {
    this.connection.callReducer("player_queue_join", new Uint8Array(0), this.setCallReducerFlags.playerQueueJoinFlags);
  }

  onPlayerQueueJoin(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("player_queue_join", callback);
  }

  removeOnPlayerQueueJoin(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("player_queue_join", callback);
  }

  playerQueueLeave() {
    this.connection.callReducer("player_queue_leave", new Uint8Array(0), this.setCallReducerFlags.playerQueueLeaveFlags);
  }

  onPlayerQueueLeave(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("player_queue_leave", callback);
  }

  removeOnPlayerQueueLeave(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("player_queue_leave", callback);
  }

  playerRegenAgentLoop(timer: PlayerRegenLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    PlayerRegenAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_regen_agent_loop", __argsBuffer, this.setCallReducerFlags.playerRegenAgentLoopFlags);
  }

  onPlayerRegenAgentLoop(callback: (ctx: ReducerEventContext, timer: PlayerRegenLoopTimer) => void) {
    this.connection.onReducer("player_regen_agent_loop", callback);
  }

  removeOnPlayerRegenAgentLoop(callback: (ctx: ReducerEventContext, timer: PlayerRegenLoopTimer) => void) {
    this.connection.offReducer("player_regen_agent_loop", callback);
  }

  playerRegionCrossover() {
    this.connection.callReducer("player_region_crossover", new Uint8Array(0), this.setCallReducerFlags.playerRegionCrossoverFlags);
  }

  onPlayerRegionCrossover(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("player_region_crossover", callback);
  }

  removeOnPlayerRegionCrossover(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("player_region_crossover", callback);
  }

  playerRegionTransferEventReducer(timer: PlayerRegionTransferEvent) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    PlayerRegionTransferEventReducer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_region_transfer_event_reducer", __argsBuffer, this.setCallReducerFlags.playerRegionTransferEventReducerFlags);
  }

  onPlayerRegionTransferEventReducer(callback: (ctx: ReducerEventContext, timer: PlayerRegionTransferEvent) => void) {
    this.connection.onReducer("player_region_transfer_event_reducer", callback);
  }

  removeOnPlayerRegionTransferEventReducer(callback: (ctx: ReducerEventContext, timer: PlayerRegionTransferEvent) => void) {
    this.connection.offReducer("player_region_transfer_event_reducer", callback);
  }

  playerRespawn(teleportHome: boolean) {
    const __args = { teleportHome };
    let __writer = new BinaryWriter(1024);
    PlayerRespawn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_respawn", __argsBuffer, this.setCallReducerFlags.playerRespawnFlags);
  }

  onPlayerRespawn(callback: (ctx: ReducerEventContext, teleportHome: boolean) => void) {
    this.connection.onReducer("player_respawn", callback);
  }

  removeOnPlayerRespawn(callback: (ctx: ReducerEventContext, teleportHome: boolean) => void) {
    this.connection.offReducer("player_respawn", callback);
  }

  playerSetDefaultDeployable(request: PlayerSetDefaultDeployableRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerSetDefaultDeployable.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_set_default_deployable", __argsBuffer, this.setCallReducerFlags.playerSetDefaultDeployableFlags);
  }

  onPlayerSetDefaultDeployable(callback: (ctx: ReducerEventContext, request: PlayerSetDefaultDeployableRequest) => void) {
    this.connection.onReducer("player_set_default_deployable", callback);
  }

  removeOnPlayerSetDefaultDeployable(callback: (ctx: ReducerEventContext, request: PlayerSetDefaultDeployableRequest) => void) {
    this.connection.offReducer("player_set_default_deployable", callback);
  }

  playerSetNameOutcomeEventReducer(timer: PlayerSetNameOutcomeEvent) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    PlayerSetNameOutcomeEventReducer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_set_name_outcome_event_reducer", __argsBuffer, this.setCallReducerFlags.playerSetNameOutcomeEventReducerFlags);
  }

  onPlayerSetNameOutcomeEventReducer(callback: (ctx: ReducerEventContext, timer: PlayerSetNameOutcomeEvent) => void) {
    this.connection.onReducer("player_set_name_outcome_event_reducer", callback);
  }

  removeOnPlayerSetNameOutcomeEventReducer(callback: (ctx: ReducerEventContext, timer: PlayerSetNameOutcomeEvent) => void) {
    this.connection.offReducer("player_set_name_outcome_event_reducer", callback);
  }

  playerTeleportHome(request: PlayerTeleportHomeRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerTeleportHome.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_teleport_home", __argsBuffer, this.setCallReducerFlags.playerTeleportHomeFlags);
  }

  onPlayerTeleportHome(callback: (ctx: ReducerEventContext, request: PlayerTeleportHomeRequest) => void) {
    this.connection.onReducer("player_teleport_home", callback);
  }

  removeOnPlayerTeleportHome(callback: (ctx: ReducerEventContext, request: PlayerTeleportHomeRequest) => void) {
    this.connection.offReducer("player_teleport_home", callback);
  }

  playerTeleportHomeStart(request: PlayerTeleportHomeRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerTeleportHomeStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_teleport_home_start", __argsBuffer, this.setCallReducerFlags.playerTeleportHomeStartFlags);
  }

  onPlayerTeleportHomeStart(callback: (ctx: ReducerEventContext, request: PlayerTeleportHomeRequest) => void) {
    this.connection.onReducer("player_teleport_home_start", callback);
  }

  removeOnPlayerTeleportHomeStart(callback: (ctx: ReducerEventContext, request: PlayerTeleportHomeRequest) => void) {
    this.connection.offReducer("player_teleport_home_start", callback);
  }

  playerTeleportWaystone(request: PlayerTeleportWaystoneRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerTeleportWaystone.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_teleport_waystone", __argsBuffer, this.setCallReducerFlags.playerTeleportWaystoneFlags);
  }

  onPlayerTeleportWaystone(callback: (ctx: ReducerEventContext, request: PlayerTeleportWaystoneRequest) => void) {
    this.connection.onReducer("player_teleport_waystone", callback);
  }

  removeOnPlayerTeleportWaystone(callback: (ctx: ReducerEventContext, request: PlayerTeleportWaystoneRequest) => void) {
    this.connection.offReducer("player_teleport_waystone", callback);
  }

  playerTeleportWaystoneStart(request: PlayerTeleportWaystoneRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerTeleportWaystoneStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_teleport_waystone_start", __argsBuffer, this.setCallReducerFlags.playerTeleportWaystoneStartFlags);
  }

  onPlayerTeleportWaystoneStart(callback: (ctx: ReducerEventContext, request: PlayerTeleportWaystoneRequest) => void) {
    this.connection.onReducer("player_teleport_waystone_start", callback);
  }

  removeOnPlayerTeleportWaystoneStart(callback: (ctx: ReducerEventContext, request: PlayerTeleportWaystoneRequest) => void) {
    this.connection.offReducer("player_teleport_waystone_start", callback);
  }

  playerUseElevator(platformEntityId: bigint) {
    const __args = { platformEntityId };
    let __writer = new BinaryWriter(1024);
    PlayerUseElevator.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_use_elevator", __argsBuffer, this.setCallReducerFlags.playerUseElevatorFlags);
  }

  onPlayerUseElevator(callback: (ctx: ReducerEventContext, platformEntityId: bigint) => void) {
    this.connection.onReducer("player_use_elevator", callback);
  }

  removeOnPlayerUseElevator(callback: (ctx: ReducerEventContext, platformEntityId: bigint) => void) {
    this.connection.offReducer("player_use_elevator", callback);
  }

  playerVoteAnswer(request: PlayerVoteAnswerRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PlayerVoteAnswer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_vote_answer", __argsBuffer, this.setCallReducerFlags.playerVoteAnswerFlags);
  }

  onPlayerVoteAnswer(callback: (ctx: ReducerEventContext, request: PlayerVoteAnswerRequest) => void) {
    this.connection.onReducer("player_vote_answer", callback);
  }

  removeOnPlayerVoteAnswer(callback: (ctx: ReducerEventContext, request: PlayerVoteAnswerRequest) => void) {
    this.connection.offReducer("player_vote_answer", callback);
  }

  playerVoteConclude(timer: PlayerVoteConcludeTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    PlayerVoteConclude.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("player_vote_conclude", __argsBuffer, this.setCallReducerFlags.playerVoteConcludeFlags);
  }

  onPlayerVoteConclude(callback: (ctx: ReducerEventContext, timer: PlayerVoteConcludeTimer) => void) {
    this.connection.onReducer("player_vote_conclude", callback);
  }

  removeOnPlayerVoteConclude(callback: (ctx: ReducerEventContext, timer: PlayerVoteConcludeTimer) => void) {
    this.connection.offReducer("player_vote_conclude", callback);
  }

  pocketSwapContents(request: PlayerPocketSwapContentsRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PocketSwapContents.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("pocket_swap_contents", __argsBuffer, this.setCallReducerFlags.pocketSwapContentsFlags);
  }

  onPocketSwapContents(callback: (ctx: ReducerEventContext, request: PlayerPocketSwapContentsRequest) => void) {
    this.connection.onReducer("pocket_swap_contents", callback);
  }

  removeOnPocketSwapContents(callback: (ctx: ReducerEventContext, request: PlayerPocketSwapContentsRequest) => void) {
    this.connection.offReducer("pocket_swap_contents", callback);
  }

  portalEnter(request: PlayerPortalEnterRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    PortalEnter.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("portal_enter", __argsBuffer, this.setCallReducerFlags.portalEnterFlags);
  }

  onPortalEnter(callback: (ctx: ReducerEventContext, request: PlayerPortalEnterRequest) => void) {
    this.connection.onReducer("portal_enter", callback);
  }

  removeOnPortalEnter(callback: (ctx: ReducerEventContext, request: PlayerPortalEnterRequest) => void) {
    this.connection.offReducer("portal_enter", callback);
  }

  processInterModuleMessage(sender: number, message: InterModuleMessage) {
    const __args = { sender, message };
    let __writer = new BinaryWriter(1024);
    ProcessInterModuleMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("process_inter_module_message", __argsBuffer, this.setCallReducerFlags.processInterModuleMessageFlags);
  }

  onProcessInterModuleMessage(callback: (ctx: ReducerEventContext, sender: number, message: InterModuleMessage) => void) {
    this.connection.onReducer("process_inter_module_message", callback);
  }

  removeOnProcessInterModuleMessage(callback: (ctx: ReducerEventContext, sender: number, message: InterModuleMessage) => void) {
    this.connection.offReducer("process_inter_module_message", callback);
  }

  projectSiteAddMaterials(request: PlayerProjectSiteAddMaterialsRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ProjectSiteAddMaterials.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("project_site_add_materials", __argsBuffer, this.setCallReducerFlags.projectSiteAddMaterialsFlags);
  }

  onProjectSiteAddMaterials(callback: (ctx: ReducerEventContext, request: PlayerProjectSiteAddMaterialsRequest) => void) {
    this.connection.onReducer("project_site_add_materials", callback);
  }

  removeOnProjectSiteAddMaterials(callback: (ctx: ReducerEventContext, request: PlayerProjectSiteAddMaterialsRequest) => void) {
    this.connection.offReducer("project_site_add_materials", callback);
  }

  projectSiteAdvanceProject(request: PlayerProjectSiteAdvanceProjectRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ProjectSiteAdvanceProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("project_site_advance_project", __argsBuffer, this.setCallReducerFlags.projectSiteAdvanceProjectFlags);
  }

  onProjectSiteAdvanceProject(callback: (ctx: ReducerEventContext, request: PlayerProjectSiteAdvanceProjectRequest) => void) {
    this.connection.onReducer("project_site_advance_project", callback);
  }

  removeOnProjectSiteAdvanceProject(callback: (ctx: ReducerEventContext, request: PlayerProjectSiteAdvanceProjectRequest) => void) {
    this.connection.offReducer("project_site_advance_project", callback);
  }

  projectSiteAdvanceProjectStart(request: PlayerProjectSiteAdvanceProjectRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ProjectSiteAdvanceProjectStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("project_site_advance_project_start", __argsBuffer, this.setCallReducerFlags.projectSiteAdvanceProjectStartFlags);
  }

  onProjectSiteAdvanceProjectStart(callback: (ctx: ReducerEventContext, request: PlayerProjectSiteAdvanceProjectRequest) => void) {
    this.connection.onReducer("project_site_advance_project_start", callback);
  }

  removeOnProjectSiteAdvanceProjectStart(callback: (ctx: ReducerEventContext, request: PlayerProjectSiteAdvanceProjectRequest) => void) {
    this.connection.offReducer("project_site_advance_project_start", callback);
  }

  projectSiteCancel(request: PlayerProjectSiteCancelRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ProjectSiteCancel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("project_site_cancel", __argsBuffer, this.setCallReducerFlags.projectSiteCancelFlags);
  }

  onProjectSiteCancel(callback: (ctx: ReducerEventContext, request: PlayerProjectSiteCancelRequest) => void) {
    this.connection.onReducer("project_site_cancel", callback);
  }

  removeOnProjectSiteCancel(callback: (ctx: ReducerEventContext, request: PlayerProjectSiteCancelRequest) => void) {
    this.connection.offReducer("project_site_cancel", callback);
  }

  projectSitePlace(request: PlayerProjectSitePlaceRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ProjectSitePlace.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("project_site_place", __argsBuffer, this.setCallReducerFlags.projectSitePlaceFlags);
  }

  onProjectSitePlace(callback: (ctx: ReducerEventContext, request: PlayerProjectSitePlaceRequest) => void) {
    this.connection.onReducer("project_site_place", callback);
  }

  removeOnProjectSitePlace(callback: (ctx: ReducerEventContext, request: PlayerProjectSitePlaceRequest) => void) {
    this.connection.offReducer("project_site_place", callback);
  }

  regionPopuplationAgentLoop(timer: RegionPopulationLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    RegionPopuplationAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("region_popuplation_agent_loop", __argsBuffer, this.setCallReducerFlags.regionPopuplationAgentLoopFlags);
  }

  onRegionPopuplationAgentLoop(callback: (ctx: ReducerEventContext, timer: RegionPopulationLoopTimer) => void) {
    this.connection.onReducer("region_popuplation_agent_loop", callback);
  }

  removeOnRegionPopuplationAgentLoop(callback: (ctx: ReducerEventContext, timer: RegionPopulationLoopTimer) => void) {
    this.connection.offReducer("region_popuplation_agent_loop", callback);
  }

  rentAddListing(request: RentAddListingRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    RentAddListing.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_add_listing", __argsBuffer, this.setCallReducerFlags.rentAddListingFlags);
  }

  onRentAddListing(callback: (ctx: ReducerEventContext, request: RentAddListingRequest) => void) {
    this.connection.onReducer("rent_add_listing", callback);
  }

  removeOnRentAddListing(callback: (ctx: ReducerEventContext, request: RentAddListingRequest) => void) {
    this.connection.offReducer("rent_add_listing", callback);
  }

  rentAddTenant(request: RentAddTenantRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    RentAddTenant.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_add_tenant", __argsBuffer, this.setCallReducerFlags.rentAddTenantFlags);
  }

  onRentAddTenant(callback: (ctx: ReducerEventContext, request: RentAddTenantRequest) => void) {
    this.connection.onReducer("rent_add_tenant", callback);
  }

  removeOnRentAddTenant(callback: (ctx: ReducerEventContext, request: RentAddTenantRequest) => void) {
    this.connection.offReducer("rent_add_tenant", callback);
  }

  rentCollectEvictionFee(rentEntityId: bigint) {
    const __args = { rentEntityId };
    let __writer = new BinaryWriter(1024);
    RentCollectEvictionFee.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_collect_eviction_fee", __argsBuffer, this.setCallReducerFlags.rentCollectEvictionFeeFlags);
  }

  onRentCollectEvictionFee(callback: (ctx: ReducerEventContext, rentEntityId: bigint) => void) {
    this.connection.onReducer("rent_collect_eviction_fee", callback);
  }

  removeOnRentCollectEvictionFee(callback: (ctx: ReducerEventContext, rentEntityId: bigint) => void) {
    this.connection.offReducer("rent_collect_eviction_fee", callback);
  }

  rentCollectorAgentLoop(timer: RentCollectorLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    RentCollectorAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_collector_agent_loop", __argsBuffer, this.setCallReducerFlags.rentCollectorAgentLoopFlags);
  }

  onRentCollectorAgentLoop(callback: (ctx: ReducerEventContext, timer: RentCollectorLoopTimer) => void) {
    this.connection.onReducer("rent_collector_agent_loop", callback);
  }

  removeOnRentCollectorAgentLoop(callback: (ctx: ReducerEventContext, timer: RentCollectorLoopTimer) => void) {
    this.connection.offReducer("rent_collector_agent_loop", callback);
  }

  rentDepositCoins(request: RentDepositCoinsRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    RentDepositCoins.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_deposit_coins", __argsBuffer, this.setCallReducerFlags.rentDepositCoinsFlags);
  }

  onRentDepositCoins(callback: (ctx: ReducerEventContext, request: RentDepositCoinsRequest) => void) {
    this.connection.onReducer("rent_deposit_coins", callback);
  }

  removeOnRentDepositCoins(callback: (ctx: ReducerEventContext, request: RentDepositCoinsRequest) => void) {
    this.connection.offReducer("rent_deposit_coins", callback);
  }

  rentEvict(request: RentEvictRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    RentEvict.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_evict", __argsBuffer, this.setCallReducerFlags.rentEvictFlags);
  }

  onRentEvict(callback: (ctx: ReducerEventContext, request: RentEvictRequest) => void) {
    this.connection.onReducer("rent_evict", callback);
  }

  removeOnRentEvict(callback: (ctx: ReducerEventContext, request: RentEvictRequest) => void) {
    this.connection.offReducer("rent_evict", callback);
  }

  rentEvictTerm(timer: RentEvictTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    RentEvictTerm.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_evict_term", __argsBuffer, this.setCallReducerFlags.rentEvictTermFlags);
  }

  onRentEvictTerm(callback: (ctx: ReducerEventContext, timer: RentEvictTimer) => void) {
    this.connection.onReducer("rent_evict_term", callback);
  }

  removeOnRentEvictTerm(callback: (ctx: ReducerEventContext, timer: RentEvictTimer) => void) {
    this.connection.offReducer("rent_evict_term", callback);
  }

  rentPurchase(request: RentPurchaseRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    RentPurchase.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_purchase", __argsBuffer, this.setCallReducerFlags.rentPurchaseFlags);
  }

  onRentPurchase(callback: (ctx: ReducerEventContext, request: RentPurchaseRequest) => void) {
    this.connection.onReducer("rent_purchase", callback);
  }

  removeOnRentPurchase(callback: (ctx: ReducerEventContext, request: RentPurchaseRequest) => void) {
    this.connection.offReducer("rent_purchase", callback);
  }

  rentRemoveTenant(request: RentRemoveTenantRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    RentRemoveTenant.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_remove_tenant", __argsBuffer, this.setCallReducerFlags.rentRemoveTenantFlags);
  }

  onRentRemoveTenant(callback: (ctx: ReducerEventContext, request: RentRemoveTenantRequest) => void) {
    this.connection.onReducer("rent_remove_tenant", callback);
  }

  removeOnRentRemoveTenant(callback: (ctx: ReducerEventContext, request: RentRemoveTenantRequest) => void) {
    this.connection.offReducer("rent_remove_tenant", callback);
  }

  rentSetDailyRate(request: RentSetDailyRateRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    RentSetDailyRate.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_set_daily_rate", __argsBuffer, this.setCallReducerFlags.rentSetDailyRateFlags);
  }

  onRentSetDailyRate(callback: (ctx: ReducerEventContext, request: RentSetDailyRateRequest) => void) {
    this.connection.onReducer("rent_set_daily_rate", callback);
  }

  removeOnRentSetDailyRate(callback: (ctx: ReducerEventContext, request: RentSetDailyRateRequest) => void) {
    this.connection.offReducer("rent_set_daily_rate", callback);
  }

  rentTerminate(request: RentTerminateRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    RentTerminate.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_terminate", __argsBuffer, this.setCallReducerFlags.rentTerminateFlags);
  }

  onRentTerminate(callback: (ctx: ReducerEventContext, request: RentTerminateRequest) => void) {
    this.connection.onReducer("rent_terminate", callback);
  }

  removeOnRentTerminate(callback: (ctx: ReducerEventContext, request: RentTerminateRequest) => void) {
    this.connection.offReducer("rent_terminate", callback);
  }

  rentUnlist(request: RentUnlistRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    RentUnlist.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rent_unlist", __argsBuffer, this.setCallReducerFlags.rentUnlistFlags);
  }

  onRentUnlist(callback: (ctx: ReducerEventContext, request: RentUnlistRequest) => void) {
    this.connection.onReducer("rent_unlist", callback);
  }

  removeOnRentUnlist(callback: (ctx: ReducerEventContext, request: RentUnlistRequest) => void) {
    this.connection.offReducer("rent_unlist", callback);
  }

  reportChatMessage(request: ReportPlayerChatMessage) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ReportChatMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("report_chat_message", __argsBuffer, this.setCallReducerFlags.reportChatMessageFlags);
  }

  onReportChatMessage(callback: (ctx: ReducerEventContext, request: ReportPlayerChatMessage) => void) {
    this.connection.onReducer("report_chat_message", callback);
  }

  removeOnReportChatMessage(callback: (ctx: ReducerEventContext, request: ReportPlayerChatMessage) => void) {
    this.connection.offReducer("report_chat_message", callback);
  }

  reportPlayer(request: ReportPlayerMessage) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ReportPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("report_player", __argsBuffer, this.setCallReducerFlags.reportPlayerFlags);
  }

  onReportPlayer(callback: (ctx: ReducerEventContext, request: ReportPlayerMessage) => void) {
    this.connection.onReducer("report_player", callback);
  }

  removeOnReportPlayer(callback: (ctx: ReducerEventContext, request: ReportPlayerMessage) => void) {
    this.connection.offReducer("report_player", callback);
  }

  resetChunkIndex() {
    this.connection.callReducer("reset_chunk_index", new Uint8Array(0), this.setCallReducerFlags.resetChunkIndexFlags);
  }

  onResetChunkIndex(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("reset_chunk_index", callback);
  }

  removeOnResetChunkIndex(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("reset_chunk_index", callback);
  }

  resetChunkIndexWithDimension(timer: ResetChunkIndexTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    ResetChunkIndexWithDimension.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("reset_chunk_index_with_dimension", __argsBuffer, this.setCallReducerFlags.resetChunkIndexWithDimensionFlags);
  }

  onResetChunkIndexWithDimension(callback: (ctx: ReducerEventContext, timer: ResetChunkIndexTimer) => void) {
    this.connection.onReducer("reset_chunk_index_with_dimension", callback);
  }

  removeOnResetChunkIndexWithDimension(callback: (ctx: ReducerEventContext, timer: ResetChunkIndexTimer) => void) {
    this.connection.offReducer("reset_chunk_index_with_dimension", callback);
  }

  resetMobileEntityPosition(timer: ResetMobileEntityTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    ResetMobileEntityPosition.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("reset_mobile_entity_position", __argsBuffer, this.setCallReducerFlags.resetMobileEntityPositionFlags);
  }

  onResetMobileEntityPosition(callback: (ctx: ReducerEventContext, timer: ResetMobileEntityTimer) => void) {
    this.connection.onReducer("reset_mobile_entity_position", callback);
  }

  removeOnResetMobileEntityPosition(callback: (ctx: ReducerEventContext, timer: ResetMobileEntityTimer) => void) {
    this.connection.offReducer("reset_mobile_entity_position", callback);
  }

  resetOnboarding() {
    this.connection.callReducer("reset_onboarding", new Uint8Array(0), this.setCallReducerFlags.resetOnboardingFlags);
  }

  onResetOnboarding(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("reset_onboarding", callback);
  }

  removeOnResetOnboarding(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("reset_onboarding", callback);
  }

  resourceSpawnScheduled(timer: ResourceSpawnTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    ResourceSpawnScheduled.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("resource_spawn_scheduled", __argsBuffer, this.setCallReducerFlags.resourceSpawnScheduledFlags);
  }

  onResourceSpawnScheduled(callback: (ctx: ReducerEventContext, timer: ResourceSpawnTimer) => void) {
    this.connection.onReducer("resource_spawn_scheduled", callback);
  }

  removeOnResourceSpawnScheduled(callback: (ctx: ReducerEventContext, timer: ResourceSpawnTimer) => void) {
    this.connection.offReducer("resource_spawn_scheduled", callback);
  }

  resourcesRegen(timer: ResourcesRegenLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    ResourcesRegen.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("resources_regen", __argsBuffer, this.setCallReducerFlags.resourcesRegenFlags);
  }

  onResourcesRegen(callback: (ctx: ReducerEventContext, timer: ResourcesRegenLoopTimer) => void) {
    this.connection.onReducer("resources_regen", callback);
  }

  removeOnResourcesRegen(callback: (ctx: ReducerEventContext, timer: ResourcesRegenLoopTimer) => void) {
    this.connection.offReducer("resources_regen", callback);
  }

  respawnInteriorNpcs() {
    this.connection.callReducer("respawn_interior_npcs", new Uint8Array(0), this.setCallReducerFlags.respawnInteriorNpcsFlags);
  }

  onRespawnInteriorNpcs(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("respawn_interior_npcs", callback);
  }

  removeOnRespawnInteriorNpcs(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("respawn_interior_npcs", callback);
  }

  respawnResourceInChunk(timer: RespawnResourceInChunkTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    RespawnResourceInChunk.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("respawn_resource_in_chunk", __argsBuffer, this.setCallReducerFlags.respawnResourceInChunkFlags);
  }

  onRespawnResourceInChunk(callback: (ctx: ReducerEventContext, timer: RespawnResourceInChunkTimer) => void) {
    this.connection.onReducer("respawn_resource_in_chunk", callback);
  }

  removeOnRespawnResourceInChunk(callback: (ctx: ReducerEventContext, timer: RespawnResourceInChunkTimer) => void) {
    this.connection.offReducer("respawn_resource_in_chunk", callback);
  }

  retrieveLostItem(request: PlayerRetrieveLostItemRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    RetrieveLostItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("retrieve_lost_item", __argsBuffer, this.setCallReducerFlags.retrieveLostItemFlags);
  }

  onRetrieveLostItem(callback: (ctx: ReducerEventContext, request: PlayerRetrieveLostItemRequest) => void) {
    this.connection.onReducer("retrieve_lost_item", callback);
  }

  removeOnRetrieveLostItem(callback: (ctx: ReducerEventContext, request: PlayerRetrieveLostItemRequest) => void) {
    this.connection.offReducer("retrieve_lost_item", callback);
  }

  scrollRead(request: PlayerScrollReadRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    ScrollRead.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("scroll_read", __argsBuffer, this.setCallReducerFlags.scrollReadFlags);
  }

  onScrollRead(callback: (ctx: ReducerEventContext, request: PlayerScrollReadRequest) => void) {
    this.connection.onReducer("scroll_read", callback);
  }

  removeOnScrollRead(callback: (ctx: ReducerEventContext, request: PlayerScrollReadRequest) => void) {
    this.connection.offReducer("scroll_read", callback);
  }

  searchForClosestBuilding(buildingDescriptionIds: number[]) {
    const __args = { buildingDescriptionIds };
    let __writer = new BinaryWriter(1024);
    SearchForClosestBuilding.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("search_for_closest_building", __argsBuffer, this.setCallReducerFlags.searchForClosestBuildingFlags);
  }

  onSearchForClosestBuilding(callback: (ctx: ReducerEventContext, buildingDescriptionIds: number[]) => void) {
    this.connection.onReducer("search_for_closest_building", callback);
  }

  removeOnSearchForClosestBuilding(callback: (ctx: ReducerEventContext, buildingDescriptionIds: number[]) => void) {
    this.connection.offReducer("search_for_closest_building", callback);
  }

  searchForClosestBuildingType(buildingTypeId: number) {
    const __args = { buildingTypeId };
    let __writer = new BinaryWriter(1024);
    SearchForClosestBuildingType.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("search_for_closest_building_type", __argsBuffer, this.setCallReducerFlags.searchForClosestBuildingTypeFlags);
  }

  onSearchForClosestBuildingType(callback: (ctx: ReducerEventContext, buildingTypeId: number) => void) {
    this.connection.onReducer("search_for_closest_building_type", callback);
  }

  removeOnSearchForClosestBuildingType(callback: (ctx: ReducerEventContext, buildingTypeId: number) => void) {
    this.connection.offReducer("search_for_closest_building_type", callback);
  }

  serverTeleportPlayer(timer: TeleportPlayerTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    ServerTeleportPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("server_teleport_player", __argsBuffer, this.setCallReducerFlags.serverTeleportPlayerFlags);
  }

  onServerTeleportPlayer(callback: (ctx: ReducerEventContext, timer: TeleportPlayerTimer) => void) {
    this.connection.onReducer("server_teleport_player", callback);
  }

  removeOnServerTeleportPlayer(callback: (ctx: ReducerEventContext, timer: TeleportPlayerTimer) => void) {
    this.connection.offReducer("server_teleport_player", callback);
  }

  setHome(request: PlayerSetHomeRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    SetHome.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_home", __argsBuffer, this.setCallReducerFlags.setHomeFlags);
  }

  onSetHome(callback: (ctx: ReducerEventContext, request: PlayerSetHomeRequest) => void) {
    this.connection.onReducer("set_home", callback);
  }

  removeOnSetHome(callback: (ctx: ReducerEventContext, request: PlayerSetHomeRequest) => void) {
    this.connection.offReducer("set_home", callback);
  }

  signIn(request: PlayerSignInRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    SignIn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("sign_in", __argsBuffer, this.setCallReducerFlags.signInFlags);
  }

  onSignIn(callback: (ctx: ReducerEventContext, request: PlayerSignInRequest) => void) {
    this.connection.onReducer("sign_in", callback);
  }

  removeOnSignIn(callback: (ctx: ReducerEventContext, request: PlayerSignInRequest) => void) {
    this.connection.offReducer("sign_in", callback);
  }

  signOut() {
    this.connection.callReducer("sign_out", new Uint8Array(0), this.setCallReducerFlags.signOutFlags);
  }

  onSignOut(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("sign_out", callback);
  }

  removeOnSignOut(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("sign_out", callback);
  }

  sleep(request: PlayerSleepRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    Sleep.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("sleep", __argsBuffer, this.setCallReducerFlags.sleepFlags);
  }

  onSleep(callback: (ctx: ReducerEventContext, request: PlayerSleepRequest) => void) {
    this.connection.onReducer("sleep", callback);
  }

  removeOnSleep(callback: (ctx: ReducerEventContext, request: PlayerSleepRequest) => void) {
    this.connection.offReducer("sleep", callback);
  }

  stageAchievementDesc(records: AchievementDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageAchievementDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_achievement_desc", __argsBuffer, this.setCallReducerFlags.stageAchievementDescFlags);
  }

  onStageAchievementDesc(callback: (ctx: ReducerEventContext, records: AchievementDesc[]) => void) {
    this.connection.onReducer("stage_achievement_desc", callback);
  }

  removeOnStageAchievementDesc(callback: (ctx: ReducerEventContext, records: AchievementDesc[]) => void) {
    this.connection.offReducer("stage_achievement_desc", callback);
  }

  stageAlertDesc(records: AlertDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageAlertDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_alert_desc", __argsBuffer, this.setCallReducerFlags.stageAlertDescFlags);
  }

  onStageAlertDesc(callback: (ctx: ReducerEventContext, records: AlertDesc[]) => void) {
    this.connection.onReducer("stage_alert_desc", callback);
  }

  removeOnStageAlertDesc(callback: (ctx: ReducerEventContext, records: AlertDesc[]) => void) {
    this.connection.offReducer("stage_alert_desc", callback);
  }

  stageBiomeDesc(records: BiomeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageBiomeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_biome_desc", __argsBuffer, this.setCallReducerFlags.stageBiomeDescFlags);
  }

  onStageBiomeDesc(callback: (ctx: ReducerEventContext, records: BiomeDesc[]) => void) {
    this.connection.onReducer("stage_biome_desc", callback);
  }

  removeOnStageBiomeDesc(callback: (ctx: ReducerEventContext, records: BiomeDesc[]) => void) {
    this.connection.offReducer("stage_biome_desc", callback);
  }

  stageBuffDesc(records: BuffDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageBuffDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_buff_desc", __argsBuffer, this.setCallReducerFlags.stageBuffDescFlags);
  }

  onStageBuffDesc(callback: (ctx: ReducerEventContext, records: BuffDesc[]) => void) {
    this.connection.onReducer("stage_buff_desc", callback);
  }

  removeOnStageBuffDesc(callback: (ctx: ReducerEventContext, records: BuffDesc[]) => void) {
    this.connection.offReducer("stage_buff_desc", callback);
  }

  stageBuffTypeDesc(records: BuffTypeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageBuffTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_buff_type_desc", __argsBuffer, this.setCallReducerFlags.stageBuffTypeDescFlags);
  }

  onStageBuffTypeDesc(callback: (ctx: ReducerEventContext, records: BuffTypeDesc[]) => void) {
    this.connection.onReducer("stage_buff_type_desc", callback);
  }

  removeOnStageBuffTypeDesc(callback: (ctx: ReducerEventContext, records: BuffTypeDesc[]) => void) {
    this.connection.offReducer("stage_buff_type_desc", callback);
  }

  stageBuildingClaimDesc(records: BuildingClaimDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageBuildingClaimDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_building_claim_desc", __argsBuffer, this.setCallReducerFlags.stageBuildingClaimDescFlags);
  }

  onStageBuildingClaimDesc(callback: (ctx: ReducerEventContext, records: BuildingClaimDesc[]) => void) {
    this.connection.onReducer("stage_building_claim_desc", callback);
  }

  removeOnStageBuildingClaimDesc(callback: (ctx: ReducerEventContext, records: BuildingClaimDesc[]) => void) {
    this.connection.offReducer("stage_building_claim_desc", callback);
  }

  stageBuildingDesc(records: BuildingDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageBuildingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_building_desc", __argsBuffer, this.setCallReducerFlags.stageBuildingDescFlags);
  }

  onStageBuildingDesc(callback: (ctx: ReducerEventContext, records: BuildingDesc[]) => void) {
    this.connection.onReducer("stage_building_desc", callback);
  }

  removeOnStageBuildingDesc(callback: (ctx: ReducerEventContext, records: BuildingDesc[]) => void) {
    this.connection.offReducer("stage_building_desc", callback);
  }

  stageBuildingPortalDesc(records: BuildingPortalDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageBuildingPortalDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_building_portal_desc", __argsBuffer, this.setCallReducerFlags.stageBuildingPortalDescFlags);
  }

  onStageBuildingPortalDesc(callback: (ctx: ReducerEventContext, records: BuildingPortalDesc[]) => void) {
    this.connection.onReducer("stage_building_portal_desc", callback);
  }

  removeOnStageBuildingPortalDesc(callback: (ctx: ReducerEventContext, records: BuildingPortalDesc[]) => void) {
    this.connection.offReducer("stage_building_portal_desc", callback);
  }

  stageBuildingRepairsDesc(records: BuildingRepairsDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageBuildingRepairsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_building_repairs_desc", __argsBuffer, this.setCallReducerFlags.stageBuildingRepairsDescFlags);
  }

  onStageBuildingRepairsDesc(callback: (ctx: ReducerEventContext, records: BuildingRepairsDesc[]) => void) {
    this.connection.onReducer("stage_building_repairs_desc", callback);
  }

  removeOnStageBuildingRepairsDesc(callback: (ctx: ReducerEventContext, records: BuildingRepairsDesc[]) => void) {
    this.connection.offReducer("stage_building_repairs_desc", callback);
  }

  stageBuildingSpawnDesc(records: BuildingSpawnDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageBuildingSpawnDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_building_spawn_desc", __argsBuffer, this.setCallReducerFlags.stageBuildingSpawnDescFlags);
  }

  onStageBuildingSpawnDesc(callback: (ctx: ReducerEventContext, records: BuildingSpawnDesc[]) => void) {
    this.connection.onReducer("stage_building_spawn_desc", callback);
  }

  removeOnStageBuildingSpawnDesc(callback: (ctx: ReducerEventContext, records: BuildingSpawnDesc[]) => void) {
    this.connection.offReducer("stage_building_spawn_desc", callback);
  }

  stageBuildingTypeDesc(records: BuildingTypeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageBuildingTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_building_type_desc", __argsBuffer, this.setCallReducerFlags.stageBuildingTypeDescFlags);
  }

  onStageBuildingTypeDesc(callback: (ctx: ReducerEventContext, records: BuildingTypeDesc[]) => void) {
    this.connection.onReducer("stage_building_type_desc", callback);
  }

  removeOnStageBuildingTypeDesc(callback: (ctx: ReducerEventContext, records: BuildingTypeDesc[]) => void) {
    this.connection.offReducer("stage_building_type_desc", callback);
  }

  stageCargoDesc(records: CargoDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageCargoDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_cargo_desc", __argsBuffer, this.setCallReducerFlags.stageCargoDescFlags);
  }

  onStageCargoDesc(callback: (ctx: ReducerEventContext, records: CargoDesc[]) => void) {
    this.connection.onReducer("stage_cargo_desc", callback);
  }

  removeOnStageCargoDesc(callback: (ctx: ReducerEventContext, records: CargoDesc[]) => void) {
    this.connection.offReducer("stage_cargo_desc", callback);
  }

  stageCharacterStatDesc(records: CharacterStatDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageCharacterStatDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_character_stat_desc", __argsBuffer, this.setCallReducerFlags.stageCharacterStatDescFlags);
  }

  onStageCharacterStatDesc(callback: (ctx: ReducerEventContext, records: CharacterStatDesc[]) => void) {
    this.connection.onReducer("stage_character_stat_desc", callback);
  }

  removeOnStageCharacterStatDesc(callback: (ctx: ReducerEventContext, records: CharacterStatDesc[]) => void) {
    this.connection.offReducer("stage_character_stat_desc", callback);
  }

  stageChestRarityDesc(records: ChestRarityDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageChestRarityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_chest_rarity_desc", __argsBuffer, this.setCallReducerFlags.stageChestRarityDescFlags);
  }

  onStageChestRarityDesc(callback: (ctx: ReducerEventContext, records: ChestRarityDesc[]) => void) {
    this.connection.onReducer("stage_chest_rarity_desc", callback);
  }

  removeOnStageChestRarityDesc(callback: (ctx: ReducerEventContext, records: ChestRarityDesc[]) => void) {
    this.connection.offReducer("stage_chest_rarity_desc", callback);
  }

  stageClaimTechDesc(records: ClaimTechDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageClaimTechDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_claim_tech_desc", __argsBuffer, this.setCallReducerFlags.stageClaimTechDescFlags);
  }

  onStageClaimTechDesc(callback: (ctx: ReducerEventContext, records: ClaimTechDesc[]) => void) {
    this.connection.onReducer("stage_claim_tech_desc", callback);
  }

  removeOnStageClaimTechDesc(callback: (ctx: ReducerEventContext, records: ClaimTechDesc[]) => void) {
    this.connection.offReducer("stage_claim_tech_desc", callback);
  }

  stageClaimTileCost(records: ClaimTileCost[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageClaimTileCost.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_claim_tile_cost", __argsBuffer, this.setCallReducerFlags.stageClaimTileCostFlags);
  }

  onStageClaimTileCost(callback: (ctx: ReducerEventContext, records: ClaimTileCost[]) => void) {
    this.connection.onReducer("stage_claim_tile_cost", callback);
  }

  removeOnStageClaimTileCost(callback: (ctx: ReducerEventContext, records: ClaimTileCost[]) => void) {
    this.connection.offReducer("stage_claim_tile_cost", callback);
  }

  stageClimbRequirementDesc(records: ClimbRequirementDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageClimbRequirementDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_climb_requirement_desc", __argsBuffer, this.setCallReducerFlags.stageClimbRequirementDescFlags);
  }

  onStageClimbRequirementDesc(callback: (ctx: ReducerEventContext, records: ClimbRequirementDesc[]) => void) {
    this.connection.onReducer("stage_climb_requirement_desc", callback);
  }

  removeOnStageClimbRequirementDesc(callback: (ctx: ReducerEventContext, records: ClimbRequirementDesc[]) => void) {
    this.connection.offReducer("stage_climb_requirement_desc", callback);
  }

  stageClothingDesc(records: ClothingDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageClothingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_clothing_desc", __argsBuffer, this.setCallReducerFlags.stageClothingDescFlags);
  }

  onStageClothingDesc(callback: (ctx: ReducerEventContext, records: ClothingDesc[]) => void) {
    this.connection.onReducer("stage_clothing_desc", callback);
  }

  removeOnStageClothingDesc(callback: (ctx: ReducerEventContext, records: ClothingDesc[]) => void) {
    this.connection.offReducer("stage_clothing_desc", callback);
  }

  stageCollectibleDesc(records: CollectibleDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageCollectibleDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_collectible_desc", __argsBuffer, this.setCallReducerFlags.stageCollectibleDescFlags);
  }

  onStageCollectibleDesc(callback: (ctx: ReducerEventContext, records: CollectibleDesc[]) => void) {
    this.connection.onReducer("stage_collectible_desc", callback);
  }

  removeOnStageCollectibleDesc(callback: (ctx: ReducerEventContext, records: CollectibleDesc[]) => void) {
    this.connection.offReducer("stage_collectible_desc", callback);
  }

  stageCombatActionDesc(records: CombatActionDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageCombatActionDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_combat_action_desc", __argsBuffer, this.setCallReducerFlags.stageCombatActionDescFlags);
  }

  onStageCombatActionDesc(callback: (ctx: ReducerEventContext, records: CombatActionDesc[]) => void) {
    this.connection.onReducer("stage_combat_action_desc", callback);
  }

  removeOnStageCombatActionDesc(callback: (ctx: ReducerEventContext, records: CombatActionDesc[]) => void) {
    this.connection.offReducer("stage_combat_action_desc", callback);
  }

  stageConstructionRecipeDesc(records: ConstructionRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageConstructionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_construction_recipe_desc", __argsBuffer, this.setCallReducerFlags.stageConstructionRecipeDescFlags);
  }

  onStageConstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: ConstructionRecipeDesc[]) => void) {
    this.connection.onReducer("stage_construction_recipe_desc", callback);
  }

  removeOnStageConstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: ConstructionRecipeDesc[]) => void) {
    this.connection.offReducer("stage_construction_recipe_desc", callback);
  }

  stageCraftingRecipeDesc(records: CraftingRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageCraftingRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_crafting_recipe_desc", __argsBuffer, this.setCallReducerFlags.stageCraftingRecipeDescFlags);
  }

  onStageCraftingRecipeDesc(callback: (ctx: ReducerEventContext, records: CraftingRecipeDesc[]) => void) {
    this.connection.onReducer("stage_crafting_recipe_desc", callback);
  }

  removeOnStageCraftingRecipeDesc(callback: (ctx: ReducerEventContext, records: CraftingRecipeDesc[]) => void) {
    this.connection.offReducer("stage_crafting_recipe_desc", callback);
  }

  stageDeconstructionRecipeDesc(records: DeconstructionRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageDeconstructionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_deconstruction_recipe_desc", __argsBuffer, this.setCallReducerFlags.stageDeconstructionRecipeDescFlags);
  }

  onStageDeconstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: DeconstructionRecipeDesc[]) => void) {
    this.connection.onReducer("stage_deconstruction_recipe_desc", callback);
  }

  removeOnStageDeconstructionRecipeDesc(callback: (ctx: ReducerEventContext, records: DeconstructionRecipeDesc[]) => void) {
    this.connection.offReducer("stage_deconstruction_recipe_desc", callback);
  }

  stageDeployableDesc(records: DeployableDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageDeployableDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_deployable_desc", __argsBuffer, this.setCallReducerFlags.stageDeployableDescFlags);
  }

  onStageDeployableDesc(callback: (ctx: ReducerEventContext, records: DeployableDesc[]) => void) {
    this.connection.onReducer("stage_deployable_desc", callback);
  }

  removeOnStageDeployableDesc(callback: (ctx: ReducerEventContext, records: DeployableDesc[]) => void) {
    this.connection.offReducer("stage_deployable_desc", callback);
  }

  stageDistantVisibleEntityDesc(records: DistantVisibleEntityDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageDistantVisibleEntityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_distant_visible_entity_desc", __argsBuffer, this.setCallReducerFlags.stageDistantVisibleEntityDescFlags);
  }

  onStageDistantVisibleEntityDesc(callback: (ctx: ReducerEventContext, records: DistantVisibleEntityDesc[]) => void) {
    this.connection.onReducer("stage_distant_visible_entity_desc", callback);
  }

  removeOnStageDistantVisibleEntityDesc(callback: (ctx: ReducerEventContext, records: DistantVisibleEntityDesc[]) => void) {
    this.connection.offReducer("stage_distant_visible_entity_desc", callback);
  }

  stageElevatorDesc(records: ElevatorDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageElevatorDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_elevator_desc", __argsBuffer, this.setCallReducerFlags.stageElevatorDescFlags);
  }

  onStageElevatorDesc(callback: (ctx: ReducerEventContext, records: ElevatorDesc[]) => void) {
    this.connection.onReducer("stage_elevator_desc", callback);
  }

  removeOnStageElevatorDesc(callback: (ctx: ReducerEventContext, records: ElevatorDesc[]) => void) {
    this.connection.offReducer("stage_elevator_desc", callback);
  }

  stageEmoteDesc(records: EmoteDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageEmoteDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_emote_desc", __argsBuffer, this.setCallReducerFlags.stageEmoteDescFlags);
  }

  onStageEmoteDesc(callback: (ctx: ReducerEventContext, records: EmoteDesc[]) => void) {
    this.connection.onReducer("stage_emote_desc", callback);
  }

  removeOnStageEmoteDesc(callback: (ctx: ReducerEventContext, records: EmoteDesc[]) => void) {
    this.connection.offReducer("stage_emote_desc", callback);
  }

  stageEmpireColorsDesc(records: EmpireColorDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageEmpireColorsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_empire_colors_desc", __argsBuffer, this.setCallReducerFlags.stageEmpireColorsDescFlags);
  }

  onStageEmpireColorsDesc(callback: (ctx: ReducerEventContext, records: EmpireColorDesc[]) => void) {
    this.connection.onReducer("stage_empire_colors_desc", callback);
  }

  removeOnStageEmpireColorsDesc(callback: (ctx: ReducerEventContext, records: EmpireColorDesc[]) => void) {
    this.connection.offReducer("stage_empire_colors_desc", callback);
  }

  stageEmpireIconDesc(records: EmpireIconDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageEmpireIconDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_empire_icon_desc", __argsBuffer, this.setCallReducerFlags.stageEmpireIconDescFlags);
  }

  onStageEmpireIconDesc(callback: (ctx: ReducerEventContext, records: EmpireIconDesc[]) => void) {
    this.connection.onReducer("stage_empire_icon_desc", callback);
  }

  removeOnStageEmpireIconDesc(callback: (ctx: ReducerEventContext, records: EmpireIconDesc[]) => void) {
    this.connection.offReducer("stage_empire_icon_desc", callback);
  }

  stageEmpireNotificationDesc(records: EmpireNotificationDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageEmpireNotificationDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_empire_notification_desc", __argsBuffer, this.setCallReducerFlags.stageEmpireNotificationDescFlags);
  }

  onStageEmpireNotificationDesc(callback: (ctx: ReducerEventContext, records: EmpireNotificationDesc[]) => void) {
    this.connection.onReducer("stage_empire_notification_desc", callback);
  }

  removeOnStageEmpireNotificationDesc(callback: (ctx: ReducerEventContext, records: EmpireNotificationDesc[]) => void) {
    this.connection.offReducer("stage_empire_notification_desc", callback);
  }

  stageEmpireRankDesc(records: EmpireRankDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageEmpireRankDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_empire_rank_desc", __argsBuffer, this.setCallReducerFlags.stageEmpireRankDescFlags);
  }

  onStageEmpireRankDesc(callback: (ctx: ReducerEventContext, records: EmpireRankDesc[]) => void) {
    this.connection.onReducer("stage_empire_rank_desc", callback);
  }

  removeOnStageEmpireRankDesc(callback: (ctx: ReducerEventContext, records: EmpireRankDesc[]) => void) {
    this.connection.offReducer("stage_empire_rank_desc", callback);
  }

  stageEmpireSuppliesDesc(records: EmpireSuppliesDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageEmpireSuppliesDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_empire_supplies_desc", __argsBuffer, this.setCallReducerFlags.stageEmpireSuppliesDescFlags);
  }

  onStageEmpireSuppliesDesc(callback: (ctx: ReducerEventContext, records: EmpireSuppliesDesc[]) => void) {
    this.connection.onReducer("stage_empire_supplies_desc", callback);
  }

  removeOnStageEmpireSuppliesDesc(callback: (ctx: ReducerEventContext, records: EmpireSuppliesDesc[]) => void) {
    this.connection.offReducer("stage_empire_supplies_desc", callback);
  }

  stageEmpireTerritoryDesc(records: EmpireTerritoryDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageEmpireTerritoryDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_empire_territory_desc", __argsBuffer, this.setCallReducerFlags.stageEmpireTerritoryDescFlags);
  }

  onStageEmpireTerritoryDesc(callback: (ctx: ReducerEventContext, records: EmpireTerritoryDesc[]) => void) {
    this.connection.onReducer("stage_empire_territory_desc", callback);
  }

  removeOnStageEmpireTerritoryDesc(callback: (ctx: ReducerEventContext, records: EmpireTerritoryDesc[]) => void) {
    this.connection.offReducer("stage_empire_territory_desc", callback);
  }

  stageEnemyAiParamsDesc(records: EnemyAiParamsDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageEnemyAiParamsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_enemy_ai_params_desc", __argsBuffer, this.setCallReducerFlags.stageEnemyAiParamsDescFlags);
  }

  onStageEnemyAiParamsDesc(callback: (ctx: ReducerEventContext, records: EnemyAiParamsDesc[]) => void) {
    this.connection.onReducer("stage_enemy_ai_params_desc", callback);
  }

  removeOnStageEnemyAiParamsDesc(callback: (ctx: ReducerEventContext, records: EnemyAiParamsDesc[]) => void) {
    this.connection.offReducer("stage_enemy_ai_params_desc", callback);
  }

  stageEnemyDesc(records: EnemyDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageEnemyDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_enemy_desc", __argsBuffer, this.setCallReducerFlags.stageEnemyDescFlags);
  }

  onStageEnemyDesc(callback: (ctx: ReducerEventContext, records: EnemyDesc[]) => void) {
    this.connection.onReducer("stage_enemy_desc", callback);
  }

  removeOnStageEnemyDesc(callback: (ctx: ReducerEventContext, records: EnemyDesc[]) => void) {
    this.connection.offReducer("stage_enemy_desc", callback);
  }

  stageEnvironmentDebuffDesc(records: EnvironmentDebuffDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageEnvironmentDebuffDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_environment_debuff_desc", __argsBuffer, this.setCallReducerFlags.stageEnvironmentDebuffDescFlags);
  }

  onStageEnvironmentDebuffDesc(callback: (ctx: ReducerEventContext, records: EnvironmentDebuffDesc[]) => void) {
    this.connection.onReducer("stage_environment_debuff_desc", callback);
  }

  removeOnStageEnvironmentDebuffDesc(callback: (ctx: ReducerEventContext, records: EnvironmentDebuffDesc[]) => void) {
    this.connection.offReducer("stage_environment_debuff_desc", callback);
  }

  stageEquipmentDesc(records: EquipmentDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageEquipmentDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_equipment_desc", __argsBuffer, this.setCallReducerFlags.stageEquipmentDescFlags);
  }

  onStageEquipmentDesc(callback: (ctx: ReducerEventContext, records: EquipmentDesc[]) => void) {
    this.connection.onReducer("stage_equipment_desc", callback);
  }

  removeOnStageEquipmentDesc(callback: (ctx: ReducerEventContext, records: EquipmentDesc[]) => void) {
    this.connection.offReducer("stage_equipment_desc", callback);
  }

  stageExtractionRecipeDesc(records: ExtractionRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageExtractionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_extraction_recipe_desc", __argsBuffer, this.setCallReducerFlags.stageExtractionRecipeDescFlags);
  }

  onStageExtractionRecipeDesc(callback: (ctx: ReducerEventContext, records: ExtractionRecipeDesc[]) => void) {
    this.connection.onReducer("stage_extraction_recipe_desc", callback);
  }

  removeOnStageExtractionRecipeDesc(callback: (ctx: ReducerEventContext, records: ExtractionRecipeDesc[]) => void) {
    this.connection.offReducer("stage_extraction_recipe_desc", callback);
  }

  stageFoodDesc(records: FoodDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageFoodDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_food_desc", __argsBuffer, this.setCallReducerFlags.stageFoodDescFlags);
  }

  onStageFoodDesc(callback: (ctx: ReducerEventContext, records: FoodDesc[]) => void) {
    this.connection.onReducer("stage_food_desc", callback);
  }

  removeOnStageFoodDesc(callback: (ctx: ReducerEventContext, records: FoodDesc[]) => void) {
    this.connection.offReducer("stage_food_desc", callback);
  }

  stageGateDesc(records: GateDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageGateDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_gate_desc", __argsBuffer, this.setCallReducerFlags.stageGateDescFlags);
  }

  onStageGateDesc(callback: (ctx: ReducerEventContext, records: GateDesc[]) => void) {
    this.connection.onReducer("stage_gate_desc", callback);
  }

  removeOnStageGateDesc(callback: (ctx: ReducerEventContext, records: GateDesc[]) => void) {
    this.connection.offReducer("stage_gate_desc", callback);
  }

  stageHexiteExchangeEntryDesc(records: HexiteExchangeEntryDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageHexiteExchangeEntryDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_hexite_exchange_entry_desc", __argsBuffer, this.setCallReducerFlags.stageHexiteExchangeEntryDescFlags);
  }

  onStageHexiteExchangeEntryDesc(callback: (ctx: ReducerEventContext, records: HexiteExchangeEntryDesc[]) => void) {
    this.connection.onReducer("stage_hexite_exchange_entry_desc", callback);
  }

  removeOnStageHexiteExchangeEntryDesc(callback: (ctx: ReducerEventContext, records: HexiteExchangeEntryDesc[]) => void) {
    this.connection.offReducer("stage_hexite_exchange_entry_desc", callback);
  }

  stageInteriorEnvironmentDesc(records: InteriorEnvironmentDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageInteriorEnvironmentDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_interior_environment_desc", __argsBuffer, this.setCallReducerFlags.stageInteriorEnvironmentDescFlags);
  }

  onStageInteriorEnvironmentDesc(callback: (ctx: ReducerEventContext, records: InteriorEnvironmentDesc[]) => void) {
    this.connection.onReducer("stage_interior_environment_desc", callback);
  }

  removeOnStageInteriorEnvironmentDesc(callback: (ctx: ReducerEventContext, records: InteriorEnvironmentDesc[]) => void) {
    this.connection.offReducer("stage_interior_environment_desc", callback);
  }

  stageInteriorInstanceDesc(records: InteriorInstanceDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageInteriorInstanceDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_interior_instance_desc", __argsBuffer, this.setCallReducerFlags.stageInteriorInstanceDescFlags);
  }

  onStageInteriorInstanceDesc(callback: (ctx: ReducerEventContext, records: InteriorInstanceDesc[]) => void) {
    this.connection.onReducer("stage_interior_instance_desc", callback);
  }

  removeOnStageInteriorInstanceDesc(callback: (ctx: ReducerEventContext, records: InteriorInstanceDesc[]) => void) {
    this.connection.offReducer("stage_interior_instance_desc", callback);
  }

  stageInteriorNetworkDesc(records: InteriorNetworkDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageInteriorNetworkDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_interior_network_desc", __argsBuffer, this.setCallReducerFlags.stageInteriorNetworkDescFlags);
  }

  onStageInteriorNetworkDesc(callback: (ctx: ReducerEventContext, records: InteriorNetworkDesc[]) => void) {
    this.connection.onReducer("stage_interior_network_desc", callback);
  }

  removeOnStageInteriorNetworkDesc(callback: (ctx: ReducerEventContext, records: InteriorNetworkDesc[]) => void) {
    this.connection.offReducer("stage_interior_network_desc", callback);
  }

  stageInteriorPortalConnectionsDesc(records: InteriorPortalConnectionsDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageInteriorPortalConnectionsDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_interior_portal_connections_desc", __argsBuffer, this.setCallReducerFlags.stageInteriorPortalConnectionsDescFlags);
  }

  onStageInteriorPortalConnectionsDesc(callback: (ctx: ReducerEventContext, records: InteriorPortalConnectionsDesc[]) => void) {
    this.connection.onReducer("stage_interior_portal_connections_desc", callback);
  }

  removeOnStageInteriorPortalConnectionsDesc(callback: (ctx: ReducerEventContext, records: InteriorPortalConnectionsDesc[]) => void) {
    this.connection.offReducer("stage_interior_portal_connections_desc", callback);
  }

  stageInteriorShapeDesc(records: InteriorShapeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageInteriorShapeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_interior_shape_desc", __argsBuffer, this.setCallReducerFlags.stageInteriorShapeDescFlags);
  }

  onStageInteriorShapeDesc(callback: (ctx: ReducerEventContext, records: InteriorShapeDesc[]) => void) {
    this.connection.onReducer("stage_interior_shape_desc", callback);
  }

  removeOnStageInteriorShapeDesc(callback: (ctx: ReducerEventContext, records: InteriorShapeDesc[]) => void) {
    this.connection.offReducer("stage_interior_shape_desc", callback);
  }

  stageInteriorSpawnDesc(records: InteriorSpawnDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageInteriorSpawnDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_interior_spawn_desc", __argsBuffer, this.setCallReducerFlags.stageInteriorSpawnDescFlags);
  }

  onStageInteriorSpawnDesc(callback: (ctx: ReducerEventContext, records: InteriorSpawnDesc[]) => void) {
    this.connection.onReducer("stage_interior_spawn_desc", callback);
  }

  removeOnStageInteriorSpawnDesc(callback: (ctx: ReducerEventContext, records: InteriorSpawnDesc[]) => void) {
    this.connection.offReducer("stage_interior_spawn_desc", callback);
  }

  stageItemConversionRecipeDesc(records: ItemConversionRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageItemConversionRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_item_conversion_recipe_desc", __argsBuffer, this.setCallReducerFlags.stageItemConversionRecipeDescFlags);
  }

  onStageItemConversionRecipeDesc(callback: (ctx: ReducerEventContext, records: ItemConversionRecipeDesc[]) => void) {
    this.connection.onReducer("stage_item_conversion_recipe_desc", callback);
  }

  removeOnStageItemConversionRecipeDesc(callback: (ctx: ReducerEventContext, records: ItemConversionRecipeDesc[]) => void) {
    this.connection.offReducer("stage_item_conversion_recipe_desc", callback);
  }

  stageItemDesc(records: ItemDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageItemDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_item_desc", __argsBuffer, this.setCallReducerFlags.stageItemDescFlags);
  }

  onStageItemDesc(callback: (ctx: ReducerEventContext, records: ItemDesc[]) => void) {
    this.connection.onReducer("stage_item_desc", callback);
  }

  removeOnStageItemDesc(callback: (ctx: ReducerEventContext, records: ItemDesc[]) => void) {
    this.connection.offReducer("stage_item_desc", callback);
  }

  stageItemListDesc(records: ItemListDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageItemListDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_item_list_desc", __argsBuffer, this.setCallReducerFlags.stageItemListDescFlags);
  }

  onStageItemListDesc(callback: (ctx: ReducerEventContext, records: ItemListDesc[]) => void) {
    this.connection.onReducer("stage_item_list_desc", callback);
  }

  removeOnStageItemListDesc(callback: (ctx: ReducerEventContext, records: ItemListDesc[]) => void) {
    this.connection.offReducer("stage_item_list_desc", callback);
  }

  stageKnowledgeScrollDesc(records: KnowledgeScrollDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageKnowledgeScrollDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_knowledge_scroll_desc", __argsBuffer, this.setCallReducerFlags.stageKnowledgeScrollDescFlags);
  }

  onStageKnowledgeScrollDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollDesc[]) => void) {
    this.connection.onReducer("stage_knowledge_scroll_desc", callback);
  }

  removeOnStageKnowledgeScrollDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollDesc[]) => void) {
    this.connection.offReducer("stage_knowledge_scroll_desc", callback);
  }

  stageKnowledgeScrollTypeDesc(records: KnowledgeScrollTypeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageKnowledgeScrollTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_knowledge_scroll_type_desc", __argsBuffer, this.setCallReducerFlags.stageKnowledgeScrollTypeDescFlags);
  }

  onStageKnowledgeScrollTypeDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollTypeDesc[]) => void) {
    this.connection.onReducer("stage_knowledge_scroll_type_desc", callback);
  }

  removeOnStageKnowledgeScrollTypeDesc(callback: (ctx: ReducerEventContext, records: KnowledgeScrollTypeDesc[]) => void) {
    this.connection.offReducer("stage_knowledge_scroll_type_desc", callback);
  }

  stageKnowledgeStatModifierDesc(records: KnowledgeStatModifierDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageKnowledgeStatModifierDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_knowledge_stat_modifier_desc", __argsBuffer, this.setCallReducerFlags.stageKnowledgeStatModifierDescFlags);
  }

  onStageKnowledgeStatModifierDesc(callback: (ctx: ReducerEventContext, records: KnowledgeStatModifierDesc[]) => void) {
    this.connection.onReducer("stage_knowledge_stat_modifier_desc", callback);
  }

  removeOnStageKnowledgeStatModifierDesc(callback: (ctx: ReducerEventContext, records: KnowledgeStatModifierDesc[]) => void) {
    this.connection.offReducer("stage_knowledge_stat_modifier_desc", callback);
  }

  stageLootChestDesc(records: LootChestDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageLootChestDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_loot_chest_desc", __argsBuffer, this.setCallReducerFlags.stageLootChestDescFlags);
  }

  onStageLootChestDesc(callback: (ctx: ReducerEventContext, records: LootChestDesc[]) => void) {
    this.connection.onReducer("stage_loot_chest_desc", callback);
  }

  removeOnStageLootChestDesc(callback: (ctx: ReducerEventContext, records: LootChestDesc[]) => void) {
    this.connection.offReducer("stage_loot_chest_desc", callback);
  }

  stageLootRarityDesc(records: LootRarityDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageLootRarityDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_loot_rarity_desc", __argsBuffer, this.setCallReducerFlags.stageLootRarityDescFlags);
  }

  onStageLootRarityDesc(callback: (ctx: ReducerEventContext, records: LootRarityDesc[]) => void) {
    this.connection.onReducer("stage_loot_rarity_desc", callback);
  }

  removeOnStageLootRarityDesc(callback: (ctx: ReducerEventContext, records: LootRarityDesc[]) => void) {
    this.connection.offReducer("stage_loot_rarity_desc", callback);
  }

  stageLootTableDesc(records: LootTableDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageLootTableDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_loot_table_desc", __argsBuffer, this.setCallReducerFlags.stageLootTableDescFlags);
  }

  onStageLootTableDesc(callback: (ctx: ReducerEventContext, records: LootTableDesc[]) => void) {
    this.connection.onReducer("stage_loot_table_desc", callback);
  }

  removeOnStageLootTableDesc(callback: (ctx: ReducerEventContext, records: LootTableDesc[]) => void) {
    this.connection.offReducer("stage_loot_table_desc", callback);
  }

  stageNpcDesc(records: NpcDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageNpcDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_npc_desc", __argsBuffer, this.setCallReducerFlags.stageNpcDescFlags);
  }

  onStageNpcDesc(callback: (ctx: ReducerEventContext, records: NpcDesc[]) => void) {
    this.connection.onReducer("stage_npc_desc", callback);
  }

  removeOnStageNpcDesc(callback: (ctx: ReducerEventContext, records: NpcDesc[]) => void) {
    this.connection.offReducer("stage_npc_desc", callback);
  }

  stageOnboardingRewardDesc(records: OnboardingRewardDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageOnboardingRewardDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_onboarding_reward_desc", __argsBuffer, this.setCallReducerFlags.stageOnboardingRewardDescFlags);
  }

  onStageOnboardingRewardDesc(callback: (ctx: ReducerEventContext, records: OnboardingRewardDesc[]) => void) {
    this.connection.onReducer("stage_onboarding_reward_desc", callback);
  }

  removeOnStageOnboardingRewardDesc(callback: (ctx: ReducerEventContext, records: OnboardingRewardDesc[]) => void) {
    this.connection.offReducer("stage_onboarding_reward_desc", callback);
  }

  stageParametersDesc(records: ParametersDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageParametersDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_parameters_desc", __argsBuffer, this.setCallReducerFlags.stageParametersDescFlags);
  }

  onStageParametersDesc(callback: (ctx: ReducerEventContext, records: ParametersDesc[]) => void) {
    this.connection.onReducer("stage_parameters_desc", callback);
  }

  removeOnStageParametersDesc(callback: (ctx: ReducerEventContext, records: ParametersDesc[]) => void) {
    this.connection.offReducer("stage_parameters_desc", callback);
  }

  stagePathfindingDesc(records: PathfindingDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StagePathfindingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_pathfinding_desc", __argsBuffer, this.setCallReducerFlags.stagePathfindingDescFlags);
  }

  onStagePathfindingDesc(callback: (ctx: ReducerEventContext, records: PathfindingDesc[]) => void) {
    this.connection.onReducer("stage_pathfinding_desc", callback);
  }

  removeOnStagePathfindingDesc(callback: (ctx: ReducerEventContext, records: PathfindingDesc[]) => void) {
    this.connection.offReducer("stage_pathfinding_desc", callback);
  }

  stagePavingTileDesc(records: PavingTileDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StagePavingTileDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_paving_tile_desc", __argsBuffer, this.setCallReducerFlags.stagePavingTileDescFlags);
  }

  onStagePavingTileDesc(callback: (ctx: ReducerEventContext, records: PavingTileDesc[]) => void) {
    this.connection.onReducer("stage_paving_tile_desc", callback);
  }

  removeOnStagePavingTileDesc(callback: (ctx: ReducerEventContext, records: PavingTileDesc[]) => void) {
    this.connection.offReducer("stage_paving_tile_desc", callback);
  }

  stagePillarShapingDesc(records: PillarShapingDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StagePillarShapingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_pillar_shaping_desc", __argsBuffer, this.setCallReducerFlags.stagePillarShapingDescFlags);
  }

  onStagePillarShapingDesc(callback: (ctx: ReducerEventContext, records: PillarShapingDesc[]) => void) {
    this.connection.onReducer("stage_pillar_shaping_desc", callback);
  }

  removeOnStagePillarShapingDesc(callback: (ctx: ReducerEventContext, records: PillarShapingDesc[]) => void) {
    this.connection.offReducer("stage_pillar_shaping_desc", callback);
  }

  stagePlayerActionDesc(records: PlayerActionDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StagePlayerActionDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_player_action_desc", __argsBuffer, this.setCallReducerFlags.stagePlayerActionDescFlags);
  }

  onStagePlayerActionDesc(callback: (ctx: ReducerEventContext, records: PlayerActionDesc[]) => void) {
    this.connection.onReducer("stage_player_action_desc", callback);
  }

  removeOnStagePlayerActionDesc(callback: (ctx: ReducerEventContext, records: PlayerActionDesc[]) => void) {
    this.connection.offReducer("stage_player_action_desc", callback);
  }

  stagePlayerHousingDesc(records: PlayerHousingDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StagePlayerHousingDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_player_housing_desc", __argsBuffer, this.setCallReducerFlags.stagePlayerHousingDescFlags);
  }

  onStagePlayerHousingDesc(callback: (ctx: ReducerEventContext, records: PlayerHousingDesc[]) => void) {
    this.connection.onReducer("stage_player_housing_desc", callback);
  }

  removeOnStagePlayerHousingDesc(callback: (ctx: ReducerEventContext, records: PlayerHousingDesc[]) => void) {
    this.connection.offReducer("stage_player_housing_desc", callback);
  }

  stagePrivateParametersDesc(records: PrivateParametersDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StagePrivateParametersDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_private_parameters_desc", __argsBuffer, this.setCallReducerFlags.stagePrivateParametersDescFlags);
  }

  onStagePrivateParametersDesc(callback: (ctx: ReducerEventContext, records: PrivateParametersDesc[]) => void) {
    this.connection.onReducer("stage_private_parameters_desc", callback);
  }

  removeOnStagePrivateParametersDesc(callback: (ctx: ReducerEventContext, records: PrivateParametersDesc[]) => void) {
    this.connection.offReducer("stage_private_parameters_desc", callback);
  }

  stageReservedNameDesc(records: ReservedNameDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageReservedNameDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_reserved_name_desc", __argsBuffer, this.setCallReducerFlags.stageReservedNameDescFlags);
  }

  onStageReservedNameDesc(callback: (ctx: ReducerEventContext, records: ReservedNameDesc[]) => void) {
    this.connection.onReducer("stage_reserved_name_desc", callback);
  }

  removeOnStageReservedNameDesc(callback: (ctx: ReducerEventContext, records: ReservedNameDesc[]) => void) {
    this.connection.offReducer("stage_reserved_name_desc", callback);
  }

  stageResourceClumpDesc(records: ResourceClumpDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageResourceClumpDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_resource_clump_desc", __argsBuffer, this.setCallReducerFlags.stageResourceClumpDescFlags);
  }

  onStageResourceClumpDesc(callback: (ctx: ReducerEventContext, records: ResourceClumpDesc[]) => void) {
    this.connection.onReducer("stage_resource_clump_desc", callback);
  }

  removeOnStageResourceClumpDesc(callback: (ctx: ReducerEventContext, records: ResourceClumpDesc[]) => void) {
    this.connection.offReducer("stage_resource_clump_desc", callback);
  }

  stageResourceDesc(records: ResourceDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageResourceDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_resource_desc", __argsBuffer, this.setCallReducerFlags.stageResourceDescFlags);
  }

  onStageResourceDesc(callback: (ctx: ReducerEventContext, records: ResourceDesc[]) => void) {
    this.connection.onReducer("stage_resource_desc", callback);
  }

  removeOnStageResourceDesc(callback: (ctx: ReducerEventContext, records: ResourceDesc[]) => void) {
    this.connection.offReducer("stage_resource_desc", callback);
  }

  stageResourceGrowthRecipeDesc(records: ResourceGrowthRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageResourceGrowthRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_resource_growth_recipe_desc", __argsBuffer, this.setCallReducerFlags.stageResourceGrowthRecipeDescFlags);
  }

  onStageResourceGrowthRecipeDesc(callback: (ctx: ReducerEventContext, records: ResourceGrowthRecipeDesc[]) => void) {
    this.connection.onReducer("stage_resource_growth_recipe_desc", callback);
  }

  removeOnStageResourceGrowthRecipeDesc(callback: (ctx: ReducerEventContext, records: ResourceGrowthRecipeDesc[]) => void) {
    this.connection.offReducer("stage_resource_growth_recipe_desc", callback);
  }

  stageResourcePlacementRecipeDesc(records: ResourcePlacementRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageResourcePlacementRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_resource_placement_recipe_desc", __argsBuffer, this.setCallReducerFlags.stageResourcePlacementRecipeDescFlags);
  }

  onStageResourcePlacementRecipeDesc(callback: (ctx: ReducerEventContext, records: ResourcePlacementRecipeDesc[]) => void) {
    this.connection.onReducer("stage_resource_placement_recipe_desc", callback);
  }

  removeOnStageResourcePlacementRecipeDesc(callback: (ctx: ReducerEventContext, records: ResourcePlacementRecipeDesc[]) => void) {
    this.connection.offReducer("stage_resource_placement_recipe_desc", callback);
  }

  stageSecondaryKnowledgeDesc(records: SecondaryKnowledgeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageSecondaryKnowledgeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_secondary_knowledge_desc", __argsBuffer, this.setCallReducerFlags.stageSecondaryKnowledgeDescFlags);
  }

  onStageSecondaryKnowledgeDesc(callback: (ctx: ReducerEventContext, records: SecondaryKnowledgeDesc[]) => void) {
    this.connection.onReducer("stage_secondary_knowledge_desc", callback);
  }

  removeOnStageSecondaryKnowledgeDesc(callback: (ctx: ReducerEventContext, records: SecondaryKnowledgeDesc[]) => void) {
    this.connection.offReducer("stage_secondary_knowledge_desc", callback);
  }

  stageSkillDesc(records: SkillDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageSkillDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_skill_desc", __argsBuffer, this.setCallReducerFlags.stageSkillDescFlags);
  }

  onStageSkillDesc(callback: (ctx: ReducerEventContext, records: SkillDesc[]) => void) {
    this.connection.onReducer("stage_skill_desc", callback);
  }

  removeOnStageSkillDesc(callback: (ctx: ReducerEventContext, records: SkillDesc[]) => void) {
    this.connection.offReducer("stage_skill_desc", callback);
  }

  stageTargetingMatrixDesc(records: TargetingMatrixDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageTargetingMatrixDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_targeting_matrix_desc", __argsBuffer, this.setCallReducerFlags.stageTargetingMatrixDescFlags);
  }

  onStageTargetingMatrixDesc(callback: (ctx: ReducerEventContext, records: TargetingMatrixDesc[]) => void) {
    this.connection.onReducer("stage_targeting_matrix_desc", callback);
  }

  removeOnStageTargetingMatrixDesc(callback: (ctx: ReducerEventContext, records: TargetingMatrixDesc[]) => void) {
    this.connection.offReducer("stage_targeting_matrix_desc", callback);
  }

  stageTeleportItemDesc(records: TeleportItemDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageTeleportItemDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_teleport_item_desc", __argsBuffer, this.setCallReducerFlags.stageTeleportItemDescFlags);
  }

  onStageTeleportItemDesc(callback: (ctx: ReducerEventContext, records: TeleportItemDesc[]) => void) {
    this.connection.onReducer("stage_teleport_item_desc", callback);
  }

  removeOnStageTeleportItemDesc(callback: (ctx: ReducerEventContext, records: TeleportItemDesc[]) => void) {
    this.connection.offReducer("stage_teleport_item_desc", callback);
  }

  stageTerraformRecipeDesc(records: TerraformRecipeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageTerraformRecipeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_terraform_recipe_desc", __argsBuffer, this.setCallReducerFlags.stageTerraformRecipeDescFlags);
  }

  onStageTerraformRecipeDesc(callback: (ctx: ReducerEventContext, records: TerraformRecipeDesc[]) => void) {
    this.connection.onReducer("stage_terraform_recipe_desc", callback);
  }

  removeOnStageTerraformRecipeDesc(callback: (ctx: ReducerEventContext, records: TerraformRecipeDesc[]) => void) {
    this.connection.offReducer("stage_terraform_recipe_desc", callback);
  }

  stageToolDesc(records: ToolDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageToolDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_tool_desc", __argsBuffer, this.setCallReducerFlags.stageToolDescFlags);
  }

  onStageToolDesc(callback: (ctx: ReducerEventContext, records: ToolDesc[]) => void) {
    this.connection.onReducer("stage_tool_desc", callback);
  }

  removeOnStageToolDesc(callback: (ctx: ReducerEventContext, records: ToolDesc[]) => void) {
    this.connection.offReducer("stage_tool_desc", callback);
  }

  stageToolTypeDesc(records: ToolTypeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageToolTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_tool_type_desc", __argsBuffer, this.setCallReducerFlags.stageToolTypeDescFlags);
  }

  onStageToolTypeDesc(callback: (ctx: ReducerEventContext, records: ToolTypeDesc[]) => void) {
    this.connection.onReducer("stage_tool_type_desc", callback);
  }

  removeOnStageToolTypeDesc(callback: (ctx: ReducerEventContext, records: ToolTypeDesc[]) => void) {
    this.connection.offReducer("stage_tool_type_desc", callback);
  }

  stageTravelerTaskDesc(records: TravelerTaskDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageTravelerTaskDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_traveler_task_desc", __argsBuffer, this.setCallReducerFlags.stageTravelerTaskDescFlags);
  }

  onStageTravelerTaskDesc(callback: (ctx: ReducerEventContext, records: TravelerTaskDesc[]) => void) {
    this.connection.onReducer("stage_traveler_task_desc", callback);
  }

  removeOnStageTravelerTaskDesc(callback: (ctx: ReducerEventContext, records: TravelerTaskDesc[]) => void) {
    this.connection.offReducer("stage_traveler_task_desc", callback);
  }

  stageTravelerTradeOrderDesc(records: TravelerTradeOrderDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageTravelerTradeOrderDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_traveler_trade_order_desc", __argsBuffer, this.setCallReducerFlags.stageTravelerTradeOrderDescFlags);
  }

  onStageTravelerTradeOrderDesc(callback: (ctx: ReducerEventContext, records: TravelerTradeOrderDesc[]) => void) {
    this.connection.onReducer("stage_traveler_trade_order_desc", callback);
  }

  removeOnStageTravelerTradeOrderDesc(callback: (ctx: ReducerEventContext, records: TravelerTradeOrderDesc[]) => void) {
    this.connection.offReducer("stage_traveler_trade_order_desc", callback);
  }

  stageWallDesc(records: WallDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageWallDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_wall_desc", __argsBuffer, this.setCallReducerFlags.stageWallDescFlags);
  }

  onStageWallDesc(callback: (ctx: ReducerEventContext, records: WallDesc[]) => void) {
    this.connection.onReducer("stage_wall_desc", callback);
  }

  removeOnStageWallDesc(callback: (ctx: ReducerEventContext, records: WallDesc[]) => void) {
    this.connection.offReducer("stage_wall_desc", callback);
  }

  stageWeaponDesc(records: WeaponDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageWeaponDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_weapon_desc", __argsBuffer, this.setCallReducerFlags.stageWeaponDescFlags);
  }

  onStageWeaponDesc(callback: (ctx: ReducerEventContext, records: WeaponDesc[]) => void) {
    this.connection.onReducer("stage_weapon_desc", callback);
  }

  removeOnStageWeaponDesc(callback: (ctx: ReducerEventContext, records: WeaponDesc[]) => void) {
    this.connection.offReducer("stage_weapon_desc", callback);
  }

  stageWeaponTypeDesc(records: WeaponTypeDesc[]) {
    const __args = { records };
    let __writer = new BinaryWriter(1024);
    StageWeaponTypeDesc.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("stage_weapon_type_desc", __argsBuffer, this.setCallReducerFlags.stageWeaponTypeDescFlags);
  }

  onStageWeaponTypeDesc(callback: (ctx: ReducerEventContext, records: WeaponTypeDesc[]) => void) {
    this.connection.onReducer("stage_weapon_type_desc", callback);
  }

  removeOnStageWeaponTypeDesc(callback: (ctx: ReducerEventContext, records: WeaponTypeDesc[]) => void) {
    this.connection.offReducer("stage_weapon_type_desc", callback);
  }

  startAgents() {
    this.connection.callReducer("start_agents", new Uint8Array(0), this.setCallReducerFlags.startAgentsFlags);
  }

  onStartAgents(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("start_agents", callback);
  }

  removeOnStartAgents(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("start_agents", callback);
  }

  startGeneratingWorld(worldWidth: number, worldHeight: number, regionIndex: number, regionCount: number) {
    const __args = { worldWidth, worldHeight, regionIndex, regionCount };
    let __writer = new BinaryWriter(1024);
    StartGeneratingWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("start_generating_world", __argsBuffer, this.setCallReducerFlags.startGeneratingWorldFlags);
  }

  onStartGeneratingWorld(callback: (ctx: ReducerEventContext, worldWidth: number, worldHeight: number, regionIndex: number, regionCount: number) => void) {
    this.connection.onReducer("start_generating_world", callback);
  }

  removeOnStartGeneratingWorld(callback: (ctx: ReducerEventContext, worldWidth: number, worldHeight: number, regionIndex: number, regionCount: number) => void) {
    this.connection.offReducer("start_generating_world", callback);
  }

  startOnboardingQuest(id: number) {
    const __args = { id };
    let __writer = new BinaryWriter(1024);
    StartOnboardingQuest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("start_onboarding_quest", __argsBuffer, this.setCallReducerFlags.startOnboardingQuestFlags);
  }

  onStartOnboardingQuest(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.onReducer("start_onboarding_quest", callback);
  }

  removeOnStartOnboardingQuest(callback: (ctx: ReducerEventContext, id: number) => void) {
    this.connection.offReducer("start_onboarding_quest", callback);
  }

  starvingAgentLoop(timer: StarvingLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    StarvingAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("starving_agent_loop", __argsBuffer, this.setCallReducerFlags.starvingAgentLoopFlags);
  }

  onStarvingAgentLoop(callback: (ctx: ReducerEventContext, timer: StarvingLoopTimer) => void) {
    this.connection.onReducer("starving_agent_loop", callback);
  }

  removeOnStarvingAgentLoop(callback: (ctx: ReducerEventContext, timer: StarvingLoopTimer) => void) {
    this.connection.offReducer("starving_agent_loop", callback);
  }

  stopAgents() {
    this.connection.callReducer("stop_agents", new Uint8Array(0), this.setCallReducerFlags.stopAgentsFlags);
  }

  onStopAgents(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("stop_agents", callback);
  }

  removeOnStopAgents(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("stop_agents", callback);
  }

  synchronizeTime(clientTime: number) {
    const __args = { clientTime };
    let __writer = new BinaryWriter(1024);
    SynchronizeTime.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("synchronize_time", __argsBuffer, this.setCallReducerFlags.synchronizeTimeFlags);
  }

  onSynchronizeTime(callback: (ctx: ReducerEventContext, clientTime: number) => void) {
    this.connection.onReducer("synchronize_time", callback);
  }

  removeOnSynchronizeTime(callback: (ctx: ReducerEventContext, clientTime: number) => void) {
    this.connection.offReducer("synchronize_time", callback);
  }

  targetUpdate(request: TargetUpdateRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TargetUpdate.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("target_update", __argsBuffer, this.setCallReducerFlags.targetUpdateFlags);
  }

  onTargetUpdate(callback: (ctx: ReducerEventContext, request: TargetUpdateRequest) => void) {
    this.connection.onReducer("target_update", callback);
  }

  removeOnTargetUpdate(callback: (ctx: ReducerEventContext, request: TargetUpdateRequest) => void) {
    this.connection.offReducer("target_update", callback);
  }

  teleportationEnergyRegenAgentLoop(timer: TeleportationEnergyRegenLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    TeleportationEnergyRegenAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("teleportation_energy_regen_agent_loop", __argsBuffer, this.setCallReducerFlags.teleportationEnergyRegenAgentLoopFlags);
  }

  onTeleportationEnergyRegenAgentLoop(callback: (ctx: ReducerEventContext, timer: TeleportationEnergyRegenLoopTimer) => void) {
    this.connection.onReducer("teleportation_energy_regen_agent_loop", callback);
  }

  removeOnTeleportationEnergyRegenAgentLoop(callback: (ctx: ReducerEventContext, timer: TeleportationEnergyRegenLoopTimer) => void) {
    this.connection.offReducer("teleportation_energy_regen_agent_loop", callback);
  }

  terraform(request: PlayerTerraformRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    Terraform.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("terraform", __argsBuffer, this.setCallReducerFlags.terraformFlags);
  }

  onTerraform(callback: (ctx: ReducerEventContext, request: PlayerTerraformRequest) => void) {
    this.connection.onReducer("terraform", callback);
  }

  removeOnTerraform(callback: (ctx: ReducerEventContext, request: PlayerTerraformRequest) => void) {
    this.connection.offReducer("terraform", callback);
  }

  terraformCancel(request: PlayerTerraformCancelRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TerraformCancel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("terraform_cancel", __argsBuffer, this.setCallReducerFlags.terraformCancelFlags);
  }

  onTerraformCancel(callback: (ctx: ReducerEventContext, request: PlayerTerraformCancelRequest) => void) {
    this.connection.onReducer("terraform_cancel", callback);
  }

  removeOnTerraformCancel(callback: (ctx: ReducerEventContext, request: PlayerTerraformCancelRequest) => void) {
    this.connection.offReducer("terraform_cancel", callback);
  }

  terraformSetFinalTarget(request: PlayerTerraformSetFinalTargetRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TerraformSetFinalTarget.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("terraform_set_final_target", __argsBuffer, this.setCallReducerFlags.terraformSetFinalTargetFlags);
  }

  onTerraformSetFinalTarget(callback: (ctx: ReducerEventContext, request: PlayerTerraformSetFinalTargetRequest) => void) {
    this.connection.onReducer("terraform_set_final_target", callback);
  }

  removeOnTerraformSetFinalTarget(callback: (ctx: ReducerEventContext, request: PlayerTerraformSetFinalTargetRequest) => void) {
    this.connection.offReducer("terraform_set_final_target", callback);
  }

  terraformStart(request: PlayerTerraformRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TerraformStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("terraform_start", __argsBuffer, this.setCallReducerFlags.terraformStartFlags);
  }

  onTerraformStart(callback: (ctx: ReducerEventContext, request: PlayerTerraformRequest) => void) {
    this.connection.onReducer("terraform_start", callback);
  }

  removeOnTerraformStart(callback: (ctx: ReducerEventContext, request: PlayerTerraformRequest) => void) {
    this.connection.offReducer("terraform_start", callback);
  }

  tradeAccept(request: PlayerTradeAcceptRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TradeAccept.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trade_accept", __argsBuffer, this.setCallReducerFlags.tradeAcceptFlags);
  }

  onTradeAccept(callback: (ctx: ReducerEventContext, request: PlayerTradeAcceptRequest) => void) {
    this.connection.onReducer("trade_accept", callback);
  }

  removeOnTradeAccept(callback: (ctx: ReducerEventContext, request: PlayerTradeAcceptRequest) => void) {
    this.connection.offReducer("trade_accept", callback);
  }

  tradeAcceptSession(request: PlayerTradeAcceptSessionRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TradeAcceptSession.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trade_accept_session", __argsBuffer, this.setCallReducerFlags.tradeAcceptSessionFlags);
  }

  onTradeAcceptSession(callback: (ctx: ReducerEventContext, request: PlayerTradeAcceptSessionRequest) => void) {
    this.connection.onReducer("trade_accept_session", callback);
  }

  removeOnTradeAcceptSession(callback: (ctx: ReducerEventContext, request: PlayerTradeAcceptSessionRequest) => void) {
    this.connection.offReducer("trade_accept_session", callback);
  }

  tradeAddItem(request: PlayerTradeAddItemRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TradeAddItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trade_add_item", __argsBuffer, this.setCallReducerFlags.tradeAddItemFlags);
  }

  onTradeAddItem(callback: (ctx: ReducerEventContext, request: PlayerTradeAddItemRequest) => void) {
    this.connection.onReducer("trade_add_item", callback);
  }

  removeOnTradeAddItem(callback: (ctx: ReducerEventContext, request: PlayerTradeAddItemRequest) => void) {
    this.connection.offReducer("trade_add_item", callback);
  }

  tradeCancelServer(sessionEntityId: bigint, resolutionMessage: string) {
    const __args = { sessionEntityId, resolutionMessage };
    let __writer = new BinaryWriter(1024);
    TradeCancelServer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trade_cancel_server", __argsBuffer, this.setCallReducerFlags.tradeCancelServerFlags);
  }

  onTradeCancelServer(callback: (ctx: ReducerEventContext, sessionEntityId: bigint, resolutionMessage: string) => void) {
    this.connection.onReducer("trade_cancel_server", callback);
  }

  removeOnTradeCancelServer(callback: (ctx: ReducerEventContext, sessionEntityId: bigint, resolutionMessage: string) => void) {
    this.connection.offReducer("trade_cancel_server", callback);
  }

  tradeDecline(request: PlayerTradeDeclineRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TradeDecline.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trade_decline", __argsBuffer, this.setCallReducerFlags.tradeDeclineFlags);
  }

  onTradeDecline(callback: (ctx: ReducerEventContext, request: PlayerTradeDeclineRequest) => void) {
    this.connection.onReducer("trade_decline", callback);
  }

  removeOnTradeDecline(callback: (ctx: ReducerEventContext, request: PlayerTradeDeclineRequest) => void) {
    this.connection.offReducer("trade_decline", callback);
  }

  tradeDeclineSession(request: PlayerTradeDeclineSessionRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TradeDeclineSession.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trade_decline_session", __argsBuffer, this.setCallReducerFlags.tradeDeclineSessionFlags);
  }

  onTradeDeclineSession(callback: (ctx: ReducerEventContext, request: PlayerTradeDeclineSessionRequest) => void) {
    this.connection.onReducer("trade_decline_session", callback);
  }

  removeOnTradeDeclineSession(callback: (ctx: ReducerEventContext, request: PlayerTradeDeclineSessionRequest) => void) {
    this.connection.offReducer("trade_decline_session", callback);
  }

  tradeInitiateSession(request: PlayerTradeInitiateSessionRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TradeInitiateSession.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trade_initiate_session", __argsBuffer, this.setCallReducerFlags.tradeInitiateSessionFlags);
  }

  onTradeInitiateSession(callback: (ctx: ReducerEventContext, request: PlayerTradeInitiateSessionRequest) => void) {
    this.connection.onReducer("trade_initiate_session", callback);
  }

  removeOnTradeInitiateSession(callback: (ctx: ReducerEventContext, request: PlayerTradeInitiateSessionRequest) => void) {
    this.connection.offReducer("trade_initiate_session", callback);
  }

  tradeRemoveItem(request: PlayerTradeRemoveItemRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TradeRemoveItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trade_remove_item", __argsBuffer, this.setCallReducerFlags.tradeRemoveItemFlags);
  }

  onTradeRemoveItem(callback: (ctx: ReducerEventContext, request: PlayerTradeRemoveItemRequest) => void) {
    this.connection.onReducer("trade_remove_item", callback);
  }

  removeOnTradeRemoveItem(callback: (ctx: ReducerEventContext, request: PlayerTradeRemoveItemRequest) => void) {
    this.connection.offReducer("trade_remove_item", callback);
  }

  tradeSessionsAgentLoop(timer: TradeSessionLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    TradeSessionsAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trade_sessions_agent_loop", __argsBuffer, this.setCallReducerFlags.tradeSessionsAgentLoopFlags);
  }

  onTradeSessionsAgentLoop(callback: (ctx: ReducerEventContext, timer: TradeSessionLoopTimer) => void) {
    this.connection.onReducer("trade_sessions_agent_loop", callback);
  }

  removeOnTradeSessionsAgentLoop(callback: (ctx: ReducerEventContext, timer: TradeSessionLoopTimer) => void) {
    this.connection.offReducer("trade_sessions_agent_loop", callback);
  }

  tradeSwapPockets(request: PlayerTradeSwapPocketsRequest) {
    const __args = { request };
    let __writer = new BinaryWriter(1024);
    TradeSwapPockets.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trade_swap_pockets", __argsBuffer, this.setCallReducerFlags.tradeSwapPocketsFlags);
  }

  onTradeSwapPockets(callback: (ctx: ReducerEventContext, request: PlayerTradeSwapPocketsRequest) => void) {
    this.connection.onReducer("trade_swap_pockets", callback);
  }

  removeOnTradeSwapPockets(callback: (ctx: ReducerEventContext, request: PlayerTradeSwapPocketsRequest) => void) {
    this.connection.offReducer("trade_swap_pockets", callback);
  }

  transferPlayerDelayed(timer: TransferPlayerTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    TransferPlayerDelayed.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("transfer_player_delayed", __argsBuffer, this.setCallReducerFlags.transferPlayerDelayedFlags);
  }

  onTransferPlayerDelayed(callback: (ctx: ReducerEventContext, timer: TransferPlayerTimer) => void) {
    this.connection.onReducer("transfer_player_delayed", callback);
  }

  removeOnTransferPlayerDelayed(callback: (ctx: ReducerEventContext, timer: TransferPlayerTimer) => void) {
    this.connection.offReducer("transfer_player_delayed", callback);
  }

  travelerTaskAgentLoop(timer: TravelerTaskLoopTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    TravelerTaskAgentLoop.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("traveler_task_agent_loop", __argsBuffer, this.setCallReducerFlags.travelerTaskAgentLoopFlags);
  }

  onTravelerTaskAgentLoop(callback: (ctx: ReducerEventContext, timer: TravelerTaskLoopTimer) => void) {
    this.connection.onReducer("traveler_task_agent_loop", callback);
  }

  removeOnTravelerTaskAgentLoop(callback: (ctx: ReducerEventContext, timer: TravelerTaskLoopTimer) => void) {
    this.connection.offReducer("traveler_task_agent_loop", callback);
  }

  updateScheduledTimersFromStaticData() {
    this.connection.callReducer("update_scheduled_timers_from_static_data", new Uint8Array(0), this.setCallReducerFlags.updateScheduledTimersFromStaticDataFlags);
  }

  onUpdateScheduledTimersFromStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("update_scheduled_timers_from_static_data", callback);
  }

  removeOnUpdateScheduledTimersFromStaticData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("update_scheduled_timers_from_static_data", callback);
  }

}

export class SetReducerFlags {
  achievementClaimFlags: CallReducerFlags = 'FullUpdate';
  achievementClaim(flags: CallReducerFlags) {
    this.achievementClaimFlags = flags;
  }

  acquireKnowledgeFromEntitiesFlags: CallReducerFlags = 'FullUpdate';
  acquireKnowledgeFromEntities(flags: CallReducerFlags) {
    this.acquireKnowledgeFromEntitiesFlags = flags;
  }

  adminAlpha3CompleteOnboardingFlags: CallReducerFlags = 'FullUpdate';
  adminAlpha3CompleteOnboarding(flags: CallReducerFlags) {
    this.adminAlpha3CompleteOnboardingFlags = flags;
  }

  adminAlpha3ResetOnboardingToFifthTempleQuestFlags: CallReducerFlags = 'FullUpdate';
  adminAlpha3ResetOnboardingToFifthTempleQuest(flags: CallReducerFlags) {
    this.adminAlpha3ResetOnboardingToFifthTempleQuestFlags = flags;
  }

  adminAlpha3ResetOnboardingToFirstExpandQuestFlags: CallReducerFlags = 'FullUpdate';
  adminAlpha3ResetOnboardingToFirstExpandQuest(flags: CallReducerFlags) {
    this.adminAlpha3ResetOnboardingToFirstExpandQuestFlags = flags;
  }

  adminAlpha3ResetOnboardingToFirstTempleQuestFlags: CallReducerFlags = 'FullUpdate';
  adminAlpha3ResetOnboardingToFirstTempleQuest(flags: CallReducerFlags) {
    this.adminAlpha3ResetOnboardingToFirstTempleQuestFlags = flags;
  }

  adminAlpha3ResetOnboardingToFourthExpandQuestFlags: CallReducerFlags = 'FullUpdate';
  adminAlpha3ResetOnboardingToFourthExpandQuest(flags: CallReducerFlags) {
    this.adminAlpha3ResetOnboardingToFourthExpandQuestFlags = flags;
  }

  adminAlpha3ResetOnboardingToFourthTempleQuestFlags: CallReducerFlags = 'FullUpdate';
  adminAlpha3ResetOnboardingToFourthTempleQuest(flags: CallReducerFlags) {
    this.adminAlpha3ResetOnboardingToFourthTempleQuestFlags = flags;
  }

  adminAlpha3ResetOnboardingToSecondExpandQuestFlags: CallReducerFlags = 'FullUpdate';
  adminAlpha3ResetOnboardingToSecondExpandQuest(flags: CallReducerFlags) {
    this.adminAlpha3ResetOnboardingToSecondExpandQuestFlags = flags;
  }

  adminAlpha3ResetOnboardingToSecondTempleQuestFlags: CallReducerFlags = 'FullUpdate';
  adminAlpha3ResetOnboardingToSecondTempleQuest(flags: CallReducerFlags) {
    this.adminAlpha3ResetOnboardingToSecondTempleQuestFlags = flags;
  }

  adminAlpha3ResetOnboardingToThirdExpandQuestFlags: CallReducerFlags = 'FullUpdate';
  adminAlpha3ResetOnboardingToThirdExpandQuest(flags: CallReducerFlags) {
    this.adminAlpha3ResetOnboardingToThirdExpandQuestFlags = flags;
  }

  adminAlpha3ResetOnboardingToThirdTempleQuestFlags: CallReducerFlags = 'FullUpdate';
  adminAlpha3ResetOnboardingToThirdTempleQuest(flags: CallReducerFlags) {
    this.adminAlpha3ResetOnboardingToThirdTempleQuestFlags = flags;
  }

  adminBroadcastMsgRegionFlags: CallReducerFlags = 'FullUpdate';
  adminBroadcastMsgRegion(flags: CallReducerFlags) {
    this.adminBroadcastMsgRegionFlags = flags;
  }

  adminCapSkillFlags: CallReducerFlags = 'FullUpdate';
  adminCapSkill(flags: CallReducerFlags) {
    this.adminCapSkillFlags = flags;
  }

  adminCheckClosedListingStatesFlags: CallReducerFlags = 'FullUpdate';
  adminCheckClosedListingStates(flags: CallReducerFlags) {
    this.adminCheckClosedListingStatesFlags = flags;
  }

  adminClearAllResourcesFlags: CallReducerFlags = 'FullUpdate';
  adminClearAllResources(flags: CallReducerFlags) {
    this.adminClearAllResourcesFlags = flags;
  }

  adminClearChunkResourcesFlags: CallReducerFlags = 'FullUpdate';
  adminClearChunkResources(flags: CallReducerFlags) {
    this.adminClearChunkResourcesFlags = flags;
  }

  adminCollapseRuinFlags: CallReducerFlags = 'FullUpdate';
  adminCollapseRuin(flags: CallReducerFlags) {
    this.adminCollapseRuinFlags = flags;
  }

  adminCollapseRuinsFlags: CallReducerFlags = 'FullUpdate';
  adminCollapseRuins(flags: CallReducerFlags) {
    this.adminCollapseRuinsFlags = flags;
  }

  adminCompleteAllPassiveCraftsFlags: CallReducerFlags = 'FullUpdate';
  adminCompleteAllPassiveCrafts(flags: CallReducerFlags) {
    this.adminCompleteAllPassiveCraftsFlags = flags;
  }

  adminCountInventoryItemsFlags: CallReducerFlags = 'FullUpdate';
  adminCountInventoryItems(flags: CallReducerFlags) {
    this.adminCountInventoryItemsFlags = flags;
  }

  adminCreateChatMessageFlags: CallReducerFlags = 'FullUpdate';
  adminCreateChatMessage(flags: CallReducerFlags) {
    this.adminCreateChatMessageFlags = flags;
  }

  adminCreatePlayerReportFlags: CallReducerFlags = 'FullUpdate';
  adminCreatePlayerReport(flags: CallReducerFlags) {
    this.adminCreatePlayerReportFlags = flags;
  }

  adminDeleteAllItemsOfTypeFlags: CallReducerFlags = 'FullUpdate';
  adminDeleteAllItemsOfType(flags: CallReducerFlags) {
    this.adminDeleteAllItemsOfTypeFlags = flags;
  }

  adminDeleteChatMessageFlags: CallReducerFlags = 'FullUpdate';
  adminDeleteChatMessage(flags: CallReducerFlags) {
    this.adminDeleteChatMessageFlags = flags;
  }

  adminDespawnOverworldEnemiesFlags: CallReducerFlags = 'FullUpdate';
  adminDespawnOverworldEnemies(flags: CallReducerFlags) {
    this.adminDespawnOverworldEnemiesFlags = flags;
  }

  adminFindAllPlayersWithItemFlags: CallReducerFlags = 'FullUpdate';
  adminFindAllPlayersWithItem(flags: CallReducerFlags) {
    this.adminFindAllPlayersWithItemFlags = flags;
  }

  adminFindAllPlayersWithItemAboveQuantityFlags: CallReducerFlags = 'FullUpdate';
  adminFindAllPlayersWithItemAboveQuantity(flags: CallReducerFlags) {
    this.adminFindAllPlayersWithItemAboveQuantityFlags = flags;
  }

  adminFindItemsInInventoriesFlags: CallReducerFlags = 'FullUpdate';
  adminFindItemsInInventories(flags: CallReducerFlags) {
    this.adminFindItemsInInventoriesFlags = flags;
  }

  adminFindItemsInTradesFlags: CallReducerFlags = 'FullUpdate';
  adminFindItemsInTrades(flags: CallReducerFlags) {
    this.adminFindItemsInTradesFlags = flags;
  }

  adminGrantCollectiblesFlags: CallReducerFlags = 'FullUpdate';
  adminGrantCollectibles(flags: CallReducerFlags) {
    this.adminGrantCollectiblesFlags = flags;
  }

  adminModifyChatMessageFlags: CallReducerFlags = 'FullUpdate';
  adminModifyChatMessage(flags: CallReducerFlags) {
    this.adminModifyChatMessageFlags = flags;
  }

  adminRenameBuildingFlags: CallReducerFlags = 'FullUpdate';
  adminRenameBuilding(flags: CallReducerFlags) {
    this.adminRenameBuildingFlags = flags;
  }

  adminRenameBuildingCoordFlags: CallReducerFlags = 'FullUpdate';
  adminRenameBuildingCoord(flags: CallReducerFlags) {
    this.adminRenameBuildingCoordFlags = flags;
  }

  adminRenameBuildingEntityFlags: CallReducerFlags = 'FullUpdate';
  adminRenameBuildingEntity(flags: CallReducerFlags) {
    this.adminRenameBuildingEntityFlags = flags;
  }

  adminRenameClaimFlags: CallReducerFlags = 'FullUpdate';
  adminRenameClaim(flags: CallReducerFlags) {
    this.adminRenameClaimFlags = flags;
  }

  adminRenameClaimEntityFlags: CallReducerFlags = 'FullUpdate';
  adminRenameClaimEntity(flags: CallReducerFlags) {
    this.adminRenameClaimEntityFlags = flags;
  }

  adminRenameDeployableFlags: CallReducerFlags = 'FullUpdate';
  adminRenameDeployable(flags: CallReducerFlags) {
    this.adminRenameDeployableFlags = flags;
  }

  adminRenameDeployableEntityFlags: CallReducerFlags = 'FullUpdate';
  adminRenameDeployableEntity(flags: CallReducerFlags) {
    this.adminRenameDeployableEntityFlags = flags;
  }

  adminResetAllHerdLocationsFlags: CallReducerFlags = 'FullUpdate';
  adminResetAllHerdLocations(flags: CallReducerFlags) {
    this.adminResetAllHerdLocationsFlags = flags;
  }

  adminResetHerdLocationsFlags: CallReducerFlags = 'FullUpdate';
  adminResetHerdLocations(flags: CallReducerFlags) {
    this.adminResetHerdLocationsFlags = flags;
  }

  adminResetOnboardingCompletelyFlags: CallReducerFlags = 'FullUpdate';
  adminResetOnboardingCompletely(flags: CallReducerFlags) {
    this.adminResetOnboardingCompletelyFlags = flags;
  }

  adminResourceForceRegenFlags: CallReducerFlags = 'FullUpdate';
  adminResourceForceRegen(flags: CallReducerFlags) {
    this.adminResourceForceRegenFlags = flags;
  }

  adminResourcesDeleteVerySlowFlags: CallReducerFlags = 'FullUpdate';
  adminResourcesDeleteVerySlow(flags: CallReducerFlags) {
    this.adminResourcesDeleteVerySlowFlags = flags;
  }

  adminResourcesLogCountFlags: CallReducerFlags = 'FullUpdate';
  adminResourcesLogCount(flags: CallReducerFlags) {
    this.adminResourcesLogCountFlags = flags;
  }

  adminRestoreAllCollapsedRuinsFlags: CallReducerFlags = 'FullUpdate';
  adminRestoreAllCollapsedRuins(flags: CallReducerFlags) {
    this.adminRestoreAllCollapsedRuinsFlags = flags;
  }

  adminRestorePlayerStateFlags: CallReducerFlags = 'FullUpdate';
  adminRestorePlayerState(flags: CallReducerFlags) {
    this.adminRestorePlayerStateFlags = flags;
  }

  adminRestorePlayerStateScheduledFlags: CallReducerFlags = 'FullUpdate';
  adminRestorePlayerStateScheduled(flags: CallReducerFlags) {
    this.adminRestorePlayerStateScheduledFlags = flags;
  }

  adminSetSignTextFlags: CallReducerFlags = 'FullUpdate';
  adminSetSignText(flags: CallReducerFlags) {
    this.adminSetSignTextFlags = flags;
  }

  adminSetSignTextCoordFlags: CallReducerFlags = 'FullUpdate';
  adminSetSignTextCoord(flags: CallReducerFlags) {
    this.adminSetSignTextCoordFlags = flags;
  }

  adminSetSignTextEntityFlags: CallReducerFlags = 'FullUpdate';
  adminSetSignTextEntity(flags: CallReducerFlags) {
    this.adminSetSignTextEntityFlags = flags;
  }

  adminSignOutFlags: CallReducerFlags = 'FullUpdate';
  adminSignOut(flags: CallReducerFlags) {
    this.adminSignOutFlags = flags;
  }

  adminSignOutAllRegionFlags: CallReducerFlags = 'FullUpdate';
  adminSignOutAllRegion(flags: CallReducerFlags) {
    this.adminSignOutAllRegionFlags = flags;
  }

  adminSignOutStringFlags: CallReducerFlags = 'FullUpdate';
  adminSignOutString(flags: CallReducerFlags) {
    this.adminSignOutStringFlags = flags;
  }

  adminUpdateHousingPortalsFlags: CallReducerFlags = 'FullUpdate';
  adminUpdateHousingPortals(flags: CallReducerFlags) {
    this.adminUpdateHousingPortalsFlags = flags;
  }

  adminUpdateLightSourceStatesFlags: CallReducerFlags = 'FullUpdate';
  adminUpdateLightSourceStates(flags: CallReducerFlags) {
    this.adminUpdateLightSourceStatesFlags = flags;
  }

  attackFlags: CallReducerFlags = 'FullUpdate';
  attack(flags: CallReducerFlags) {
    this.attackFlags = flags;
  }

  attackImpactFlags: CallReducerFlags = 'FullUpdate';
  attackImpact(flags: CallReducerFlags) {
    this.attackImpactFlags = flags;
  }

  attackScheduledFlags: CallReducerFlags = 'FullUpdate';
  attackScheduled(flags: CallReducerFlags) {
    this.attackScheduledFlags = flags;
  }

  attackStartFlags: CallReducerFlags = 'FullUpdate';
  attackStart(flags: CallReducerFlags) {
    this.attackStartFlags = flags;
  }

  autoLogoutLoopFlags: CallReducerFlags = 'FullUpdate';
  autoLogoutLoop(flags: CallReducerFlags) {
    this.autoLogoutLoopFlags = flags;
  }

  barterStallOrderAcceptFlags: CallReducerFlags = 'FullUpdate';
  barterStallOrderAccept(flags: CallReducerFlags) {
    this.barterStallOrderAcceptFlags = flags;
  }

  barterStallOrderCreateFlags: CallReducerFlags = 'FullUpdate';
  barterStallOrderCreate(flags: CallReducerFlags) {
    this.barterStallOrderCreateFlags = flags;
  }

  barterStallOrderDeleteFlags: CallReducerFlags = 'FullUpdate';
  barterStallOrderDelete(flags: CallReducerFlags) {
    this.barterStallOrderDeleteFlags = flags;
  }

  barterStallSetMarketModeEnabledFlags: CallReducerFlags = 'FullUpdate';
  barterStallSetMarketModeEnabled(flags: CallReducerFlags) {
    this.barterStallSetMarketModeEnabledFlags = flags;
  }

  blueprintPlaceFlags: CallReducerFlags = 'FullUpdate';
  blueprintPlace(flags: CallReducerFlags) {
    this.blueprintPlaceFlags = flags;
  }

  buildingDecayAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  buildingDecayAgentLoop(flags: CallReducerFlags) {
    this.buildingDecayAgentLoopFlags = flags;
  }

  buildingDeconstructFlags: CallReducerFlags = 'FullUpdate';
  buildingDeconstruct(flags: CallReducerFlags) {
    this.buildingDeconstructFlags = flags;
  }

  buildingDeconstructStartFlags: CallReducerFlags = 'FullUpdate';
  buildingDeconstructStart(flags: CallReducerFlags) {
    this.buildingDeconstructStartFlags = flags;
  }

  buildingDespawnFlags: CallReducerFlags = 'FullUpdate';
  buildingDespawn(flags: CallReducerFlags) {
    this.buildingDespawnFlags = flags;
  }

  buildingMoveFlags: CallReducerFlags = 'FullUpdate';
  buildingMove(flags: CallReducerFlags) {
    this.buildingMoveFlags = flags;
  }

  buildingRepairFlags: CallReducerFlags = 'FullUpdate';
  buildingRepair(flags: CallReducerFlags) {
    this.buildingRepairFlags = flags;
  }

  buildingRepairStartFlags: CallReducerFlags = 'FullUpdate';
  buildingRepairStart(flags: CallReducerFlags) {
    this.buildingRepairStartFlags = flags;
  }

  buildingSetNicknameFlags: CallReducerFlags = 'FullUpdate';
  buildingSetNickname(flags: CallReducerFlags) {
    this.buildingSetNicknameFlags = flags;
  }

  buildingSetSignTextFlags: CallReducerFlags = 'FullUpdate';
  buildingSetSignText(flags: CallReducerFlags) {
    this.buildingSetSignTextFlags = flags;
  }

  chatCleanupAgentInsertFlags: CallReducerFlags = 'FullUpdate';
  chatCleanupAgentInsert(flags: CallReducerFlags) {
    this.chatCleanupAgentInsertFlags = flags;
  }

  chatCleanupAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  chatCleanupAgentLoop(flags: CallReducerFlags) {
    this.chatCleanupAgentLoopFlags = flags;
  }

  chatPostMessageFlags: CallReducerFlags = 'FullUpdate';
  chatPostMessage(flags: CallReducerFlags) {
    this.chatPostMessageFlags = flags;
  }

  cheatBuildingMoveFlags: CallReducerFlags = 'FullUpdate';
  cheatBuildingMove(flags: CallReducerFlags) {
    this.cheatBuildingMoveFlags = flags;
  }

  cheatBuildingPlaceFlags: CallReducerFlags = 'FullUpdate';
  cheatBuildingPlace(flags: CallReducerFlags) {
    this.cheatBuildingPlaceFlags = flags;
  }

  cheatCargoGrantFlags: CallReducerFlags = 'FullUpdate';
  cheatCargoGrant(flags: CallReducerFlags) {
    this.cheatCargoGrantFlags = flags;
  }

  cheatClaimTakeOwnershipFlags: CallReducerFlags = 'FullUpdate';
  cheatClaimTakeOwnership(flags: CallReducerFlags) {
    this.cheatClaimTakeOwnershipFlags = flags;
  }

  cheatClaimTotemAddSuppliesFlags: CallReducerFlags = 'FullUpdate';
  cheatClaimTotemAddSupplies(flags: CallReducerFlags) {
    this.cheatClaimTotemAddSuppliesFlags = flags;
  }

  cheatClaimTotemCompleteCurrentResearchFlags: CallReducerFlags = 'FullUpdate';
  cheatClaimTotemCompleteCurrentResearch(flags: CallReducerFlags) {
    this.cheatClaimTotemCompleteCurrentResearchFlags = flags;
  }

  cheatClaimTotemResearchAllFlags: CallReducerFlags = 'FullUpdate';
  cheatClaimTotemResearchAll(flags: CallReducerFlags) {
    this.cheatClaimTotemResearchAllFlags = flags;
  }

  cheatClearBuffsAndDebuffsFlags: CallReducerFlags = 'FullUpdate';
  cheatClearBuffsAndDebuffs(flags: CallReducerFlags) {
    this.cheatClearBuffsAndDebuffsFlags = flags;
  }

  cheatCompendiumPlaceEnemyFlags: CallReducerFlags = 'FullUpdate';
  cheatCompendiumPlaceEnemy(flags: CallReducerFlags) {
    this.cheatCompendiumPlaceEnemyFlags = flags;
  }

  cheatCompendiumPlaceResourceFlags: CallReducerFlags = 'FullUpdate';
  cheatCompendiumPlaceResource(flags: CallReducerFlags) {
    this.cheatCompendiumPlaceResourceFlags = flags;
  }

  cheatDeleteItemFlags: CallReducerFlags = 'FullUpdate';
  cheatDeleteItem(flags: CallReducerFlags) {
    this.cheatDeleteItemFlags = flags;
  }

  cheatDeployableStoreFlags: CallReducerFlags = 'FullUpdate';
  cheatDeployableStore(flags: CallReducerFlags) {
    this.cheatDeployableStoreFlags = flags;
  }

  cheatDiscoverMapFlags: CallReducerFlags = 'FullUpdate';
  cheatDiscoverMap(flags: CallReducerFlags) {
    this.cheatDiscoverMapFlags = flags;
  }

  cheatExperienceGrantFlags: CallReducerFlags = 'FullUpdate';
  cheatExperienceGrant(flags: CallReducerFlags) {
    this.cheatExperienceGrantFlags = flags;
  }

  cheatGrantKnowledgeFlags: CallReducerFlags = 'FullUpdate';
  cheatGrantKnowledge(flags: CallReducerFlags) {
    this.cheatGrantKnowledgeFlags = flags;
  }

  cheatGrantTeleportEnergyFlags: CallReducerFlags = 'FullUpdate';
  cheatGrantTeleportEnergy(flags: CallReducerFlags) {
    this.cheatGrantTeleportEnergyFlags = flags;
  }

  cheatItemStackGrantFlags: CallReducerFlags = 'FullUpdate';
  cheatItemStackGrant(flags: CallReducerFlags) {
    this.cheatItemStackGrantFlags = flags;
  }

  cheatItemStackGrantAndEquipFlags: CallReducerFlags = 'FullUpdate';
  cheatItemStackGrantAndEquip(flags: CallReducerFlags) {
    this.cheatItemStackGrantAndEquipFlags = flags;
  }

  cheatKillFlags: CallReducerFlags = 'FullUpdate';
  cheatKill(flags: CallReducerFlags) {
    this.cheatKillFlags = flags;
  }

  cheatPavingAddTileFlags: CallReducerFlags = 'FullUpdate';
  cheatPavingAddTile(flags: CallReducerFlags) {
    this.cheatPavingAddTileFlags = flags;
  }

  cheatPavingDestroyFlags: CallReducerFlags = 'FullUpdate';
  cheatPavingDestroy(flags: CallReducerFlags) {
    this.cheatPavingDestroyFlags = flags;
  }

  cheatPillarShapingAddPillarFlags: CallReducerFlags = 'FullUpdate';
  cheatPillarShapingAddPillar(flags: CallReducerFlags) {
    this.cheatPillarShapingAddPillarFlags = flags;
  }

  cheatPillarShapingDestroyFlags: CallReducerFlags = 'FullUpdate';
  cheatPillarShapingDestroy(flags: CallReducerFlags) {
    this.cheatPillarShapingDestroyFlags = flags;
  }

  cheatProjectSiteAddAllMaterialsFlags: CallReducerFlags = 'FullUpdate';
  cheatProjectSiteAddAllMaterials(flags: CallReducerFlags) {
    this.cheatProjectSiteAddAllMaterialsFlags = flags;
  }

  cheatRemoveEntityBuildingFlags: CallReducerFlags = 'FullUpdate';
  cheatRemoveEntityBuilding(flags: CallReducerFlags) {
    this.cheatRemoveEntityBuildingFlags = flags;
  }

  cheatRemoveEntityEnemyFlags: CallReducerFlags = 'FullUpdate';
  cheatRemoveEntityEnemy(flags: CallReducerFlags) {
    this.cheatRemoveEntityEnemyFlags = flags;
  }

  cheatRemoveEntityResourceFlags: CallReducerFlags = 'FullUpdate';
  cheatRemoveEntityResource(flags: CallReducerFlags) {
    this.cheatRemoveEntityResourceFlags = flags;
  }

  cheatRemoveItemQuantityFlags: CallReducerFlags = 'FullUpdate';
  cheatRemoveItemQuantity(flags: CallReducerFlags) {
    this.cheatRemoveItemQuantityFlags = flags;
  }

  cheatSetAiDebugStateFlags: CallReducerFlags = 'FullUpdate';
  cheatSetAiDebugState(flags: CallReducerFlags) {
    this.cheatSetAiDebugStateFlags = flags;
  }

  cheatSpawnLootChestFlags: CallReducerFlags = 'FullUpdate';
  cheatSpawnLootChest(flags: CallReducerFlags) {
    this.cheatSpawnLootChestFlags = flags;
  }

  cheatTeleportFloatFlags: CallReducerFlags = 'FullUpdate';
  cheatTeleportFloat(flags: CallReducerFlags) {
    this.cheatTeleportFloatFlags = flags;
  }

  cheatTerraformFlags: CallReducerFlags = 'FullUpdate';
  cheatTerraform(flags: CallReducerFlags) {
    this.cheatTerraformFlags = flags;
  }

  cheatToggleActiveCollectibleFlags: CallReducerFlags = 'FullUpdate';
  cheatToggleActiveCollectible(flags: CallReducerFlags) {
    this.cheatToggleActiveCollectibleFlags = flags;
  }

  cheatWarpFlags: CallReducerFlags = 'FullUpdate';
  cheatWarp(flags: CallReducerFlags) {
    this.cheatWarpFlags = flags;
  }

  claimAddMemberFlags: CallReducerFlags = 'FullUpdate';
  claimAddMember(flags: CallReducerFlags) {
    this.claimAddMemberFlags = flags;
  }

  claimAddRecruitmentFlags: CallReducerFlags = 'FullUpdate';
  claimAddRecruitment(flags: CallReducerFlags) {
    this.claimAddRecruitmentFlags = flags;
  }

  claimAddTileFlags: CallReducerFlags = 'FullUpdate';
  claimAddTile(flags: CallReducerFlags) {
    this.claimAddTileFlags = flags;
  }

  claimApplyForRecruitmentFlags: CallReducerFlags = 'FullUpdate';
  claimApplyForRecruitment(flags: CallReducerFlags) {
    this.claimApplyForRecruitmentFlags = flags;
  }

  claimLeaveFlags: CallReducerFlags = 'FullUpdate';
  claimLeave(flags: CallReducerFlags) {
    this.claimLeaveFlags = flags;
  }

  claimPurchaseSuppliesFromPlayerFlags: CallReducerFlags = 'FullUpdate';
  claimPurchaseSuppliesFromPlayer(flags: CallReducerFlags) {
    this.claimPurchaseSuppliesFromPlayerFlags = flags;
  }

  claimRemoveMemberFlags: CallReducerFlags = 'FullUpdate';
  claimRemoveMember(flags: CallReducerFlags) {
    this.claimRemoveMemberFlags = flags;
  }

  claimRemoveRecruitmentFlags: CallReducerFlags = 'FullUpdate';
  claimRemoveRecruitment(flags: CallReducerFlags) {
    this.claimRemoveRecruitmentFlags = flags;
  }

  claimRemoveTileFlags: CallReducerFlags = 'FullUpdate';
  claimRemoveTile(flags: CallReducerFlags) {
    this.claimRemoveTileFlags = flags;
  }

  claimRenameFlags: CallReducerFlags = 'FullUpdate';
  claimRename(flags: CallReducerFlags) {
    this.claimRenameFlags = flags;
  }

  claimResupplyFlags: CallReducerFlags = 'FullUpdate';
  claimResupply(flags: CallReducerFlags) {
    this.claimResupplyFlags = flags;
  }

  claimResupplyStartFlags: CallReducerFlags = 'FullUpdate';
  claimResupplyStart(flags: CallReducerFlags) {
    this.claimResupplyStartFlags = flags;
  }

  claimSetMemberPermissionsFlags: CallReducerFlags = 'FullUpdate';
  claimSetMemberPermissions(flags: CallReducerFlags) {
    this.claimSetMemberPermissionsFlags = flags;
  }

  claimSetPurchaseSupplyPriceFlags: CallReducerFlags = 'FullUpdate';
  claimSetPurchaseSupplyPrice(flags: CallReducerFlags) {
    this.claimSetPurchaseSupplyPriceFlags = flags;
  }

  claimSetPurchaseSupplyThresholdFlags: CallReducerFlags = 'FullUpdate';
  claimSetPurchaseSupplyThreshold(flags: CallReducerFlags) {
    this.claimSetPurchaseSupplyThresholdFlags = flags;
  }

  claimTakeOwnershipFlags: CallReducerFlags = 'FullUpdate';
  claimTakeOwnership(flags: CallReducerFlags) {
    this.claimTakeOwnershipFlags = flags;
  }

  claimTechCancelFlags: CallReducerFlags = 'FullUpdate';
  claimTechCancel(flags: CallReducerFlags) {
    this.claimTechCancelFlags = flags;
  }

  claimTechLearnFlags: CallReducerFlags = 'FullUpdate';
  claimTechLearn(flags: CallReducerFlags) {
    this.claimTechLearnFlags = flags;
  }

  claimTechUnlockTechFlags: CallReducerFlags = 'FullUpdate';
  claimTechUnlockTech(flags: CallReducerFlags) {
    this.claimTechUnlockTechFlags = flags;
  }

  claimTransferOwnershipFlags: CallReducerFlags = 'FullUpdate';
  claimTransferOwnership(flags: CallReducerFlags) {
    this.claimTransferOwnershipFlags = flags;
  }

  claimTreasuryDepositFlags: CallReducerFlags = 'FullUpdate';
  claimTreasuryDeposit(flags: CallReducerFlags) {
    this.claimTreasuryDepositFlags = flags;
  }

  claimWithdrawFromTreasuryFlags: CallReducerFlags = 'FullUpdate';
  claimWithdrawFromTreasury(flags: CallReducerFlags) {
    this.claimWithdrawFromTreasuryFlags = flags;
  }

  clearStagedStaticDataFlags: CallReducerFlags = 'FullUpdate';
  clearStagedStaticData(flags: CallReducerFlags) {
    this.clearStagedStaticDataFlags = flags;
  }

  closedListingCollectFlags: CallReducerFlags = 'FullUpdate';
  closedListingCollect(flags: CallReducerFlags) {
    this.closedListingCollectFlags = flags;
  }

  collectStatsReducerFlags: CallReducerFlags = 'FullUpdate';
  collectStatsReducer(flags: CallReducerFlags) {
    this.collectStatsReducerFlags = flags;
  }

  collectibleActivateFlags: CallReducerFlags = 'FullUpdate';
  collectibleActivate(flags: CallReducerFlags) {
    this.collectibleActivateFlags = flags;
  }

  commitStagedStaticDataFlags: CallReducerFlags = 'FullUpdate';
  commitStagedStaticData(flags: CallReducerFlags) {
    this.commitStagedStaticDataFlags = flags;
  }

  completeOnboardingQuestFlags: CallReducerFlags = 'FullUpdate';
  completeOnboardingQuest(flags: CallReducerFlags) {
    this.completeOnboardingQuestFlags = flags;
  }

  completeOnboardingStateFlags: CallReducerFlags = 'FullUpdate';
  completeOnboardingState(flags: CallReducerFlags) {
    this.completeOnboardingStateFlags = flags;
  }

  convertCollectibleToDeedFlags: CallReducerFlags = 'FullUpdate';
  convertCollectibleToDeed(flags: CallReducerFlags) {
    this.convertCollectibleToDeedFlags = flags;
  }

  convertDeedToCollectibleFlags: CallReducerFlags = 'FullUpdate';
  convertDeedToCollectible(flags: CallReducerFlags) {
    this.convertDeedToCollectibleFlags = flags;
  }

  craftCancelFlags: CallReducerFlags = 'FullUpdate';
  craftCancel(flags: CallReducerFlags) {
    this.craftCancelFlags = flags;
  }

  craftCollectFlags: CallReducerFlags = 'FullUpdate';
  craftCollect(flags: CallReducerFlags) {
    this.craftCollectFlags = flags;
  }

  craftCollectAllFlags: CallReducerFlags = 'FullUpdate';
  craftCollectAll(flags: CallReducerFlags) {
    this.craftCollectAllFlags = flags;
  }

  craftContinueFlags: CallReducerFlags = 'FullUpdate';
  craftContinue(flags: CallReducerFlags) {
    this.craftContinueFlags = flags;
  }

  craftContinueStartFlags: CallReducerFlags = 'FullUpdate';
  craftContinueStart(flags: CallReducerFlags) {
    this.craftContinueStartFlags = flags;
  }

  craftInitiateFlags: CallReducerFlags = 'FullUpdate';
  craftInitiate(flags: CallReducerFlags) {
    this.craftInitiateFlags = flags;
  }

  craftInitiateStartFlags: CallReducerFlags = 'FullUpdate';
  craftInitiateStart(flags: CallReducerFlags) {
    this.craftInitiateStartFlags = flags;
  }

  craftSetPublicFlags: CallReducerFlags = 'FullUpdate';
  craftSetPublic(flags: CallReducerFlags) {
    this.craftSetPublicFlags = flags;
  }

  currentVersionFlags: CallReducerFlags = 'FullUpdate';
  currentVersion(flags: CallReducerFlags) {
    this.currentVersionFlags = flags;
  }

  dayNightAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  dayNightAgentLoop(flags: CallReducerFlags) {
    this.dayNightAgentLoopFlags = flags;
  }

  deleteAllNpcsFlags: CallReducerFlags = 'FullUpdate';
  deleteAllNpcs(flags: CallReducerFlags) {
    this.deleteAllNpcsFlags = flags;
  }

  deployableDeployFlags: CallReducerFlags = 'FullUpdate';
  deployableDeploy(flags: CallReducerFlags) {
    this.deployableDeployFlags = flags;
  }

  deployableDeployStartFlags: CallReducerFlags = 'FullUpdate';
  deployableDeployStart(flags: CallReducerFlags) {
    this.deployableDeployStartFlags = flags;
  }

  deployableDismountFlags: CallReducerFlags = 'FullUpdate';
  deployableDismount(flags: CallReducerFlags) {
    this.deployableDismountFlags = flags;
  }

  deployableDismountScheduledFlags: CallReducerFlags = 'FullUpdate';
  deployableDismountScheduled(flags: CallReducerFlags) {
    this.deployableDismountScheduledFlags = flags;
  }

  deployableMountFlags: CallReducerFlags = 'FullUpdate';
  deployableMount(flags: CallReducerFlags) {
    this.deployableMountFlags = flags;
  }

  deployableMoveFlags: CallReducerFlags = 'FullUpdate';
  deployableMove(flags: CallReducerFlags) {
    this.deployableMoveFlags = flags;
  }

  deployableMoveOffBoundsFlags: CallReducerFlags = 'FullUpdate';
  deployableMoveOffBounds(flags: CallReducerFlags) {
    this.deployableMoveOffBoundsFlags = flags;
  }

  deployableMoveOffClaimFlags: CallReducerFlags = 'FullUpdate';
  deployableMoveOffClaim(flags: CallReducerFlags) {
    this.deployableMoveOffClaimFlags = flags;
  }

  deployableStoreFlags: CallReducerFlags = 'FullUpdate';
  deployableStore(flags: CallReducerFlags) {
    this.deployableStoreFlags = flags;
  }

  deployableStoreStartFlags: CallReducerFlags = 'FullUpdate';
  deployableStoreStart(flags: CallReducerFlags) {
    this.deployableStoreStartFlags = flags;
  }

  destroyDimensionNetworkFlags: CallReducerFlags = 'FullUpdate';
  destroyDimensionNetwork(flags: CallReducerFlags) {
    this.destroyDimensionNetworkFlags = flags;
  }

  devDeleteWorldFlags: CallReducerFlags = 'FullUpdate';
  devDeleteWorld(flags: CallReducerFlags) {
    this.devDeleteWorldFlags = flags;
  }

  discoverEntitiesFlags: CallReducerFlags = 'FullUpdate';
  discoverEntities(flags: CallReducerFlags) {
    this.discoverEntitiesFlags = flags;
  }

  droppedInventoryDespawnFlags: CallReducerFlags = 'FullUpdate';
  droppedInventoryDespawn(flags: CallReducerFlags) {
    this.droppedInventoryDespawnFlags = flags;
  }

  droppedInventoryLoseOwnershipFlags: CallReducerFlags = 'FullUpdate';
  droppedInventoryLoseOwnership(flags: CallReducerFlags) {
    this.droppedInventoryLoseOwnershipFlags = flags;
  }

  duelAgentTimerLoopFlags: CallReducerFlags = 'FullUpdate';
  duelAgentTimerLoop(flags: CallReducerFlags) {
    this.duelAgentTimerLoopFlags = flags;
  }

  duelDespawnFlags: CallReducerFlags = 'FullUpdate';
  duelDespawn(flags: CallReducerFlags) {
    this.duelDespawnFlags = flags;
  }

  eatFlags: CallReducerFlags = 'FullUpdate';
  eat(flags: CallReducerFlags) {
    this.eatFlags = flags;
  }

  emoteFlags: CallReducerFlags = 'FullUpdate';
  emote(flags: CallReducerFlags) {
    this.emoteFlags = flags;
  }

  emoteStartFlags: CallReducerFlags = 'FullUpdate';
  emoteStart(flags: CallReducerFlags) {
    this.emoteStartFlags = flags;
  }

  empireAddSiegeSuppliesFlags: CallReducerFlags = 'FullUpdate';
  empireAddSiegeSupplies(flags: CallReducerFlags) {
    this.empireAddSiegeSuppliesFlags = flags;
  }

  empireClaimJoinFlags: CallReducerFlags = 'FullUpdate';
  empireClaimJoin(flags: CallReducerFlags) {
    this.empireClaimJoinFlags = flags;
  }

  empireCollectHexiteCapsuleFlags: CallReducerFlags = 'FullUpdate';
  empireCollectHexiteCapsule(flags: CallReducerFlags) {
    this.empireCollectHexiteCapsuleFlags = flags;
  }

  empireDeploySiegeEngineFlags: CallReducerFlags = 'FullUpdate';
  empireDeploySiegeEngine(flags: CallReducerFlags) {
    this.empireDeploySiegeEngineFlags = flags;
  }

  empireDeploySiegeEngineStartFlags: CallReducerFlags = 'FullUpdate';
  empireDeploySiegeEngineStart(flags: CallReducerFlags) {
    this.empireDeploySiegeEngineStartFlags = flags;
  }

  empireQueueSuppliesFlags: CallReducerFlags = 'FullUpdate';
  empireQueueSupplies(flags: CallReducerFlags) {
    this.empireQueueSuppliesFlags = flags;
  }

  empireResupplyNodeFlags: CallReducerFlags = 'FullUpdate';
  empireResupplyNode(flags: CallReducerFlags) {
    this.empireResupplyNodeFlags = flags;
  }

  empireResupplyNodeStartFlags: CallReducerFlags = 'FullUpdate';
  empireResupplyNodeStart(flags: CallReducerFlags) {
    this.empireResupplyNodeStartFlags = flags;
  }

  empireSiegeDepletedWatchtowerFlags: CallReducerFlags = 'FullUpdate';
  empireSiegeDepletedWatchtower(flags: CallReducerFlags) {
    this.empireSiegeDepletedWatchtowerFlags = flags;
  }

  endGracePeriodFlags: CallReducerFlags = 'FullUpdate';
  endGracePeriod(flags: CallReducerFlags) {
    this.endGracePeriodFlags = flags;
  }

  enemyClearAggroFlags: CallReducerFlags = 'FullUpdate';
  enemyClearAggro(flags: CallReducerFlags) {
    this.enemyClearAggroFlags = flags;
  }

  enemyDespawnFlags: CallReducerFlags = 'FullUpdate';
  enemyDespawn(flags: CallReducerFlags) {
    this.enemyDespawnFlags = flags;
  }

  enemyDespawnFromMobMonitorFlags: CallReducerFlags = 'FullUpdate';
  enemyDespawnFromMobMonitor(flags: CallReducerFlags) {
    this.enemyDespawnFromMobMonitorFlags = flags;
  }

  enemyDespawnFromMobMonitorBatchFlags: CallReducerFlags = 'FullUpdate';
  enemyDespawnFromMobMonitorBatch(flags: CallReducerFlags) {
    this.enemyDespawnFromMobMonitorBatchFlags = flags;
  }

  enemyMoveFlags: CallReducerFlags = 'FullUpdate';
  enemyMove(flags: CallReducerFlags) {
    this.enemyMoveFlags = flags;
  }

  enemyMoveBatchFlags: CallReducerFlags = 'FullUpdate';
  enemyMoveBatch(flags: CallReducerFlags) {
    this.enemyMoveBatchFlags = flags;
  }

  enemyRegenAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  enemyRegenAgentLoop(flags: CallReducerFlags) {
    this.enemyRegenAgentLoopFlags = flags;
  }

  enemySetHealthFlags: CallReducerFlags = 'FullUpdate';
  enemySetHealth(flags: CallReducerFlags) {
    this.enemySetHealthFlags = flags;
  }

  enemySetHealthBatchFlags: CallReducerFlags = 'FullUpdate';
  enemySetHealthBatch(flags: CallReducerFlags) {
    this.enemySetHealthBatchFlags = flags;
  }

  enemySpawnFlags: CallReducerFlags = 'FullUpdate';
  enemySpawn(flags: CallReducerFlags) {
    this.enemySpawnFlags = flags;
  }

  enemySpawnBatchFlags: CallReducerFlags = 'FullUpdate';
  enemySpawnBatch(flags: CallReducerFlags) {
    this.enemySpawnBatchFlags = flags;
  }

  enemySpawnLootFlags: CallReducerFlags = 'FullUpdate';
  enemySpawnLoot(flags: CallReducerFlags) {
    this.enemySpawnLootFlags = flags;
  }

  environmentDebuffAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  environmentDebuffAgentLoop(flags: CallReducerFlags) {
    this.environmentDebuffAgentLoopFlags = flags;
  }

  equipmentAddFlags: CallReducerFlags = 'FullUpdate';
  equipmentAdd(flags: CallReducerFlags) {
    this.equipmentAddFlags = flags;
  }

  equipmentRemoveFlags: CallReducerFlags = 'FullUpdate';
  equipmentRemove(flags: CallReducerFlags) {
    this.equipmentRemoveFlags = flags;
  }

  extractFlags: CallReducerFlags = 'FullUpdate';
  extract(flags: CallReducerFlags) {
    this.extractFlags = flags;
  }

  extractStartFlags: CallReducerFlags = 'FullUpdate';
  extractStart(flags: CallReducerFlags) {
    this.extractStartFlags = flags;
  }

  forceStartAgentsFlags: CallReducerFlags = 'FullUpdate';
  forceStartAgents(flags: CallReducerFlags) {
    this.forceStartAgentsFlags = flags;
  }

  generateDevIslandFlags: CallReducerFlags = 'FullUpdate';
  generateDevIsland(flags: CallReducerFlags) {
    this.generateDevIslandFlags = flags;
  }

  generateFlatWorldFlags: CallReducerFlags = 'FullUpdate';
  generateFlatWorld(flags: CallReducerFlags) {
    this.generateFlatWorldFlags = flags;
  }

  generateWorldFlags: CallReducerFlags = 'FullUpdate';
  generateWorld(flags: CallReducerFlags) {
    this.generateWorldFlags = flags;
  }

  growthAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  growthAgentLoop(flags: CallReducerFlags) {
    this.growthAgentLoopFlags = flags;
  }

  hideDeployableFlags: CallReducerFlags = 'FullUpdate';
  hideDeployable(flags: CallReducerFlags) {
    this.hideDeployableFlags = flags;
  }

  importAchievementDescFlags: CallReducerFlags = 'FullUpdate';
  importAchievementDesc(flags: CallReducerFlags) {
    this.importAchievementDescFlags = flags;
  }

  importActiveBuffStateFlags: CallReducerFlags = 'FullUpdate';
  importActiveBuffState(flags: CallReducerFlags) {
    this.importActiveBuffStateFlags = flags;
  }

  importAdminBroadcastFlags: CallReducerFlags = 'FullUpdate';
  importAdminBroadcast(flags: CallReducerFlags) {
    this.importAdminBroadcastFlags = flags;
  }

  importAlertDescFlags: CallReducerFlags = 'FullUpdate';
  importAlertDesc(flags: CallReducerFlags) {
    this.importAlertDescFlags = flags;
  }

  importAlertStateFlags: CallReducerFlags = 'FullUpdate';
  importAlertState(flags: CallReducerFlags) {
    this.importAlertStateFlags = flags;
  }

  importAttackOutcomeStateFlags: CallReducerFlags = 'FullUpdate';
  importAttackOutcomeState(flags: CallReducerFlags) {
    this.importAttackOutcomeStateFlags = flags;
  }

  importBiomeDescFlags: CallReducerFlags = 'FullUpdate';
  importBiomeDesc(flags: CallReducerFlags) {
    this.importBiomeDescFlags = flags;
  }

  importBuffDescFlags: CallReducerFlags = 'FullUpdate';
  importBuffDesc(flags: CallReducerFlags) {
    this.importBuffDescFlags = flags;
  }

  importBuffTypeDescFlags: CallReducerFlags = 'FullUpdate';
  importBuffTypeDesc(flags: CallReducerFlags) {
    this.importBuffTypeDescFlags = flags;
  }

  importBuildingClaimDescFlags: CallReducerFlags = 'FullUpdate';
  importBuildingClaimDesc(flags: CallReducerFlags) {
    this.importBuildingClaimDescFlags = flags;
  }

  importBuildingDescFlags: CallReducerFlags = 'FullUpdate';
  importBuildingDesc(flags: CallReducerFlags) {
    this.importBuildingDescFlags = flags;
  }

  importBuildingPortalDescFlags: CallReducerFlags = 'FullUpdate';
  importBuildingPortalDesc(flags: CallReducerFlags) {
    this.importBuildingPortalDescFlags = flags;
  }

  importBuildingRepairsDescFlags: CallReducerFlags = 'FullUpdate';
  importBuildingRepairsDesc(flags: CallReducerFlags) {
    this.importBuildingRepairsDescFlags = flags;
  }

  importBuildingSpawnDescFlags: CallReducerFlags = 'FullUpdate';
  importBuildingSpawnDesc(flags: CallReducerFlags) {
    this.importBuildingSpawnDescFlags = flags;
  }

  importBuildingStateFlags: CallReducerFlags = 'FullUpdate';
  importBuildingState(flags: CallReducerFlags) {
    this.importBuildingStateFlags = flags;
  }

  importBuildingTypeDescFlags: CallReducerFlags = 'FullUpdate';
  importBuildingTypeDesc(flags: CallReducerFlags) {
    this.importBuildingTypeDescFlags = flags;
  }

  importCargoDescFlags: CallReducerFlags = 'FullUpdate';
  importCargoDesc(flags: CallReducerFlags) {
    this.importCargoDescFlags = flags;
  }

  importCharacterStatDescFlags: CallReducerFlags = 'FullUpdate';
  importCharacterStatDesc(flags: CallReducerFlags) {
    this.importCharacterStatDescFlags = flags;
  }

  importCharacterStatsStateFlags: CallReducerFlags = 'FullUpdate';
  importCharacterStatsState(flags: CallReducerFlags) {
    this.importCharacterStatsStateFlags = flags;
  }

  importChatMessageStateFlags: CallReducerFlags = 'FullUpdate';
  importChatMessageState(flags: CallReducerFlags) {
    this.importChatMessageStateFlags = flags;
  }

  importChestRarityDescFlags: CallReducerFlags = 'FullUpdate';
  importChestRarityDesc(flags: CallReducerFlags) {
    this.importChestRarityDescFlags = flags;
  }

  importClaimLocalStateFlags: CallReducerFlags = 'FullUpdate';
  importClaimLocalState(flags: CallReducerFlags) {
    this.importClaimLocalStateFlags = flags;
  }

  importClaimRecruitmentStateFlags: CallReducerFlags = 'FullUpdate';
  importClaimRecruitmentState(flags: CallReducerFlags) {
    this.importClaimRecruitmentStateFlags = flags;
  }

  importClaimStateFlags: CallReducerFlags = 'FullUpdate';
  importClaimState(flags: CallReducerFlags) {
    this.importClaimStateFlags = flags;
  }

  importClaimTechDescFlags: CallReducerFlags = 'FullUpdate';
  importClaimTechDesc(flags: CallReducerFlags) {
    this.importClaimTechDescFlags = flags;
  }

  importClaimTechStateFlags: CallReducerFlags = 'FullUpdate';
  importClaimTechState(flags: CallReducerFlags) {
    this.importClaimTechStateFlags = flags;
  }

  importClaimTileCostFlags: CallReducerFlags = 'FullUpdate';
  importClaimTileCost(flags: CallReducerFlags) {
    this.importClaimTileCostFlags = flags;
  }

  importClaimTileStateFlags: CallReducerFlags = 'FullUpdate';
  importClaimTileState(flags: CallReducerFlags) {
    this.importClaimTileStateFlags = flags;
  }

  importClimbRequirementDescFlags: CallReducerFlags = 'FullUpdate';
  importClimbRequirementDesc(flags: CallReducerFlags) {
    this.importClimbRequirementDescFlags = flags;
  }

  importClothingDescFlags: CallReducerFlags = 'FullUpdate';
  importClothingDesc(flags: CallReducerFlags) {
    this.importClothingDescFlags = flags;
  }

  importCollectibleDescFlags: CallReducerFlags = 'FullUpdate';
  importCollectibleDesc(flags: CallReducerFlags) {
    this.importCollectibleDescFlags = flags;
  }

  importCombatActionDescFlags: CallReducerFlags = 'FullUpdate';
  importCombatActionDesc(flags: CallReducerFlags) {
    this.importCombatActionDescFlags = flags;
  }

  importCombatStateFlags: CallReducerFlags = 'FullUpdate';
  importCombatState(flags: CallReducerFlags) {
    this.importCombatStateFlags = flags;
  }

  importConfigFlags: CallReducerFlags = 'FullUpdate';
  importConfig(flags: CallReducerFlags) {
    this.importConfigFlags = flags;
  }

  importConstructionRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  importConstructionRecipeDesc(flags: CallReducerFlags) {
    this.importConstructionRecipeDescFlags = flags;
  }

  importCraftingRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  importCraftingRecipeDesc(flags: CallReducerFlags) {
    this.importCraftingRecipeDescFlags = flags;
  }

  importDeconstructionRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  importDeconstructionRecipeDesc(flags: CallReducerFlags) {
    this.importDeconstructionRecipeDescFlags = flags;
  }

  importDeployableDescFlags: CallReducerFlags = 'FullUpdate';
  importDeployableDesc(flags: CallReducerFlags) {
    this.importDeployableDescFlags = flags;
  }

  importDeployableStateFlags: CallReducerFlags = 'FullUpdate';
  importDeployableState(flags: CallReducerFlags) {
    this.importDeployableStateFlags = flags;
  }

  importDimensionDescriptionStateFlags: CallReducerFlags = 'FullUpdate';
  importDimensionDescriptionState(flags: CallReducerFlags) {
    this.importDimensionDescriptionStateFlags = flags;
  }

  importDimensionNetworkDescriptionStateFlags: CallReducerFlags = 'FullUpdate';
  importDimensionNetworkDescriptionState(flags: CallReducerFlags) {
    this.importDimensionNetworkDescriptionStateFlags = flags;
  }

  importDistantVisibleEntityDescFlags: CallReducerFlags = 'FullUpdate';
  importDistantVisibleEntityDesc(flags: CallReducerFlags) {
    this.importDistantVisibleEntityDescFlags = flags;
  }

  importDroppedInventoryStateFlags: CallReducerFlags = 'FullUpdate';
  importDroppedInventoryState(flags: CallReducerFlags) {
    this.importDroppedInventoryStateFlags = flags;
  }

  importElevatorDescFlags: CallReducerFlags = 'FullUpdate';
  importElevatorDesc(flags: CallReducerFlags) {
    this.importElevatorDescFlags = flags;
  }

  importEmoteDescFlags: CallReducerFlags = 'FullUpdate';
  importEmoteDesc(flags: CallReducerFlags) {
    this.importEmoteDescFlags = flags;
  }

  importEmpireColorsDescFlags: CallReducerFlags = 'FullUpdate';
  importEmpireColorsDesc(flags: CallReducerFlags) {
    this.importEmpireColorsDescFlags = flags;
  }

  importEmpireIconDescFlags: CallReducerFlags = 'FullUpdate';
  importEmpireIconDesc(flags: CallReducerFlags) {
    this.importEmpireIconDescFlags = flags;
  }

  importEmpireNotificationDescFlags: CallReducerFlags = 'FullUpdate';
  importEmpireNotificationDesc(flags: CallReducerFlags) {
    this.importEmpireNotificationDescFlags = flags;
  }

  importEmpireRankDescFlags: CallReducerFlags = 'FullUpdate';
  importEmpireRankDesc(flags: CallReducerFlags) {
    this.importEmpireRankDescFlags = flags;
  }

  importEmpireSuppliesDescFlags: CallReducerFlags = 'FullUpdate';
  importEmpireSuppliesDesc(flags: CallReducerFlags) {
    this.importEmpireSuppliesDescFlags = flags;
  }

  importEmpireTerritoryDescFlags: CallReducerFlags = 'FullUpdate';
  importEmpireTerritoryDesc(flags: CallReducerFlags) {
    this.importEmpireTerritoryDescFlags = flags;
  }

  importEnemyAiParamsDescFlags: CallReducerFlags = 'FullUpdate';
  importEnemyAiParamsDesc(flags: CallReducerFlags) {
    this.importEnemyAiParamsDescFlags = flags;
  }

  importEnemyDescFlags: CallReducerFlags = 'FullUpdate';
  importEnemyDesc(flags: CallReducerFlags) {
    this.importEnemyDescFlags = flags;
  }

  importEnemyStateFlags: CallReducerFlags = 'FullUpdate';
  importEnemyState(flags: CallReducerFlags) {
    this.importEnemyStateFlags = flags;
  }

  importEnvironmentDebuffDescFlags: CallReducerFlags = 'FullUpdate';
  importEnvironmentDebuffDesc(flags: CallReducerFlags) {
    this.importEnvironmentDebuffDescFlags = flags;
  }

  importEquipmentDescFlags: CallReducerFlags = 'FullUpdate';
  importEquipmentDesc(flags: CallReducerFlags) {
    this.importEquipmentDescFlags = flags;
  }

  importEquipmentStateFlags: CallReducerFlags = 'FullUpdate';
  importEquipmentState(flags: CallReducerFlags) {
    this.importEquipmentStateFlags = flags;
  }

  importExperienceStateFlags: CallReducerFlags = 'FullUpdate';
  importExperienceState(flags: CallReducerFlags) {
    this.importExperienceStateFlags = flags;
  }

  importExplorationChunksStateFlags: CallReducerFlags = 'FullUpdate';
  importExplorationChunksState(flags: CallReducerFlags) {
    this.importExplorationChunksStateFlags = flags;
  }

  importExtractionRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  importExtractionRecipeDesc(flags: CallReducerFlags) {
    this.importExtractionRecipeDescFlags = flags;
  }

  importFoodDescFlags: CallReducerFlags = 'FullUpdate';
  importFoodDesc(flags: CallReducerFlags) {
    this.importFoodDescFlags = flags;
  }

  importFootprintTileStateFlags: CallReducerFlags = 'FullUpdate';
  importFootprintTileState(flags: CallReducerFlags) {
    this.importFootprintTileStateFlags = flags;
  }

  importGateDescFlags: CallReducerFlags = 'FullUpdate';
  importGateDesc(flags: CallReducerFlags) {
    this.importGateDescFlags = flags;
  }

  importGlobalsFlags: CallReducerFlags = 'FullUpdate';
  importGlobals(flags: CallReducerFlags) {
    this.importGlobalsFlags = flags;
  }

  importGrowthStateFlags: CallReducerFlags = 'FullUpdate';
  importGrowthState(flags: CallReducerFlags) {
    this.importGrowthStateFlags = flags;
  }

  importHealthStateFlags: CallReducerFlags = 'FullUpdate';
  importHealthState(flags: CallReducerFlags) {
    this.importHealthStateFlags = flags;
  }

  importHerdCacheFlags: CallReducerFlags = 'FullUpdate';
  importHerdCache(flags: CallReducerFlags) {
    this.importHerdCacheFlags = flags;
  }

  importHexiteExchangeEntryDescFlags: CallReducerFlags = 'FullUpdate';
  importHexiteExchangeEntryDesc(flags: CallReducerFlags) {
    this.importHexiteExchangeEntryDescFlags = flags;
  }

  importIdentityRoleFlags: CallReducerFlags = 'FullUpdate';
  importIdentityRole(flags: CallReducerFlags) {
    this.importIdentityRoleFlags = flags;
  }

  importInteriorCollapseTriggerStateFlags: CallReducerFlags = 'FullUpdate';
  importInteriorCollapseTriggerState(flags: CallReducerFlags) {
    this.importInteriorCollapseTriggerStateFlags = flags;
  }

  importInteriorEnvironmentDescFlags: CallReducerFlags = 'FullUpdate';
  importInteriorEnvironmentDesc(flags: CallReducerFlags) {
    this.importInteriorEnvironmentDescFlags = flags;
  }

  importInteriorInstanceDescFlags: CallReducerFlags = 'FullUpdate';
  importInteriorInstanceDesc(flags: CallReducerFlags) {
    this.importInteriorInstanceDescFlags = flags;
  }

  importInteriorNetworkDescFlags: CallReducerFlags = 'FullUpdate';
  importInteriorNetworkDesc(flags: CallReducerFlags) {
    this.importInteriorNetworkDescFlags = flags;
  }

  importInteriorPortalConnectionsDescFlags: CallReducerFlags = 'FullUpdate';
  importInteriorPortalConnectionsDesc(flags: CallReducerFlags) {
    this.importInteriorPortalConnectionsDescFlags = flags;
  }

  importInteriorShapeDescFlags: CallReducerFlags = 'FullUpdate';
  importInteriorShapeDesc(flags: CallReducerFlags) {
    this.importInteriorShapeDescFlags = flags;
  }

  importInteriorSpawnDescFlags: CallReducerFlags = 'FullUpdate';
  importInteriorSpawnDesc(flags: CallReducerFlags) {
    this.importInteriorSpawnDescFlags = flags;
  }

  importInventoryStateFlags: CallReducerFlags = 'FullUpdate';
  importInventoryState(flags: CallReducerFlags) {
    this.importInventoryStateFlags = flags;
  }

  importItemConversionRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  importItemConversionRecipeDesc(flags: CallReducerFlags) {
    this.importItemConversionRecipeDescFlags = flags;
  }

  importItemDescFlags: CallReducerFlags = 'FullUpdate';
  importItemDesc(flags: CallReducerFlags) {
    this.importItemDescFlags = flags;
  }

  importItemListDescFlags: CallReducerFlags = 'FullUpdate';
  importItemListDesc(flags: CallReducerFlags) {
    this.importItemListDescFlags = flags;
  }

  importKnowledgeAchievementStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeAchievementState(flags: CallReducerFlags) {
    this.importKnowledgeAchievementStateFlags = flags;
  }

  importKnowledgeBattleActionStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeBattleActionState(flags: CallReducerFlags) {
    this.importKnowledgeBattleActionStateFlags = flags;
  }

  importKnowledgeBuildingStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeBuildingState(flags: CallReducerFlags) {
    this.importKnowledgeBuildingStateFlags = flags;
  }

  importKnowledgeCargoStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeCargoState(flags: CallReducerFlags) {
    this.importKnowledgeCargoStateFlags = flags;
  }

  importKnowledgeConstructionStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeConstructionState(flags: CallReducerFlags) {
    this.importKnowledgeConstructionStateFlags = flags;
  }

  importKnowledgeCraftStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeCraftState(flags: CallReducerFlags) {
    this.importKnowledgeCraftStateFlags = flags;
  }

  importKnowledgeDeployableStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeDeployableState(flags: CallReducerFlags) {
    this.importKnowledgeDeployableStateFlags = flags;
  }

  importKnowledgeEnemyStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeEnemyState(flags: CallReducerFlags) {
    this.importKnowledgeEnemyStateFlags = flags;
  }

  importKnowledgeExtractStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeExtractState(flags: CallReducerFlags) {
    this.importKnowledgeExtractStateFlags = flags;
  }

  importKnowledgeItemStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeItemState(flags: CallReducerFlags) {
    this.importKnowledgeItemStateFlags = flags;
  }

  importKnowledgeLoreStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeLoreState(flags: CallReducerFlags) {
    this.importKnowledgeLoreStateFlags = flags;
  }

  importKnowledgeNpcStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeNpcState(flags: CallReducerFlags) {
    this.importKnowledgeNpcStateFlags = flags;
  }

  importKnowledgePavingStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgePavingState(flags: CallReducerFlags) {
    this.importKnowledgePavingStateFlags = flags;
  }

  importKnowledgePillarShapingStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgePillarShapingState(flags: CallReducerFlags) {
    this.importKnowledgePillarShapingStateFlags = flags;
  }

  importKnowledgeResourcePlacementStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeResourcePlacementState(flags: CallReducerFlags) {
    this.importKnowledgeResourcePlacementStateFlags = flags;
  }

  importKnowledgeResourceStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeResourceState(flags: CallReducerFlags) {
    this.importKnowledgeResourceStateFlags = flags;
  }

  importKnowledgeRuinsStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeRuinsState(flags: CallReducerFlags) {
    this.importKnowledgeRuinsStateFlags = flags;
  }

  importKnowledgeScrollDescFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeScrollDesc(flags: CallReducerFlags) {
    this.importKnowledgeScrollDescFlags = flags;
  }

  importKnowledgeScrollTypeDescFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeScrollTypeDesc(flags: CallReducerFlags) {
    this.importKnowledgeScrollTypeDescFlags = flags;
  }

  importKnowledgeSecondaryStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeSecondaryState(flags: CallReducerFlags) {
    this.importKnowledgeSecondaryStateFlags = flags;
  }

  importKnowledgeStatModifierDescFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeStatModifierDesc(flags: CallReducerFlags) {
    this.importKnowledgeStatModifierDescFlags = flags;
  }

  importKnowledgeVaultStateFlags: CallReducerFlags = 'FullUpdate';
  importKnowledgeVaultState(flags: CallReducerFlags) {
    this.importKnowledgeVaultStateFlags = flags;
  }

  importLocationCacheFlags: CallReducerFlags = 'FullUpdate';
  importLocationCache(flags: CallReducerFlags) {
    this.importLocationCacheFlags = flags;
  }

  importLocationStateFlags: CallReducerFlags = 'FullUpdate';
  importLocationState(flags: CallReducerFlags) {
    this.importLocationStateFlags = flags;
  }

  importLootChestDescFlags: CallReducerFlags = 'FullUpdate';
  importLootChestDesc(flags: CallReducerFlags) {
    this.importLootChestDescFlags = flags;
  }

  importLootChestStateFlags: CallReducerFlags = 'FullUpdate';
  importLootChestState(flags: CallReducerFlags) {
    this.importLootChestStateFlags = flags;
  }

  importLootRarityDescFlags: CallReducerFlags = 'FullUpdate';
  importLootRarityDesc(flags: CallReducerFlags) {
    this.importLootRarityDescFlags = flags;
  }

  importLootTableDescFlags: CallReducerFlags = 'FullUpdate';
  importLootTableDesc(flags: CallReducerFlags) {
    this.importLootTableDescFlags = flags;
  }

  importMobileEntityStateFlags: CallReducerFlags = 'FullUpdate';
  importMobileEntityState(flags: CallReducerFlags) {
    this.importMobileEntityStateFlags = flags;
  }

  importMountingStateFlags: CallReducerFlags = 'FullUpdate';
  importMountingState(flags: CallReducerFlags) {
    this.importMountingStateFlags = flags;
  }

  importNpcDescFlags: CallReducerFlags = 'FullUpdate';
  importNpcDesc(flags: CallReducerFlags) {
    this.importNpcDescFlags = flags;
  }

  importNpcStateFlags: CallReducerFlags = 'FullUpdate';
  importNpcState(flags: CallReducerFlags) {
    this.importNpcStateFlags = flags;
  }

  importOnboardingRewardDescFlags: CallReducerFlags = 'FullUpdate';
  importOnboardingRewardDesc(flags: CallReducerFlags) {
    this.importOnboardingRewardDescFlags = flags;
  }

  importOnboardingStateFlags: CallReducerFlags = 'FullUpdate';
  importOnboardingState(flags: CallReducerFlags) {
    this.importOnboardingStateFlags = flags;
  }

  importParametersDescFlags: CallReducerFlags = 'FullUpdate';
  importParametersDesc(flags: CallReducerFlags) {
    this.importParametersDescFlags = flags;
  }

  importPathfindingDescFlags: CallReducerFlags = 'FullUpdate';
  importPathfindingDesc(flags: CallReducerFlags) {
    this.importPathfindingDescFlags = flags;
  }

  importPavedTileStateFlags: CallReducerFlags = 'FullUpdate';
  importPavedTileState(flags: CallReducerFlags) {
    this.importPavedTileStateFlags = flags;
  }

  importPavingTileDescFlags: CallReducerFlags = 'FullUpdate';
  importPavingTileDesc(flags: CallReducerFlags) {
    this.importPavingTileDescFlags = flags;
  }

  importPillarShapingDescFlags: CallReducerFlags = 'FullUpdate';
  importPillarShapingDesc(flags: CallReducerFlags) {
    this.importPillarShapingDescFlags = flags;
  }

  importPlayerActionDescFlags: CallReducerFlags = 'FullUpdate';
  importPlayerActionDesc(flags: CallReducerFlags) {
    this.importPlayerActionDescFlags = flags;
  }

  importPlayerActionStateFlags: CallReducerFlags = 'FullUpdate';
  importPlayerActionState(flags: CallReducerFlags) {
    this.importPlayerActionStateFlags = flags;
  }

  importPlayerHousingDescFlags: CallReducerFlags = 'FullUpdate';
  importPlayerHousingDesc(flags: CallReducerFlags) {
    this.importPlayerHousingDescFlags = flags;
  }

  importPlayerPrefsStateFlags: CallReducerFlags = 'FullUpdate';
  importPlayerPrefsState(flags: CallReducerFlags) {
    this.importPlayerPrefsStateFlags = flags;
  }

  importPlayerStateFlags: CallReducerFlags = 'FullUpdate';
  importPlayerState(flags: CallReducerFlags) {
    this.importPlayerStateFlags = flags;
  }

  importPortalStateFlags: CallReducerFlags = 'FullUpdate';
  importPortalState(flags: CallReducerFlags) {
    this.importPortalStateFlags = flags;
  }

  importPrivateParametersDescFlags: CallReducerFlags = 'FullUpdate';
  importPrivateParametersDesc(flags: CallReducerFlags) {
    this.importPrivateParametersDescFlags = flags;
  }

  importProgressiveActionStateFlags: CallReducerFlags = 'FullUpdate';
  importProgressiveActionState(flags: CallReducerFlags) {
    this.importProgressiveActionStateFlags = flags;
  }

  importProjectSiteStateFlags: CallReducerFlags = 'FullUpdate';
  importProjectSiteState(flags: CallReducerFlags) {
    this.importProjectSiteStateFlags = flags;
  }

  importRentStateFlags: CallReducerFlags = 'FullUpdate';
  importRentState(flags: CallReducerFlags) {
    this.importRentStateFlags = flags;
  }

  importReservedNameDescFlags: CallReducerFlags = 'FullUpdate';
  importReservedNameDesc(flags: CallReducerFlags) {
    this.importReservedNameDescFlags = flags;
  }

  importResourceClumpDescFlags: CallReducerFlags = 'FullUpdate';
  importResourceClumpDesc(flags: CallReducerFlags) {
    this.importResourceClumpDescFlags = flags;
  }

  importResourceCountFlags: CallReducerFlags = 'FullUpdate';
  importResourceCount(flags: CallReducerFlags) {
    this.importResourceCountFlags = flags;
  }

  importResourceDescFlags: CallReducerFlags = 'FullUpdate';
  importResourceDesc(flags: CallReducerFlags) {
    this.importResourceDescFlags = flags;
  }

  importResourceGrowthRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  importResourceGrowthRecipeDesc(flags: CallReducerFlags) {
    this.importResourceGrowthRecipeDescFlags = flags;
  }

  importResourcePlacementRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  importResourcePlacementRecipeDesc(flags: CallReducerFlags) {
    this.importResourcePlacementRecipeDescFlags = flags;
  }

  importResourceStateFlags: CallReducerFlags = 'FullUpdate';
  importResourceState(flags: CallReducerFlags) {
    this.importResourceStateFlags = flags;
  }

  importResourcesLogFlags: CallReducerFlags = 'FullUpdate';
  importResourcesLog(flags: CallReducerFlags) {
    this.importResourcesLogFlags = flags;
  }

  importSatiationStateFlags: CallReducerFlags = 'FullUpdate';
  importSatiationState(flags: CallReducerFlags) {
    this.importSatiationStateFlags = flags;
  }

  importSecondaryKnowledgeDescFlags: CallReducerFlags = 'FullUpdate';
  importSecondaryKnowledgeDesc(flags: CallReducerFlags) {
    this.importSecondaryKnowledgeDescFlags = flags;
  }

  importServerIdentityFlags: CallReducerFlags = 'FullUpdate';
  importServerIdentity(flags: CallReducerFlags) {
    this.importServerIdentityFlags = flags;
  }

  importSignedInPlayerStateFlags: CallReducerFlags = 'FullUpdate';
  importSignedInPlayerState(flags: CallReducerFlags) {
    this.importSignedInPlayerStateFlags = flags;
  }

  importSkillDescFlags: CallReducerFlags = 'FullUpdate';
  importSkillDesc(flags: CallReducerFlags) {
    this.importSkillDescFlags = flags;
  }

  importStaminaStateFlags: CallReducerFlags = 'FullUpdate';
  importStaminaState(flags: CallReducerFlags) {
    this.importStaminaStateFlags = flags;
  }

  importTargetStateFlags: CallReducerFlags = 'FullUpdate';
  importTargetState(flags: CallReducerFlags) {
    this.importTargetStateFlags = flags;
  }

  importTargetableStateFlags: CallReducerFlags = 'FullUpdate';
  importTargetableState(flags: CallReducerFlags) {
    this.importTargetableStateFlags = flags;
  }

  importTargetingMatrixDescFlags: CallReducerFlags = 'FullUpdate';
  importTargetingMatrixDesc(flags: CallReducerFlags) {
    this.importTargetingMatrixDescFlags = flags;
  }

  importTeleportItemDescFlags: CallReducerFlags = 'FullUpdate';
  importTeleportItemDesc(flags: CallReducerFlags) {
    this.importTeleportItemDescFlags = flags;
  }

  importTerraformRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  importTerraformRecipeDesc(flags: CallReducerFlags) {
    this.importTerraformRecipeDescFlags = flags;
  }

  importTerrainChunkStateFlags: CallReducerFlags = 'FullUpdate';
  importTerrainChunkState(flags: CallReducerFlags) {
    this.importTerrainChunkStateFlags = flags;
  }

  importToolDescFlags: CallReducerFlags = 'FullUpdate';
  importToolDesc(flags: CallReducerFlags) {
    this.importToolDescFlags = flags;
  }

  importToolTypeDescFlags: CallReducerFlags = 'FullUpdate';
  importToolTypeDesc(flags: CallReducerFlags) {
    this.importToolTypeDescFlags = flags;
  }

  importTradeOrderStateFlags: CallReducerFlags = 'FullUpdate';
  importTradeOrderState(flags: CallReducerFlags) {
    this.importTradeOrderStateFlags = flags;
  }

  importTradeSessionStateFlags: CallReducerFlags = 'FullUpdate';
  importTradeSessionState(flags: CallReducerFlags) {
    this.importTradeSessionStateFlags = flags;
  }

  importTravelerTaskDescFlags: CallReducerFlags = 'FullUpdate';
  importTravelerTaskDesc(flags: CallReducerFlags) {
    this.importTravelerTaskDescFlags = flags;
  }

  importTravelerTradeOrderDescFlags: CallReducerFlags = 'FullUpdate';
  importTravelerTradeOrderDesc(flags: CallReducerFlags) {
    this.importTravelerTradeOrderDescFlags = flags;
  }

  importUserModerationStateFlags: CallReducerFlags = 'FullUpdate';
  importUserModerationState(flags: CallReducerFlags) {
    this.importUserModerationStateFlags = flags;
  }

  importUserStateFlags: CallReducerFlags = 'FullUpdate';
  importUserState(flags: CallReducerFlags) {
    this.importUserStateFlags = flags;
  }

  importVaultStateFlags: CallReducerFlags = 'FullUpdate';
  importVaultState(flags: CallReducerFlags) {
    this.importVaultStateFlags = flags;
  }

  importWallDescFlags: CallReducerFlags = 'FullUpdate';
  importWallDesc(flags: CallReducerFlags) {
    this.importWallDescFlags = flags;
  }

  importWeaponDescFlags: CallReducerFlags = 'FullUpdate';
  importWeaponDesc(flags: CallReducerFlags) {
    this.importWeaponDescFlags = flags;
  }

  importWeaponTypeDescFlags: CallReducerFlags = 'FullUpdate';
  importWeaponTypeDesc(flags: CallReducerFlags) {
    this.importWeaponTypeDescFlags = flags;
  }

  importWorldRegionNameStateFlags: CallReducerFlags = 'FullUpdate';
  importWorldRegionNameState(flags: CallReducerFlags) {
    this.importWorldRegionNameStateFlags = flags;
  }

  importWorldRegionStateFlags: CallReducerFlags = 'FullUpdate';
  importWorldRegionState(flags: CallReducerFlags) {
    this.importWorldRegionStateFlags = flags;
  }

  insertDeveloperIdentityFlags: CallReducerFlags = 'FullUpdate';
  insertDeveloperIdentity(flags: CallReducerFlags) {
    this.insertDeveloperIdentityFlags = flags;
  }

  insertResourcesLogFlags: CallReducerFlags = 'FullUpdate';
  insertResourcesLog(flags: CallReducerFlags) {
    this.insertResourcesLogFlags = flags;
  }

  insertTerrainChunkFlags: CallReducerFlags = 'FullUpdate';
  insertTerrainChunk(flags: CallReducerFlags) {
    this.insertTerrainChunkFlags = flags;
  }

  interiorSetCollapsedFlags: CallReducerFlags = 'FullUpdate';
  interiorSetCollapsed(flags: CallReducerFlags) {
    this.interiorSetCollapsedFlags = flags;
  }

  interiorSetCollapsedScheduledFlags: CallReducerFlags = 'FullUpdate';
  interiorSetCollapsedScheduled(flags: CallReducerFlags) {
    this.interiorSetCollapsedScheduledFlags = flags;
  }

  inventoryCreatePersonalFlags: CallReducerFlags = 'FullUpdate';
  inventoryCreatePersonal(flags: CallReducerFlags) {
    this.inventoryCreatePersonalFlags = flags;
  }

  inventorySortFlags: CallReducerFlags = 'FullUpdate';
  inventorySort(flags: CallReducerFlags) {
    this.inventorySortFlags = flags;
  }

  itemConvertFlags: CallReducerFlags = 'FullUpdate';
  itemConvert(flags: CallReducerFlags) {
    this.itemConvertFlags = flags;
  }

  itemConvertStartFlags: CallReducerFlags = 'FullUpdate';
  itemConvertStart(flags: CallReducerFlags) {
    this.itemConvertStartFlags = flags;
  }

  itemDropFlags: CallReducerFlags = 'FullUpdate';
  itemDrop(flags: CallReducerFlags) {
    this.itemDropFlags = flags;
  }

  itemPickUpFlags: CallReducerFlags = 'FullUpdate';
  itemPickUp(flags: CallReducerFlags) {
    this.itemPickUpFlags = flags;
  }

  itemStackMoveFlags: CallReducerFlags = 'FullUpdate';
  itemStackMove(flags: CallReducerFlags) {
    this.itemStackMoveFlags = flags;
  }

  itemStackMoveAllFlags: CallReducerFlags = 'FullUpdate';
  itemStackMoveAll(flags: CallReducerFlags) {
    this.itemStackMoveAllFlags = flags;
  }

  itemStackSplitFlags: CallReducerFlags = 'FullUpdate';
  itemStackSplit(flags: CallReducerFlags) {
    this.itemStackSplitFlags = flags;
  }

  itemUseFlags: CallReducerFlags = 'FullUpdate';
  itemUse(flags: CallReducerFlags) {
    this.itemUseFlags = flags;
  }

  itemUseStartFlags: CallReducerFlags = 'FullUpdate';
  itemUseStart(flags: CallReducerFlags) {
    this.itemUseStartFlags = flags;
  }

  loadConfigFlags: CallReducerFlags = 'FullUpdate';
  loadConfig(flags: CallReducerFlags) {
    this.loadConfigFlags = flags;
  }

  logClaimMemberLeaderboardFlags: CallReducerFlags = 'FullUpdate';
  logClaimMemberLeaderboard(flags: CallReducerFlags) {
    this.logClaimMemberLeaderboardFlags = flags;
  }

  logClaimTierLeaderboardFlags: CallReducerFlags = 'FullUpdate';
  logClaimTierLeaderboard(flags: CallReducerFlags) {
    this.logClaimTierLeaderboardFlags = flags;
  }

  lootChestDespawnFlags: CallReducerFlags = 'FullUpdate';
  lootChestDespawn(flags: CallReducerFlags) {
    this.lootChestDespawnFlags = flags;
  }

  lootChestSpawnFlags: CallReducerFlags = 'FullUpdate';
  lootChestSpawn(flags: CallReducerFlags) {
    this.lootChestSpawnFlags = flags;
  }

  npcAiAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  npcAiAgentLoop(flags: CallReducerFlags) {
    this.npcAiAgentLoopFlags = flags;
  }

  onDurabilityZeroFlags: CallReducerFlags = 'FullUpdate';
  onDurabilityZero(flags: CallReducerFlags) {
    this.onDurabilityZeroFlags = flags;
  }

  onInterModuleMessageProcessedFlags: CallReducerFlags = 'FullUpdate';
  onInterModuleMessageProcessed(flags: CallReducerFlags) {
    this.onInterModuleMessageProcessedFlags = flags;
  }

  orderCancelFlags: CallReducerFlags = 'FullUpdate';
  orderCancel(flags: CallReducerFlags) {
    this.orderCancelFlags = flags;
  }

  orderCollectFlags: CallReducerFlags = 'FullUpdate';
  orderCollect(flags: CallReducerFlags) {
    this.orderCollectFlags = flags;
  }

  orderEditBuyOrderFlags: CallReducerFlags = 'FullUpdate';
  orderEditBuyOrder(flags: CallReducerFlags) {
    this.orderEditBuyOrderFlags = flags;
  }

  orderEditSellOrderFlags: CallReducerFlags = 'FullUpdate';
  orderEditSellOrder(flags: CallReducerFlags) {
    this.orderEditSellOrderFlags = flags;
  }

  orderPostBuyOrderFlags: CallReducerFlags = 'FullUpdate';
  orderPostBuyOrder(flags: CallReducerFlags) {
    this.orderPostBuyOrderFlags = flags;
  }

  orderPostSellOrderFlags: CallReducerFlags = 'FullUpdate';
  orderPostSellOrder(flags: CallReducerFlags) {
    this.orderPostSellOrderFlags = flags;
  }

  passiveCraftCancelFlags: CallReducerFlags = 'FullUpdate';
  passiveCraftCancel(flags: CallReducerFlags) {
    this.passiveCraftCancelFlags = flags;
  }

  passiveCraftCollectFlags: CallReducerFlags = 'FullUpdate';
  passiveCraftCollect(flags: CallReducerFlags) {
    this.passiveCraftCollectFlags = flags;
  }

  passiveCraftCollectAllFlags: CallReducerFlags = 'FullUpdate';
  passiveCraftCollectAll(flags: CallReducerFlags) {
    this.passiveCraftCollectAllFlags = flags;
  }

  passiveCraftProcessFlags: CallReducerFlags = 'FullUpdate';
  passiveCraftProcess(flags: CallReducerFlags) {
    this.passiveCraftProcessFlags = flags;
  }

  passiveCraftQueueFlags: CallReducerFlags = 'FullUpdate';
  passiveCraftQueue(flags: CallReducerFlags) {
    this.passiveCraftQueueFlags = flags;
  }

  pausePlayTimerFlags: CallReducerFlags = 'FullUpdate';
  pausePlayTimer(flags: CallReducerFlags) {
    this.pausePlayTimerFlags = flags;
  }

  pavingDestroyTileFlags: CallReducerFlags = 'FullUpdate';
  pavingDestroyTile(flags: CallReducerFlags) {
    this.pavingDestroyTileFlags = flags;
  }

  pavingDestroyTileStartFlags: CallReducerFlags = 'FullUpdate';
  pavingDestroyTileStart(flags: CallReducerFlags) {
    this.pavingDestroyTileStartFlags = flags;
  }

  pavingPlaceTileFlags: CallReducerFlags = 'FullUpdate';
  pavingPlaceTile(flags: CallReducerFlags) {
    this.pavingPlaceTileFlags = flags;
  }

  pavingPlaceTileStartFlags: CallReducerFlags = 'FullUpdate';
  pavingPlaceTileStart(flags: CallReducerFlags) {
    this.pavingPlaceTileStartFlags = flags;
  }

  permissionEditFlags: CallReducerFlags = 'FullUpdate';
  permissionEdit(flags: CallReducerFlags) {
    this.permissionEditFlags = flags;
  }

  pillarShapingDestroyFlags: CallReducerFlags = 'FullUpdate';
  pillarShapingDestroy(flags: CallReducerFlags) {
    this.pillarShapingDestroyFlags = flags;
  }

  pillarShapingDestroyStartFlags: CallReducerFlags = 'FullUpdate';
  pillarShapingDestroyStart(flags: CallReducerFlags) {
    this.pillarShapingDestroyStartFlags = flags;
  }

  pillarShapingPlacePillarFlags: CallReducerFlags = 'FullUpdate';
  pillarShapingPlacePillar(flags: CallReducerFlags) {
    this.pillarShapingPlacePillarFlags = flags;
  }

  pillarShapingPlacePillarStartFlags: CallReducerFlags = 'FullUpdate';
  pillarShapingPlacePillarStart(flags: CallReducerFlags) {
    this.pillarShapingPlacePillarStartFlags = flags;
  }

  playerActionCancelFlags: CallReducerFlags = 'FullUpdate';
  playerActionCancel(flags: CallReducerFlags) {
    this.playerActionCancelFlags = flags;
  }

  playerCancelRegionTransferFlags: CallReducerFlags = 'FullUpdate';
  playerCancelRegionTransfer(flags: CallReducerFlags) {
    this.playerCancelRegionTransferFlags = flags;
  }

  playerClearActionStateFlags: CallReducerFlags = 'FullUpdate';
  playerClearActionState(flags: CallReducerFlags) {
    this.playerClearActionStateFlags = flags;
  }

  playerClimbFlags: CallReducerFlags = 'FullUpdate';
  playerClimb(flags: CallReducerFlags) {
    this.playerClimbFlags = flags;
  }

  playerClimbStartFlags: CallReducerFlags = 'FullUpdate';
  playerClimbStart(flags: CallReducerFlags) {
    this.playerClimbStartFlags = flags;
  }

  playerCompleteTaskFlags: CallReducerFlags = 'FullUpdate';
  playerCompleteTask(flags: CallReducerFlags) {
    this.playerCompleteTaskFlags = flags;
  }

  playerDeathStartFlags: CallReducerFlags = 'FullUpdate';
  playerDeathStart(flags: CallReducerFlags) {
    this.playerDeathStartFlags = flags;
  }

  playerDismissAlertFlags: CallReducerFlags = 'FullUpdate';
  playerDismissAlert(flags: CallReducerFlags) {
    this.playerDismissAlertFlags = flags;
  }

  playerDuelInitiateFlags: CallReducerFlags = 'FullUpdate';
  playerDuelInitiate(flags: CallReducerFlags) {
    this.playerDuelInitiateFlags = flags;
  }

  playerElevatorArriveFlags: CallReducerFlags = 'FullUpdate';
  playerElevatorArrive(flags: CallReducerFlags) {
    this.playerElevatorArriveFlags = flags;
  }

  playerHousingChangeEntranceFlags: CallReducerFlags = 'FullUpdate';
  playerHousingChangeEntrance(flags: CallReducerFlags) {
    this.playerHousingChangeEntranceFlags = flags;
  }

  playerHousingEnterFlags: CallReducerFlags = 'FullUpdate';
  playerHousingEnter(flags: CallReducerFlags) {
    this.playerHousingEnterFlags = flags;
  }

  playerHousingEvictPlayerFlags: CallReducerFlags = 'FullUpdate';
  playerHousingEvictPlayer(flags: CallReducerFlags) {
    this.playerHousingEvictPlayerFlags = flags;
  }

  playerHousingEvictPlayerCompleteFlags: CallReducerFlags = 'FullUpdate';
  playerHousingEvictPlayerComplete(flags: CallReducerFlags) {
    this.playerHousingEvictPlayerCompleteFlags = flags;
  }

  playerHousingIncomeAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  playerHousingIncomeAgentLoop(flags: CallReducerFlags) {
    this.playerHousingIncomeAgentLoopFlags = flags;
  }

  playerHousingRequestAccessFlags: CallReducerFlags = 'FullUpdate';
  playerHousingRequestAccess(flags: CallReducerFlags) {
    this.playerHousingRequestAccessFlags = flags;
  }

  playerHousingUpdateFlags: CallReducerFlags = 'FullUpdate';
  playerHousingUpdate(flags: CallReducerFlags) {
    this.playerHousingUpdateFlags = flags;
  }

  playerMoveFlags: CallReducerFlags = 'FullUpdate';
  playerMove(flags: CallReducerFlags) {
    this.playerMoveFlags = flags;
  }

  playerNotificationEventReducerFlags: CallReducerFlags = 'FullUpdate';
  playerNotificationEventReducer(flags: CallReducerFlags) {
    this.playerNotificationEventReducerFlags = flags;
  }

  playerQueueJoinFlags: CallReducerFlags = 'FullUpdate';
  playerQueueJoin(flags: CallReducerFlags) {
    this.playerQueueJoinFlags = flags;
  }

  playerQueueLeaveFlags: CallReducerFlags = 'FullUpdate';
  playerQueueLeave(flags: CallReducerFlags) {
    this.playerQueueLeaveFlags = flags;
  }

  playerRegenAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  playerRegenAgentLoop(flags: CallReducerFlags) {
    this.playerRegenAgentLoopFlags = flags;
  }

  playerRegionCrossoverFlags: CallReducerFlags = 'FullUpdate';
  playerRegionCrossover(flags: CallReducerFlags) {
    this.playerRegionCrossoverFlags = flags;
  }

  playerRegionTransferEventReducerFlags: CallReducerFlags = 'FullUpdate';
  playerRegionTransferEventReducer(flags: CallReducerFlags) {
    this.playerRegionTransferEventReducerFlags = flags;
  }

  playerRespawnFlags: CallReducerFlags = 'FullUpdate';
  playerRespawn(flags: CallReducerFlags) {
    this.playerRespawnFlags = flags;
  }

  playerSetDefaultDeployableFlags: CallReducerFlags = 'FullUpdate';
  playerSetDefaultDeployable(flags: CallReducerFlags) {
    this.playerSetDefaultDeployableFlags = flags;
  }

  playerSetNameOutcomeEventReducerFlags: CallReducerFlags = 'FullUpdate';
  playerSetNameOutcomeEventReducer(flags: CallReducerFlags) {
    this.playerSetNameOutcomeEventReducerFlags = flags;
  }

  playerTeleportHomeFlags: CallReducerFlags = 'FullUpdate';
  playerTeleportHome(flags: CallReducerFlags) {
    this.playerTeleportHomeFlags = flags;
  }

  playerTeleportHomeStartFlags: CallReducerFlags = 'FullUpdate';
  playerTeleportHomeStart(flags: CallReducerFlags) {
    this.playerTeleportHomeStartFlags = flags;
  }

  playerTeleportWaystoneFlags: CallReducerFlags = 'FullUpdate';
  playerTeleportWaystone(flags: CallReducerFlags) {
    this.playerTeleportWaystoneFlags = flags;
  }

  playerTeleportWaystoneStartFlags: CallReducerFlags = 'FullUpdate';
  playerTeleportWaystoneStart(flags: CallReducerFlags) {
    this.playerTeleportWaystoneStartFlags = flags;
  }

  playerUseElevatorFlags: CallReducerFlags = 'FullUpdate';
  playerUseElevator(flags: CallReducerFlags) {
    this.playerUseElevatorFlags = flags;
  }

  playerVoteAnswerFlags: CallReducerFlags = 'FullUpdate';
  playerVoteAnswer(flags: CallReducerFlags) {
    this.playerVoteAnswerFlags = flags;
  }

  playerVoteConcludeFlags: CallReducerFlags = 'FullUpdate';
  playerVoteConclude(flags: CallReducerFlags) {
    this.playerVoteConcludeFlags = flags;
  }

  pocketSwapContentsFlags: CallReducerFlags = 'FullUpdate';
  pocketSwapContents(flags: CallReducerFlags) {
    this.pocketSwapContentsFlags = flags;
  }

  portalEnterFlags: CallReducerFlags = 'FullUpdate';
  portalEnter(flags: CallReducerFlags) {
    this.portalEnterFlags = flags;
  }

  processInterModuleMessageFlags: CallReducerFlags = 'FullUpdate';
  processInterModuleMessage(flags: CallReducerFlags) {
    this.processInterModuleMessageFlags = flags;
  }

  projectSiteAddMaterialsFlags: CallReducerFlags = 'FullUpdate';
  projectSiteAddMaterials(flags: CallReducerFlags) {
    this.projectSiteAddMaterialsFlags = flags;
  }

  projectSiteAdvanceProjectFlags: CallReducerFlags = 'FullUpdate';
  projectSiteAdvanceProject(flags: CallReducerFlags) {
    this.projectSiteAdvanceProjectFlags = flags;
  }

  projectSiteAdvanceProjectStartFlags: CallReducerFlags = 'FullUpdate';
  projectSiteAdvanceProjectStart(flags: CallReducerFlags) {
    this.projectSiteAdvanceProjectStartFlags = flags;
  }

  projectSiteCancelFlags: CallReducerFlags = 'FullUpdate';
  projectSiteCancel(flags: CallReducerFlags) {
    this.projectSiteCancelFlags = flags;
  }

  projectSitePlaceFlags: CallReducerFlags = 'FullUpdate';
  projectSitePlace(flags: CallReducerFlags) {
    this.projectSitePlaceFlags = flags;
  }

  regionPopuplationAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  regionPopuplationAgentLoop(flags: CallReducerFlags) {
    this.regionPopuplationAgentLoopFlags = flags;
  }

  rentAddListingFlags: CallReducerFlags = 'FullUpdate';
  rentAddListing(flags: CallReducerFlags) {
    this.rentAddListingFlags = flags;
  }

  rentAddTenantFlags: CallReducerFlags = 'FullUpdate';
  rentAddTenant(flags: CallReducerFlags) {
    this.rentAddTenantFlags = flags;
  }

  rentCollectEvictionFeeFlags: CallReducerFlags = 'FullUpdate';
  rentCollectEvictionFee(flags: CallReducerFlags) {
    this.rentCollectEvictionFeeFlags = flags;
  }

  rentCollectorAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  rentCollectorAgentLoop(flags: CallReducerFlags) {
    this.rentCollectorAgentLoopFlags = flags;
  }

  rentDepositCoinsFlags: CallReducerFlags = 'FullUpdate';
  rentDepositCoins(flags: CallReducerFlags) {
    this.rentDepositCoinsFlags = flags;
  }

  rentEvictFlags: CallReducerFlags = 'FullUpdate';
  rentEvict(flags: CallReducerFlags) {
    this.rentEvictFlags = flags;
  }

  rentEvictTermFlags: CallReducerFlags = 'FullUpdate';
  rentEvictTerm(flags: CallReducerFlags) {
    this.rentEvictTermFlags = flags;
  }

  rentPurchaseFlags: CallReducerFlags = 'FullUpdate';
  rentPurchase(flags: CallReducerFlags) {
    this.rentPurchaseFlags = flags;
  }

  rentRemoveTenantFlags: CallReducerFlags = 'FullUpdate';
  rentRemoveTenant(flags: CallReducerFlags) {
    this.rentRemoveTenantFlags = flags;
  }

  rentSetDailyRateFlags: CallReducerFlags = 'FullUpdate';
  rentSetDailyRate(flags: CallReducerFlags) {
    this.rentSetDailyRateFlags = flags;
  }

  rentTerminateFlags: CallReducerFlags = 'FullUpdate';
  rentTerminate(flags: CallReducerFlags) {
    this.rentTerminateFlags = flags;
  }

  rentUnlistFlags: CallReducerFlags = 'FullUpdate';
  rentUnlist(flags: CallReducerFlags) {
    this.rentUnlistFlags = flags;
  }

  reportChatMessageFlags: CallReducerFlags = 'FullUpdate';
  reportChatMessage(flags: CallReducerFlags) {
    this.reportChatMessageFlags = flags;
  }

  reportPlayerFlags: CallReducerFlags = 'FullUpdate';
  reportPlayer(flags: CallReducerFlags) {
    this.reportPlayerFlags = flags;
  }

  resetChunkIndexFlags: CallReducerFlags = 'FullUpdate';
  resetChunkIndex(flags: CallReducerFlags) {
    this.resetChunkIndexFlags = flags;
  }

  resetChunkIndexWithDimensionFlags: CallReducerFlags = 'FullUpdate';
  resetChunkIndexWithDimension(flags: CallReducerFlags) {
    this.resetChunkIndexWithDimensionFlags = flags;
  }

  resetMobileEntityPositionFlags: CallReducerFlags = 'FullUpdate';
  resetMobileEntityPosition(flags: CallReducerFlags) {
    this.resetMobileEntityPositionFlags = flags;
  }

  resetOnboardingFlags: CallReducerFlags = 'FullUpdate';
  resetOnboarding(flags: CallReducerFlags) {
    this.resetOnboardingFlags = flags;
  }

  resourceSpawnScheduledFlags: CallReducerFlags = 'FullUpdate';
  resourceSpawnScheduled(flags: CallReducerFlags) {
    this.resourceSpawnScheduledFlags = flags;
  }

  resourcesRegenFlags: CallReducerFlags = 'FullUpdate';
  resourcesRegen(flags: CallReducerFlags) {
    this.resourcesRegenFlags = flags;
  }

  respawnInteriorNpcsFlags: CallReducerFlags = 'FullUpdate';
  respawnInteriorNpcs(flags: CallReducerFlags) {
    this.respawnInteriorNpcsFlags = flags;
  }

  respawnResourceInChunkFlags: CallReducerFlags = 'FullUpdate';
  respawnResourceInChunk(flags: CallReducerFlags) {
    this.respawnResourceInChunkFlags = flags;
  }

  retrieveLostItemFlags: CallReducerFlags = 'FullUpdate';
  retrieveLostItem(flags: CallReducerFlags) {
    this.retrieveLostItemFlags = flags;
  }

  scrollReadFlags: CallReducerFlags = 'FullUpdate';
  scrollRead(flags: CallReducerFlags) {
    this.scrollReadFlags = flags;
  }

  searchForClosestBuildingFlags: CallReducerFlags = 'FullUpdate';
  searchForClosestBuilding(flags: CallReducerFlags) {
    this.searchForClosestBuildingFlags = flags;
  }

  searchForClosestBuildingTypeFlags: CallReducerFlags = 'FullUpdate';
  searchForClosestBuildingType(flags: CallReducerFlags) {
    this.searchForClosestBuildingTypeFlags = flags;
  }

  serverTeleportPlayerFlags: CallReducerFlags = 'FullUpdate';
  serverTeleportPlayer(flags: CallReducerFlags) {
    this.serverTeleportPlayerFlags = flags;
  }

  setHomeFlags: CallReducerFlags = 'FullUpdate';
  setHome(flags: CallReducerFlags) {
    this.setHomeFlags = flags;
  }

  signInFlags: CallReducerFlags = 'FullUpdate';
  signIn(flags: CallReducerFlags) {
    this.signInFlags = flags;
  }

  signOutFlags: CallReducerFlags = 'FullUpdate';
  signOut(flags: CallReducerFlags) {
    this.signOutFlags = flags;
  }

  sleepFlags: CallReducerFlags = 'FullUpdate';
  sleep(flags: CallReducerFlags) {
    this.sleepFlags = flags;
  }

  stageAchievementDescFlags: CallReducerFlags = 'FullUpdate';
  stageAchievementDesc(flags: CallReducerFlags) {
    this.stageAchievementDescFlags = flags;
  }

  stageAlertDescFlags: CallReducerFlags = 'FullUpdate';
  stageAlertDesc(flags: CallReducerFlags) {
    this.stageAlertDescFlags = flags;
  }

  stageBiomeDescFlags: CallReducerFlags = 'FullUpdate';
  stageBiomeDesc(flags: CallReducerFlags) {
    this.stageBiomeDescFlags = flags;
  }

  stageBuffDescFlags: CallReducerFlags = 'FullUpdate';
  stageBuffDesc(flags: CallReducerFlags) {
    this.stageBuffDescFlags = flags;
  }

  stageBuffTypeDescFlags: CallReducerFlags = 'FullUpdate';
  stageBuffTypeDesc(flags: CallReducerFlags) {
    this.stageBuffTypeDescFlags = flags;
  }

  stageBuildingClaimDescFlags: CallReducerFlags = 'FullUpdate';
  stageBuildingClaimDesc(flags: CallReducerFlags) {
    this.stageBuildingClaimDescFlags = flags;
  }

  stageBuildingDescFlags: CallReducerFlags = 'FullUpdate';
  stageBuildingDesc(flags: CallReducerFlags) {
    this.stageBuildingDescFlags = flags;
  }

  stageBuildingPortalDescFlags: CallReducerFlags = 'FullUpdate';
  stageBuildingPortalDesc(flags: CallReducerFlags) {
    this.stageBuildingPortalDescFlags = flags;
  }

  stageBuildingRepairsDescFlags: CallReducerFlags = 'FullUpdate';
  stageBuildingRepairsDesc(flags: CallReducerFlags) {
    this.stageBuildingRepairsDescFlags = flags;
  }

  stageBuildingSpawnDescFlags: CallReducerFlags = 'FullUpdate';
  stageBuildingSpawnDesc(flags: CallReducerFlags) {
    this.stageBuildingSpawnDescFlags = flags;
  }

  stageBuildingTypeDescFlags: CallReducerFlags = 'FullUpdate';
  stageBuildingTypeDesc(flags: CallReducerFlags) {
    this.stageBuildingTypeDescFlags = flags;
  }

  stageCargoDescFlags: CallReducerFlags = 'FullUpdate';
  stageCargoDesc(flags: CallReducerFlags) {
    this.stageCargoDescFlags = flags;
  }

  stageCharacterStatDescFlags: CallReducerFlags = 'FullUpdate';
  stageCharacterStatDesc(flags: CallReducerFlags) {
    this.stageCharacterStatDescFlags = flags;
  }

  stageChestRarityDescFlags: CallReducerFlags = 'FullUpdate';
  stageChestRarityDesc(flags: CallReducerFlags) {
    this.stageChestRarityDescFlags = flags;
  }

  stageClaimTechDescFlags: CallReducerFlags = 'FullUpdate';
  stageClaimTechDesc(flags: CallReducerFlags) {
    this.stageClaimTechDescFlags = flags;
  }

  stageClaimTileCostFlags: CallReducerFlags = 'FullUpdate';
  stageClaimTileCost(flags: CallReducerFlags) {
    this.stageClaimTileCostFlags = flags;
  }

  stageClimbRequirementDescFlags: CallReducerFlags = 'FullUpdate';
  stageClimbRequirementDesc(flags: CallReducerFlags) {
    this.stageClimbRequirementDescFlags = flags;
  }

  stageClothingDescFlags: CallReducerFlags = 'FullUpdate';
  stageClothingDesc(flags: CallReducerFlags) {
    this.stageClothingDescFlags = flags;
  }

  stageCollectibleDescFlags: CallReducerFlags = 'FullUpdate';
  stageCollectibleDesc(flags: CallReducerFlags) {
    this.stageCollectibleDescFlags = flags;
  }

  stageCombatActionDescFlags: CallReducerFlags = 'FullUpdate';
  stageCombatActionDesc(flags: CallReducerFlags) {
    this.stageCombatActionDescFlags = flags;
  }

  stageConstructionRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  stageConstructionRecipeDesc(flags: CallReducerFlags) {
    this.stageConstructionRecipeDescFlags = flags;
  }

  stageCraftingRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  stageCraftingRecipeDesc(flags: CallReducerFlags) {
    this.stageCraftingRecipeDescFlags = flags;
  }

  stageDeconstructionRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  stageDeconstructionRecipeDesc(flags: CallReducerFlags) {
    this.stageDeconstructionRecipeDescFlags = flags;
  }

  stageDeployableDescFlags: CallReducerFlags = 'FullUpdate';
  stageDeployableDesc(flags: CallReducerFlags) {
    this.stageDeployableDescFlags = flags;
  }

  stageDistantVisibleEntityDescFlags: CallReducerFlags = 'FullUpdate';
  stageDistantVisibleEntityDesc(flags: CallReducerFlags) {
    this.stageDistantVisibleEntityDescFlags = flags;
  }

  stageElevatorDescFlags: CallReducerFlags = 'FullUpdate';
  stageElevatorDesc(flags: CallReducerFlags) {
    this.stageElevatorDescFlags = flags;
  }

  stageEmoteDescFlags: CallReducerFlags = 'FullUpdate';
  stageEmoteDesc(flags: CallReducerFlags) {
    this.stageEmoteDescFlags = flags;
  }

  stageEmpireColorsDescFlags: CallReducerFlags = 'FullUpdate';
  stageEmpireColorsDesc(flags: CallReducerFlags) {
    this.stageEmpireColorsDescFlags = flags;
  }

  stageEmpireIconDescFlags: CallReducerFlags = 'FullUpdate';
  stageEmpireIconDesc(flags: CallReducerFlags) {
    this.stageEmpireIconDescFlags = flags;
  }

  stageEmpireNotificationDescFlags: CallReducerFlags = 'FullUpdate';
  stageEmpireNotificationDesc(flags: CallReducerFlags) {
    this.stageEmpireNotificationDescFlags = flags;
  }

  stageEmpireRankDescFlags: CallReducerFlags = 'FullUpdate';
  stageEmpireRankDesc(flags: CallReducerFlags) {
    this.stageEmpireRankDescFlags = flags;
  }

  stageEmpireSuppliesDescFlags: CallReducerFlags = 'FullUpdate';
  stageEmpireSuppliesDesc(flags: CallReducerFlags) {
    this.stageEmpireSuppliesDescFlags = flags;
  }

  stageEmpireTerritoryDescFlags: CallReducerFlags = 'FullUpdate';
  stageEmpireTerritoryDesc(flags: CallReducerFlags) {
    this.stageEmpireTerritoryDescFlags = flags;
  }

  stageEnemyAiParamsDescFlags: CallReducerFlags = 'FullUpdate';
  stageEnemyAiParamsDesc(flags: CallReducerFlags) {
    this.stageEnemyAiParamsDescFlags = flags;
  }

  stageEnemyDescFlags: CallReducerFlags = 'FullUpdate';
  stageEnemyDesc(flags: CallReducerFlags) {
    this.stageEnemyDescFlags = flags;
  }

  stageEnvironmentDebuffDescFlags: CallReducerFlags = 'FullUpdate';
  stageEnvironmentDebuffDesc(flags: CallReducerFlags) {
    this.stageEnvironmentDebuffDescFlags = flags;
  }

  stageEquipmentDescFlags: CallReducerFlags = 'FullUpdate';
  stageEquipmentDesc(flags: CallReducerFlags) {
    this.stageEquipmentDescFlags = flags;
  }

  stageExtractionRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  stageExtractionRecipeDesc(flags: CallReducerFlags) {
    this.stageExtractionRecipeDescFlags = flags;
  }

  stageFoodDescFlags: CallReducerFlags = 'FullUpdate';
  stageFoodDesc(flags: CallReducerFlags) {
    this.stageFoodDescFlags = flags;
  }

  stageGateDescFlags: CallReducerFlags = 'FullUpdate';
  stageGateDesc(flags: CallReducerFlags) {
    this.stageGateDescFlags = flags;
  }

  stageHexiteExchangeEntryDescFlags: CallReducerFlags = 'FullUpdate';
  stageHexiteExchangeEntryDesc(flags: CallReducerFlags) {
    this.stageHexiteExchangeEntryDescFlags = flags;
  }

  stageInteriorEnvironmentDescFlags: CallReducerFlags = 'FullUpdate';
  stageInteriorEnvironmentDesc(flags: CallReducerFlags) {
    this.stageInteriorEnvironmentDescFlags = flags;
  }

  stageInteriorInstanceDescFlags: CallReducerFlags = 'FullUpdate';
  stageInteriorInstanceDesc(flags: CallReducerFlags) {
    this.stageInteriorInstanceDescFlags = flags;
  }

  stageInteriorNetworkDescFlags: CallReducerFlags = 'FullUpdate';
  stageInteriorNetworkDesc(flags: CallReducerFlags) {
    this.stageInteriorNetworkDescFlags = flags;
  }

  stageInteriorPortalConnectionsDescFlags: CallReducerFlags = 'FullUpdate';
  stageInteriorPortalConnectionsDesc(flags: CallReducerFlags) {
    this.stageInteriorPortalConnectionsDescFlags = flags;
  }

  stageInteriorShapeDescFlags: CallReducerFlags = 'FullUpdate';
  stageInteriorShapeDesc(flags: CallReducerFlags) {
    this.stageInteriorShapeDescFlags = flags;
  }

  stageInteriorSpawnDescFlags: CallReducerFlags = 'FullUpdate';
  stageInteriorSpawnDesc(flags: CallReducerFlags) {
    this.stageInteriorSpawnDescFlags = flags;
  }

  stageItemConversionRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  stageItemConversionRecipeDesc(flags: CallReducerFlags) {
    this.stageItemConversionRecipeDescFlags = flags;
  }

  stageItemDescFlags: CallReducerFlags = 'FullUpdate';
  stageItemDesc(flags: CallReducerFlags) {
    this.stageItemDescFlags = flags;
  }

  stageItemListDescFlags: CallReducerFlags = 'FullUpdate';
  stageItemListDesc(flags: CallReducerFlags) {
    this.stageItemListDescFlags = flags;
  }

  stageKnowledgeScrollDescFlags: CallReducerFlags = 'FullUpdate';
  stageKnowledgeScrollDesc(flags: CallReducerFlags) {
    this.stageKnowledgeScrollDescFlags = flags;
  }

  stageKnowledgeScrollTypeDescFlags: CallReducerFlags = 'FullUpdate';
  stageKnowledgeScrollTypeDesc(flags: CallReducerFlags) {
    this.stageKnowledgeScrollTypeDescFlags = flags;
  }

  stageKnowledgeStatModifierDescFlags: CallReducerFlags = 'FullUpdate';
  stageKnowledgeStatModifierDesc(flags: CallReducerFlags) {
    this.stageKnowledgeStatModifierDescFlags = flags;
  }

  stageLootChestDescFlags: CallReducerFlags = 'FullUpdate';
  stageLootChestDesc(flags: CallReducerFlags) {
    this.stageLootChestDescFlags = flags;
  }

  stageLootRarityDescFlags: CallReducerFlags = 'FullUpdate';
  stageLootRarityDesc(flags: CallReducerFlags) {
    this.stageLootRarityDescFlags = flags;
  }

  stageLootTableDescFlags: CallReducerFlags = 'FullUpdate';
  stageLootTableDesc(flags: CallReducerFlags) {
    this.stageLootTableDescFlags = flags;
  }

  stageNpcDescFlags: CallReducerFlags = 'FullUpdate';
  stageNpcDesc(flags: CallReducerFlags) {
    this.stageNpcDescFlags = flags;
  }

  stageOnboardingRewardDescFlags: CallReducerFlags = 'FullUpdate';
  stageOnboardingRewardDesc(flags: CallReducerFlags) {
    this.stageOnboardingRewardDescFlags = flags;
  }

  stageParametersDescFlags: CallReducerFlags = 'FullUpdate';
  stageParametersDesc(flags: CallReducerFlags) {
    this.stageParametersDescFlags = flags;
  }

  stagePathfindingDescFlags: CallReducerFlags = 'FullUpdate';
  stagePathfindingDesc(flags: CallReducerFlags) {
    this.stagePathfindingDescFlags = flags;
  }

  stagePavingTileDescFlags: CallReducerFlags = 'FullUpdate';
  stagePavingTileDesc(flags: CallReducerFlags) {
    this.stagePavingTileDescFlags = flags;
  }

  stagePillarShapingDescFlags: CallReducerFlags = 'FullUpdate';
  stagePillarShapingDesc(flags: CallReducerFlags) {
    this.stagePillarShapingDescFlags = flags;
  }

  stagePlayerActionDescFlags: CallReducerFlags = 'FullUpdate';
  stagePlayerActionDesc(flags: CallReducerFlags) {
    this.stagePlayerActionDescFlags = flags;
  }

  stagePlayerHousingDescFlags: CallReducerFlags = 'FullUpdate';
  stagePlayerHousingDesc(flags: CallReducerFlags) {
    this.stagePlayerHousingDescFlags = flags;
  }

  stagePrivateParametersDescFlags: CallReducerFlags = 'FullUpdate';
  stagePrivateParametersDesc(flags: CallReducerFlags) {
    this.stagePrivateParametersDescFlags = flags;
  }

  stageReservedNameDescFlags: CallReducerFlags = 'FullUpdate';
  stageReservedNameDesc(flags: CallReducerFlags) {
    this.stageReservedNameDescFlags = flags;
  }

  stageResourceClumpDescFlags: CallReducerFlags = 'FullUpdate';
  stageResourceClumpDesc(flags: CallReducerFlags) {
    this.stageResourceClumpDescFlags = flags;
  }

  stageResourceDescFlags: CallReducerFlags = 'FullUpdate';
  stageResourceDesc(flags: CallReducerFlags) {
    this.stageResourceDescFlags = flags;
  }

  stageResourceGrowthRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  stageResourceGrowthRecipeDesc(flags: CallReducerFlags) {
    this.stageResourceGrowthRecipeDescFlags = flags;
  }

  stageResourcePlacementRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  stageResourcePlacementRecipeDesc(flags: CallReducerFlags) {
    this.stageResourcePlacementRecipeDescFlags = flags;
  }

  stageSecondaryKnowledgeDescFlags: CallReducerFlags = 'FullUpdate';
  stageSecondaryKnowledgeDesc(flags: CallReducerFlags) {
    this.stageSecondaryKnowledgeDescFlags = flags;
  }

  stageSkillDescFlags: CallReducerFlags = 'FullUpdate';
  stageSkillDesc(flags: CallReducerFlags) {
    this.stageSkillDescFlags = flags;
  }

  stageTargetingMatrixDescFlags: CallReducerFlags = 'FullUpdate';
  stageTargetingMatrixDesc(flags: CallReducerFlags) {
    this.stageTargetingMatrixDescFlags = flags;
  }

  stageTeleportItemDescFlags: CallReducerFlags = 'FullUpdate';
  stageTeleportItemDesc(flags: CallReducerFlags) {
    this.stageTeleportItemDescFlags = flags;
  }

  stageTerraformRecipeDescFlags: CallReducerFlags = 'FullUpdate';
  stageTerraformRecipeDesc(flags: CallReducerFlags) {
    this.stageTerraformRecipeDescFlags = flags;
  }

  stageToolDescFlags: CallReducerFlags = 'FullUpdate';
  stageToolDesc(flags: CallReducerFlags) {
    this.stageToolDescFlags = flags;
  }

  stageToolTypeDescFlags: CallReducerFlags = 'FullUpdate';
  stageToolTypeDesc(flags: CallReducerFlags) {
    this.stageToolTypeDescFlags = flags;
  }

  stageTravelerTaskDescFlags: CallReducerFlags = 'FullUpdate';
  stageTravelerTaskDesc(flags: CallReducerFlags) {
    this.stageTravelerTaskDescFlags = flags;
  }

  stageTravelerTradeOrderDescFlags: CallReducerFlags = 'FullUpdate';
  stageTravelerTradeOrderDesc(flags: CallReducerFlags) {
    this.stageTravelerTradeOrderDescFlags = flags;
  }

  stageWallDescFlags: CallReducerFlags = 'FullUpdate';
  stageWallDesc(flags: CallReducerFlags) {
    this.stageWallDescFlags = flags;
  }

  stageWeaponDescFlags: CallReducerFlags = 'FullUpdate';
  stageWeaponDesc(flags: CallReducerFlags) {
    this.stageWeaponDescFlags = flags;
  }

  stageWeaponTypeDescFlags: CallReducerFlags = 'FullUpdate';
  stageWeaponTypeDesc(flags: CallReducerFlags) {
    this.stageWeaponTypeDescFlags = flags;
  }

  startAgentsFlags: CallReducerFlags = 'FullUpdate';
  startAgents(flags: CallReducerFlags) {
    this.startAgentsFlags = flags;
  }

  startGeneratingWorldFlags: CallReducerFlags = 'FullUpdate';
  startGeneratingWorld(flags: CallReducerFlags) {
    this.startGeneratingWorldFlags = flags;
  }

  startOnboardingQuestFlags: CallReducerFlags = 'FullUpdate';
  startOnboardingQuest(flags: CallReducerFlags) {
    this.startOnboardingQuestFlags = flags;
  }

  starvingAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  starvingAgentLoop(flags: CallReducerFlags) {
    this.starvingAgentLoopFlags = flags;
  }

  stopAgentsFlags: CallReducerFlags = 'FullUpdate';
  stopAgents(flags: CallReducerFlags) {
    this.stopAgentsFlags = flags;
  }

  synchronizeTimeFlags: CallReducerFlags = 'FullUpdate';
  synchronizeTime(flags: CallReducerFlags) {
    this.synchronizeTimeFlags = flags;
  }

  targetUpdateFlags: CallReducerFlags = 'FullUpdate';
  targetUpdate(flags: CallReducerFlags) {
    this.targetUpdateFlags = flags;
  }

  teleportationEnergyRegenAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  teleportationEnergyRegenAgentLoop(flags: CallReducerFlags) {
    this.teleportationEnergyRegenAgentLoopFlags = flags;
  }

  terraformFlags: CallReducerFlags = 'FullUpdate';
  terraform(flags: CallReducerFlags) {
    this.terraformFlags = flags;
  }

  terraformCancelFlags: CallReducerFlags = 'FullUpdate';
  terraformCancel(flags: CallReducerFlags) {
    this.terraformCancelFlags = flags;
  }

  terraformSetFinalTargetFlags: CallReducerFlags = 'FullUpdate';
  terraformSetFinalTarget(flags: CallReducerFlags) {
    this.terraformSetFinalTargetFlags = flags;
  }

  terraformStartFlags: CallReducerFlags = 'FullUpdate';
  terraformStart(flags: CallReducerFlags) {
    this.terraformStartFlags = flags;
  }

  tradeAcceptFlags: CallReducerFlags = 'FullUpdate';
  tradeAccept(flags: CallReducerFlags) {
    this.tradeAcceptFlags = flags;
  }

  tradeAcceptSessionFlags: CallReducerFlags = 'FullUpdate';
  tradeAcceptSession(flags: CallReducerFlags) {
    this.tradeAcceptSessionFlags = flags;
  }

  tradeAddItemFlags: CallReducerFlags = 'FullUpdate';
  tradeAddItem(flags: CallReducerFlags) {
    this.tradeAddItemFlags = flags;
  }

  tradeCancelServerFlags: CallReducerFlags = 'FullUpdate';
  tradeCancelServer(flags: CallReducerFlags) {
    this.tradeCancelServerFlags = flags;
  }

  tradeDeclineFlags: CallReducerFlags = 'FullUpdate';
  tradeDecline(flags: CallReducerFlags) {
    this.tradeDeclineFlags = flags;
  }

  tradeDeclineSessionFlags: CallReducerFlags = 'FullUpdate';
  tradeDeclineSession(flags: CallReducerFlags) {
    this.tradeDeclineSessionFlags = flags;
  }

  tradeInitiateSessionFlags: CallReducerFlags = 'FullUpdate';
  tradeInitiateSession(flags: CallReducerFlags) {
    this.tradeInitiateSessionFlags = flags;
  }

  tradeRemoveItemFlags: CallReducerFlags = 'FullUpdate';
  tradeRemoveItem(flags: CallReducerFlags) {
    this.tradeRemoveItemFlags = flags;
  }

  tradeSessionsAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  tradeSessionsAgentLoop(flags: CallReducerFlags) {
    this.tradeSessionsAgentLoopFlags = flags;
  }

  tradeSwapPocketsFlags: CallReducerFlags = 'FullUpdate';
  tradeSwapPockets(flags: CallReducerFlags) {
    this.tradeSwapPocketsFlags = flags;
  }

  transferPlayerDelayedFlags: CallReducerFlags = 'FullUpdate';
  transferPlayerDelayed(flags: CallReducerFlags) {
    this.transferPlayerDelayedFlags = flags;
  }

  travelerTaskAgentLoopFlags: CallReducerFlags = 'FullUpdate';
  travelerTaskAgentLoop(flags: CallReducerFlags) {
    this.travelerTaskAgentLoopFlags = flags;
  }

  updateScheduledTimersFromStaticDataFlags: CallReducerFlags = 'FullUpdate';
  updateScheduledTimersFromStaticData(flags: CallReducerFlags) {
    this.updateScheduledTimersFromStaticDataFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get aIDebugState(): AIDebugStateTableHandle {
    return new AIDebugStateTableHandle(this.connection.clientCache.getOrCreateTable<AiDebugState>(REMOTE_MODULE.tables.a_i_debug_state));
  }

  get achievementDesc(): AchievementDescTableHandle {
    return new AchievementDescTableHandle(this.connection.clientCache.getOrCreateTable<AchievementDesc>(REMOTE_MODULE.tables.achievement_desc));
  }

  get actionState(): ActionStateTableHandle {
    return new ActionStateTableHandle(this.connection.clientCache.getOrCreateTable<ActionState>(REMOTE_MODULE.tables.action_state));
  }

  get activeBuffState(): ActiveBuffStateTableHandle {
    return new ActiveBuffStateTableHandle(this.connection.clientCache.getOrCreateTable<ActiveBuffState>(REMOTE_MODULE.tables.active_buff_state));
  }

  get adminBroadcast(): AdminBroadcastTableHandle {
    return new AdminBroadcastTableHandle(this.connection.clientCache.getOrCreateTable<AdminBroadcast>(REMOTE_MODULE.tables.admin_broadcast));
  }

  get adminClearResourceTimer(): AdminClearResourceTimerTableHandle {
    return new AdminClearResourceTimerTableHandle(this.connection.clientCache.getOrCreateTable<AdminClearResourceTimer>(REMOTE_MODULE.tables.admin_clear_resource_timer));
  }

  get adminRestorePlayerStateTimer(): AdminRestorePlayerStateTimerTableHandle {
    return new AdminRestorePlayerStateTimerTableHandle(this.connection.clientCache.getOrCreateTable<AdminRestorePlayerStateTimer>(REMOTE_MODULE.tables.admin_restore_player_state_timer));
  }

  get alertDesc(): AlertDescTableHandle {
    return new AlertDescTableHandle(this.connection.clientCache.getOrCreateTable<AlertDesc>(REMOTE_MODULE.tables.alert_desc));
  }

  get alertState(): AlertStateTableHandle {
    return new AlertStateTableHandle(this.connection.clientCache.getOrCreateTable<AlertState>(REMOTE_MODULE.tables.alert_state));
  }

  get attachedHerdsState(): AttachedHerdsStateTableHandle {
    return new AttachedHerdsStateTableHandle(this.connection.clientCache.getOrCreateTable<AttachedHerdsState>(REMOTE_MODULE.tables.attached_herds_state));
  }

  get attackImpactTimer(): AttackImpactTimerTableHandle {
    return new AttackImpactTimerTableHandle(this.connection.clientCache.getOrCreateTable<AttackImpactTimer>(REMOTE_MODULE.tables.attack_impact_timer));
  }

  get attackOutcomeState(): AttackOutcomeStateTableHandle {
    return new AttackOutcomeStateTableHandle(this.connection.clientCache.getOrCreateTable<AttackOutcomeState>(REMOTE_MODULE.tables.attack_outcome_state));
  }

  get attackTimer(): AttackTimerTableHandle {
    return new AttackTimerTableHandle(this.connection.clientCache.getOrCreateTable<AttackTimer>(REMOTE_MODULE.tables.attack_timer));
  }

  get autoClaimState(): AutoClaimStateTableHandle {
    return new AutoClaimStateTableHandle(this.connection.clientCache.getOrCreateTable<AutoClaimState>(REMOTE_MODULE.tables.auto_claim_state));
  }

  get autoLogoutLoopTimer(): AutoLogoutLoopTimerTableHandle {
    return new AutoLogoutLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<AutoLogoutLoopTimer>(REMOTE_MODULE.tables.auto_logout_loop_timer));
  }

  get barterStallState(): BarterStallStateTableHandle {
    return new BarterStallStateTableHandle(this.connection.clientCache.getOrCreateTable<BarterStallState>(REMOTE_MODULE.tables.barter_stall_state));
  }

  get biomeDesc(): BiomeDescTableHandle {
    return new BiomeDescTableHandle(this.connection.clientCache.getOrCreateTable<BiomeDesc>(REMOTE_MODULE.tables.biome_desc));
  }

  get blockedIdentity(): BlockedIdentityTableHandle {
    return new BlockedIdentityTableHandle(this.connection.clientCache.getOrCreateTable<BlockedIdentity>(REMOTE_MODULE.tables.blocked_identity));
  }

  get buffDesc(): BuffDescTableHandle {
    return new BuffDescTableHandle(this.connection.clientCache.getOrCreateTable<BuffDesc>(REMOTE_MODULE.tables.buff_desc));
  }

  get buffTypeDesc(): BuffTypeDescTableHandle {
    return new BuffTypeDescTableHandle(this.connection.clientCache.getOrCreateTable<BuffTypeDesc>(REMOTE_MODULE.tables.buff_type_desc));
  }

  get buildingClaimDesc(): BuildingClaimDescTableHandle {
    return new BuildingClaimDescTableHandle(this.connection.clientCache.getOrCreateTable<BuildingClaimDesc>(REMOTE_MODULE.tables.building_claim_desc));
  }

  get buildingDecayLoopTimer(): BuildingDecayLoopTimerTableHandle {
    return new BuildingDecayLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<BuildingDecayLoopTimer>(REMOTE_MODULE.tables.building_decay_loop_timer));
  }

  get buildingDesc(): BuildingDescTableHandle {
    return new BuildingDescTableHandle(this.connection.clientCache.getOrCreateTable<BuildingDesc>(REMOTE_MODULE.tables.building_desc));
  }

  get buildingDespawnTimer(): BuildingDespawnTimerTableHandle {
    return new BuildingDespawnTimerTableHandle(this.connection.clientCache.getOrCreateTable<BuildingDespawnTimer>(REMOTE_MODULE.tables.building_despawn_timer));
  }

  get buildingFunctionTypeMappingDesc(): BuildingFunctionTypeMappingDescTableHandle {
    return new BuildingFunctionTypeMappingDescTableHandle(this.connection.clientCache.getOrCreateTable<BuildingFunctionTypeMappingDesc>(REMOTE_MODULE.tables.building_function_type_mapping_desc));
  }

  get buildingNicknameState(): BuildingNicknameStateTableHandle {
    return new BuildingNicknameStateTableHandle(this.connection.clientCache.getOrCreateTable<BuildingNicknameState>(REMOTE_MODULE.tables.building_nickname_state));
  }

  get buildingPortalDesc(): BuildingPortalDescTableHandle {
    return new BuildingPortalDescTableHandle(this.connection.clientCache.getOrCreateTable<BuildingPortalDesc>(REMOTE_MODULE.tables.building_portal_desc));
  }

  get buildingRepairsDesc(): BuildingRepairsDescTableHandle {
    return new BuildingRepairsDescTableHandle(this.connection.clientCache.getOrCreateTable<BuildingRepairsDesc>(REMOTE_MODULE.tables.building_repairs_desc));
  }

  get buildingSpawnDesc(): BuildingSpawnDescTableHandle {
    return new BuildingSpawnDescTableHandle(this.connection.clientCache.getOrCreateTable<BuildingSpawnDesc>(REMOTE_MODULE.tables.building_spawn_desc));
  }

  get buildingState(): BuildingStateTableHandle {
    return new BuildingStateTableHandle(this.connection.clientCache.getOrCreateTable<BuildingState>(REMOTE_MODULE.tables.building_state));
  }

  get buildingTypeDesc(): BuildingTypeDescTableHandle {
    return new BuildingTypeDescTableHandle(this.connection.clientCache.getOrCreateTable<BuildingTypeDesc>(REMOTE_MODULE.tables.building_type_desc));
  }

  get buyOrderState(): BuyOrderStateTableHandle {
    return new BuyOrderStateTableHandle(this.connection.clientCache.getOrCreateTable<AuctionListingState>(REMOTE_MODULE.tables.buy_order_state));
  }

  get cargoDesc(): CargoDescTableHandle {
    return new CargoDescTableHandle(this.connection.clientCache.getOrCreateTable<CargoDesc>(REMOTE_MODULE.tables.cargo_desc));
  }

  get characterStatDesc(): CharacterStatDescTableHandle {
    return new CharacterStatDescTableHandle(this.connection.clientCache.getOrCreateTable<CharacterStatDesc>(REMOTE_MODULE.tables.character_stat_desc));
  }

  get characterStatsState(): CharacterStatsStateTableHandle {
    return new CharacterStatsStateTableHandle(this.connection.clientCache.getOrCreateTable<CharacterStatsState>(REMOTE_MODULE.tables.character_stats_state));
  }

  get chatCleanupTimer(): ChatCleanupTimerTableHandle {
    return new ChatCleanupTimerTableHandle(this.connection.clientCache.getOrCreateTable<ChatCleanupTimer>(REMOTE_MODULE.tables.chat_cleanup_timer));
  }

  get chatMessageState(): ChatMessageStateTableHandle {
    return new ChatMessageStateTableHandle(this.connection.clientCache.getOrCreateTable<ChatMessageState>(REMOTE_MODULE.tables.chat_message_state));
  }

  get chestRarityDesc(): ChestRarityDescTableHandle {
    return new ChestRarityDescTableHandle(this.connection.clientCache.getOrCreateTable<ChestRarityDesc>(REMOTE_MODULE.tables.chest_rarity_desc));
  }

  get claimLocalState(): ClaimLocalStateTableHandle {
    return new ClaimLocalStateTableHandle(this.connection.clientCache.getOrCreateTable<ClaimLocalState>(REMOTE_MODULE.tables.claim_local_state));
  }

  get claimMemberState(): ClaimMemberStateTableHandle {
    return new ClaimMemberStateTableHandle(this.connection.clientCache.getOrCreateTable<ClaimMemberState>(REMOTE_MODULE.tables.claim_member_state));
  }

  get claimRecruitmentState(): ClaimRecruitmentStateTableHandle {
    return new ClaimRecruitmentStateTableHandle(this.connection.clientCache.getOrCreateTable<ClaimRecruitmentState>(REMOTE_MODULE.tables.claim_recruitment_state));
  }

  get claimState(): ClaimStateTableHandle {
    return new ClaimStateTableHandle(this.connection.clientCache.getOrCreateTable<ClaimState>(REMOTE_MODULE.tables.claim_state));
  }

  get claimTechDesc(): ClaimTechDescTableHandle {
    return new ClaimTechDescTableHandle(this.connection.clientCache.getOrCreateTable<ClaimTechDesc>(REMOTE_MODULE.tables.claim_tech_desc));
  }

  get claimTechState(): ClaimTechStateTableHandle {
    return new ClaimTechStateTableHandle(this.connection.clientCache.getOrCreateTable<ClaimTechState>(REMOTE_MODULE.tables.claim_tech_state));
  }

  get claimTechUnlockTimer(): ClaimTechUnlockTimerTableHandle {
    return new ClaimTechUnlockTimerTableHandle(this.connection.clientCache.getOrCreateTable<ClaimTechUnlockTimer>(REMOTE_MODULE.tables.claim_tech_unlock_timer));
  }

  get claimTileCost(): ClaimTileCostTableHandle {
    return new ClaimTileCostTableHandle(this.connection.clientCache.getOrCreateTable<ClaimTileCost>(REMOTE_MODULE.tables.claim_tile_cost));
  }

  get claimTileState(): ClaimTileStateTableHandle {
    return new ClaimTileStateTableHandle(this.connection.clientCache.getOrCreateTable<ClaimTileState>(REMOTE_MODULE.tables.claim_tile_state));
  }

  get climbRequirementDesc(): ClimbRequirementDescTableHandle {
    return new ClimbRequirementDescTableHandle(this.connection.clientCache.getOrCreateTable<ClimbRequirementDesc>(REMOTE_MODULE.tables.climb_requirement_desc));
  }

  get closedListingState(): ClosedListingStateTableHandle {
    return new ClosedListingStateTableHandle(this.connection.clientCache.getOrCreateTable<ClosedListingState>(REMOTE_MODULE.tables.closed_listing_state));
  }

  get clothingDesc(): ClothingDescTableHandle {
    return new ClothingDescTableHandle(this.connection.clientCache.getOrCreateTable<ClothingDesc>(REMOTE_MODULE.tables.clothing_desc));
  }

  get collectStatsTimer(): CollectStatsTimerTableHandle {
    return new CollectStatsTimerTableHandle(this.connection.clientCache.getOrCreateTable<CollectStatsTimer>(REMOTE_MODULE.tables.collect_stats_timer));
  }

  get collectibleDesc(): CollectibleDescTableHandle {
    return new CollectibleDescTableHandle(this.connection.clientCache.getOrCreateTable<CollectibleDesc>(REMOTE_MODULE.tables.collectible_desc));
  }

  get combatActionDesc(): CombatActionDescTableHandle {
    return new CombatActionDescTableHandle(this.connection.clientCache.getOrCreateTable<CombatActionDesc>(REMOTE_MODULE.tables.combat_action_desc));
  }

  get combatState(): CombatStateTableHandle {
    return new CombatStateTableHandle(this.connection.clientCache.getOrCreateTable<CombatState>(REMOTE_MODULE.tables.combat_state));
  }

  get config(): ConfigTableHandle {
    return new ConfigTableHandle(this.connection.clientCache.getOrCreateTable<Config>(REMOTE_MODULE.tables.config));
  }

  get constructionRecipeDesc(): ConstructionRecipeDescTableHandle {
    return new ConstructionRecipeDescTableHandle(this.connection.clientCache.getOrCreateTable<ConstructionRecipeDesc>(REMOTE_MODULE.tables.construction_recipe_desc));
  }

  get craftingRecipeDesc(): CraftingRecipeDescTableHandle {
    return new CraftingRecipeDescTableHandle(this.connection.clientCache.getOrCreateTable<CraftingRecipeDesc>(REMOTE_MODULE.tables.crafting_recipe_desc));
  }

  get dayNightLoopTimer(): DayNightLoopTimerTableHandle {
    return new DayNightLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<DayNightLoopTimer>(REMOTE_MODULE.tables.day_night_loop_timer));
  }

  get deconstructionRecipeDesc(): DeconstructionRecipeDescTableHandle {
    return new DeconstructionRecipeDescTableHandle(this.connection.clientCache.getOrCreateTable<DeconstructionRecipeDesc>(REMOTE_MODULE.tables.deconstruction_recipe_desc));
  }

  get deployableCollectibleState(): DeployableCollectibleStateTableHandle {
    return new DeployableCollectibleStateTableHandle(this.connection.clientCache.getOrCreateTable<DeployableCollectibleState>(REMOTE_MODULE.tables.deployable_collectible_state));
  }

  get deployableDesc(): DeployableDescTableHandle {
    return new DeployableDescTableHandle(this.connection.clientCache.getOrCreateTable<DeployableDesc>(REMOTE_MODULE.tables.deployable_desc));
  }

  get deployableDismountTimer(): DeployableDismountTimerTableHandle {
    return new DeployableDismountTimerTableHandle(this.connection.clientCache.getOrCreateTable<DeployableDismountTimer>(REMOTE_MODULE.tables.deployable_dismount_timer));
  }

  get deployableState(): DeployableStateTableHandle {
    return new DeployableStateTableHandle(this.connection.clientCache.getOrCreateTable<DeployableState>(REMOTE_MODULE.tables.deployable_state));
  }

  get destroyDimensionNetworkTimer(): DestroyDimensionNetworkTimerTableHandle {
    return new DestroyDimensionNetworkTimerTableHandle(this.connection.clientCache.getOrCreateTable<DestroyDimensionNetworkTimer>(REMOTE_MODULE.tables.destroy_dimension_network_timer));
  }

  get developer(): DeveloperTableHandle {
    return new DeveloperTableHandle(this.connection.clientCache.getOrCreateTable<Developer>(REMOTE_MODULE.tables.developer));
  }

  get dimensionDescriptionState(): DimensionDescriptionStateTableHandle {
    return new DimensionDescriptionStateTableHandle(this.connection.clientCache.getOrCreateTable<DimensionDescriptionState>(REMOTE_MODULE.tables.dimension_description_state));
  }

  get dimensionNetworkState(): DimensionNetworkStateTableHandle {
    return new DimensionNetworkStateTableHandle(this.connection.clientCache.getOrCreateTable<DimensionNetworkState>(REMOTE_MODULE.tables.dimension_network_state));
  }

  get distantVisibleEntity(): DistantVisibleEntityTableHandle {
    return new DistantVisibleEntityTableHandle(this.connection.clientCache.getOrCreateTable<DistantVisibleEntity>(REMOTE_MODULE.tables.distant_visible_entity));
  }

  get distantVisibleEntityDesc(): DistantVisibleEntityDescTableHandle {
    return new DistantVisibleEntityDescTableHandle(this.connection.clientCache.getOrCreateTable<DistantVisibleEntityDesc>(REMOTE_MODULE.tables.distant_visible_entity_desc));
  }

  get droppedInventoryDespawnTimer(): DroppedInventoryDespawnTimerTableHandle {
    return new DroppedInventoryDespawnTimerTableHandle(this.connection.clientCache.getOrCreateTable<DroppedInventoryDespawnTimer>(REMOTE_MODULE.tables.dropped_inventory_despawn_timer));
  }

  get droppedInventoryOwnershipTimer(): DroppedInventoryOwnershipTimerTableHandle {
    return new DroppedInventoryOwnershipTimerTableHandle(this.connection.clientCache.getOrCreateTable<DroppedInventoryOwnershipTimer>(REMOTE_MODULE.tables.dropped_inventory_ownership_timer));
  }

  get droppedInventoryState(): DroppedInventoryStateTableHandle {
    return new DroppedInventoryStateTableHandle(this.connection.clientCache.getOrCreateTable<DroppedInventoryState>(REMOTE_MODULE.tables.dropped_inventory_state));
  }

  get duelAgentTimer(): DuelAgentTimerTableHandle {
    return new DuelAgentTimerTableHandle(this.connection.clientCache.getOrCreateTable<DuelAgentTimer>(REMOTE_MODULE.tables.duel_agent_timer));
  }

  get duelDespawnTimer(): DuelDespawnTimerTableHandle {
    return new DuelDespawnTimerTableHandle(this.connection.clientCache.getOrCreateTable<DuelDespawnTimer>(REMOTE_MODULE.tables.duel_despawn_timer));
  }

  get duelState(): DuelStateTableHandle {
    return new DuelStateTableHandle(this.connection.clientCache.getOrCreateTable<DuelState>(REMOTE_MODULE.tables.duel_state));
  }

  get elevatorDesc(): ElevatorDescTableHandle {
    return new ElevatorDescTableHandle(this.connection.clientCache.getOrCreateTable<ElevatorDesc>(REMOTE_MODULE.tables.elevator_desc));
  }

  get emoteDesc(): EmoteDescTableHandle {
    return new EmoteDescTableHandle(this.connection.clientCache.getOrCreateTable<EmoteDesc>(REMOTE_MODULE.tables.emote_desc));
  }

  get empireChunkState(): EmpireChunkStateTableHandle {
    return new EmpireChunkStateTableHandle(this.connection.clientCache.getOrCreateTable<EmpireChunkState>(REMOTE_MODULE.tables.empire_chunk_state));
  }

  get empireColorDesc(): EmpireColorDescTableHandle {
    return new EmpireColorDescTableHandle(this.connection.clientCache.getOrCreateTable<EmpireColorDesc>(REMOTE_MODULE.tables.empire_color_desc));
  }

  get empireExpansionState(): EmpireExpansionStateTableHandle {
    return new EmpireExpansionStateTableHandle(this.connection.clientCache.getOrCreateTable<EmpireExpansionState>(REMOTE_MODULE.tables.empire_expansion_state));
  }

  get empireIconDesc(): EmpireIconDescTableHandle {
    return new EmpireIconDescTableHandle(this.connection.clientCache.getOrCreateTable<EmpireIconDesc>(REMOTE_MODULE.tables.empire_icon_desc));
  }

  get empireNodeSiegeState(): EmpireNodeSiegeStateTableHandle {
    return new EmpireNodeSiegeStateTableHandle(this.connection.clientCache.getOrCreateTable<EmpireNodeSiegeState>(REMOTE_MODULE.tables.empire_node_siege_state));
  }

  get empireNodeState(): EmpireNodeStateTableHandle {
    return new EmpireNodeStateTableHandle(this.connection.clientCache.getOrCreateTable<EmpireNodeState>(REMOTE_MODULE.tables.empire_node_state));
  }

  get empireNotificationDesc(): EmpireNotificationDescTableHandle {
    return new EmpireNotificationDescTableHandle(this.connection.clientCache.getOrCreateTable<EmpireNotificationDesc>(REMOTE_MODULE.tables.empire_notification_desc));
  }

  get empirePlayerDataState(): EmpirePlayerDataStateTableHandle {
    return new EmpirePlayerDataStateTableHandle(this.connection.clientCache.getOrCreateTable<EmpirePlayerDataState>(REMOTE_MODULE.tables.empire_player_data_state));
  }

  get empireRankDesc(): EmpireRankDescTableHandle {
    return new EmpireRankDescTableHandle(this.connection.clientCache.getOrCreateTable<EmpireRankDesc>(REMOTE_MODULE.tables.empire_rank_desc));
  }

  get empireRankState(): EmpireRankStateTableHandle {
    return new EmpireRankStateTableHandle(this.connection.clientCache.getOrCreateTable<EmpireRankState>(REMOTE_MODULE.tables.empire_rank_state));
  }

  get empireSettlementState(): EmpireSettlementStateTableHandle {
    return new EmpireSettlementStateTableHandle(this.connection.clientCache.getOrCreateTable<EmpireSettlementState>(REMOTE_MODULE.tables.empire_settlement_state));
  }

  get empireState(): EmpireStateTableHandle {
    return new EmpireStateTableHandle(this.connection.clientCache.getOrCreateTable<EmpireState>(REMOTE_MODULE.tables.empire_state));
  }

  get empireSuppliesDesc(): EmpireSuppliesDescTableHandle {
    return new EmpireSuppliesDescTableHandle(this.connection.clientCache.getOrCreateTable<EmpireSuppliesDesc>(REMOTE_MODULE.tables.empire_supplies_desc));
  }

  get empireTerritoryDesc(): EmpireTerritoryDescTableHandle {
    return new EmpireTerritoryDescTableHandle(this.connection.clientCache.getOrCreateTable<EmpireTerritoryDesc>(REMOTE_MODULE.tables.empire_territory_desc));
  }

  get endGracePeriodTimer(): EndGracePeriodTimerTableHandle {
    return new EndGracePeriodTimerTableHandle(this.connection.clientCache.getOrCreateTable<EndGracePeriodTimer>(REMOTE_MODULE.tables.end_grace_period_timer));
  }

  get enemyAiParamsDesc(): EnemyAiParamsDescTableHandle {
    return new EnemyAiParamsDescTableHandle(this.connection.clientCache.getOrCreateTable<EnemyAiParamsDesc>(REMOTE_MODULE.tables.enemy_ai_params_desc));
  }

  get enemyDesc(): EnemyDescTableHandle {
    return new EnemyDescTableHandle(this.connection.clientCache.getOrCreateTable<EnemyDesc>(REMOTE_MODULE.tables.enemy_desc));
  }

  get enemyDespawnTimer(): EnemyDespawnTimerTableHandle {
    return new EnemyDespawnTimerTableHandle(this.connection.clientCache.getOrCreateTable<EnemyDespawnTimer>(REMOTE_MODULE.tables.enemy_despawn_timer));
  }

  get enemyMobMonitorState(): EnemyMobMonitorStateTableHandle {
    return new EnemyMobMonitorStateTableHandle(this.connection.clientCache.getOrCreateTable<EnemyMobMonitorState>(REMOTE_MODULE.tables.enemy_mob_monitor_state));
  }

  get enemyRegenLoopTimer(): EnemyRegenLoopTimerTableHandle {
    return new EnemyRegenLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<EnemyRegenLoopTimer>(REMOTE_MODULE.tables.enemy_regen_loop_timer));
  }

  get enemyState(): EnemyStateTableHandle {
    return new EnemyStateTableHandle(this.connection.clientCache.getOrCreateTable<EnemyState>(REMOTE_MODULE.tables.enemy_state));
  }

  get environmentDebuffDesc(): EnvironmentDebuffDescTableHandle {
    return new EnvironmentDebuffDescTableHandle(this.connection.clientCache.getOrCreateTable<EnvironmentDebuffDesc>(REMOTE_MODULE.tables.environment_debuff_desc));
  }

  get environmentDebuffLoopTimer(): EnvironmentDebuffLoopTimerTableHandle {
    return new EnvironmentDebuffLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<EnvironmentDebuffLoopTimer>(REMOTE_MODULE.tables.environment_debuff_loop_timer));
  }

  get equipmentDesc(): EquipmentDescTableHandle {
    return new EquipmentDescTableHandle(this.connection.clientCache.getOrCreateTable<EquipmentDesc>(REMOTE_MODULE.tables.equipment_desc));
  }

  get equipmentState(): EquipmentStateTableHandle {
    return new EquipmentStateTableHandle(this.connection.clientCache.getOrCreateTable<EquipmentState>(REMOTE_MODULE.tables.equipment_state));
  }

  get experienceState(): ExperienceStateTableHandle {
    return new ExperienceStateTableHandle(this.connection.clientCache.getOrCreateTable<ExperienceState>(REMOTE_MODULE.tables.experience_state));
  }

  get explorationChunksState(): ExplorationChunksStateTableHandle {
    return new ExplorationChunksStateTableHandle(this.connection.clientCache.getOrCreateTable<ExplorationChunksState>(REMOTE_MODULE.tables.exploration_chunks_state));
  }

  get extractOutcomeState(): ExtractOutcomeStateTableHandle {
    return new ExtractOutcomeStateTableHandle(this.connection.clientCache.getOrCreateTable<ExtractOutcomeState>(REMOTE_MODULE.tables.extract_outcome_state));
  }

  get extractionRecipeDesc(): ExtractionRecipeDescTableHandle {
    return new ExtractionRecipeDescTableHandle(this.connection.clientCache.getOrCreateTable<ExtractionRecipeDesc>(REMOTE_MODULE.tables.extraction_recipe_desc));
  }

  get foodDesc(): FoodDescTableHandle {
    return new FoodDescTableHandle(this.connection.clientCache.getOrCreateTable<FoodDesc>(REMOTE_MODULE.tables.food_desc));
  }

  get footprintTileState(): FootprintTileStateTableHandle {
    return new FootprintTileStateTableHandle(this.connection.clientCache.getOrCreateTable<FootprintTileState>(REMOTE_MODULE.tables.footprint_tile_state));
  }

  get forceGenerateTypes(): ForceGenerateTypesTableHandle {
    return new ForceGenerateTypesTableHandle(this.connection.clientCache.getOrCreateTable<ForceGenerateTypes>(REMOTE_MODULE.tables.force_generate_types));
  }

  get gateDesc(): GateDescTableHandle {
    return new GateDescTableHandle(this.connection.clientCache.getOrCreateTable<GateDesc>(REMOTE_MODULE.tables.gate_desc));
  }

  get globalSearchState(): GlobalSearchStateTableHandle {
    return new GlobalSearchStateTableHandle(this.connection.clientCache.getOrCreateTable<GlobalSearchState>(REMOTE_MODULE.tables.global_search_state));
  }

  get globals(): GlobalsTableHandle {
    return new GlobalsTableHandle(this.connection.clientCache.getOrCreateTable<Globals>(REMOTE_MODULE.tables.globals));
  }

  get growthLoopTimer(): GrowthLoopTimerTableHandle {
    return new GrowthLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<GrowthLoopTimer>(REMOTE_MODULE.tables.growth_loop_timer));
  }

  get growthState(): GrowthStateTableHandle {
    return new GrowthStateTableHandle(this.connection.clientCache.getOrCreateTable<GrowthState>(REMOTE_MODULE.tables.growth_state));
  }

  get healthState(): HealthStateTableHandle {
    return new HealthStateTableHandle(this.connection.clientCache.getOrCreateTable<HealthState>(REMOTE_MODULE.tables.health_state));
  }

  get herdState(): HerdStateTableHandle {
    return new HerdStateTableHandle(this.connection.clientCache.getOrCreateTable<HerdState>(REMOTE_MODULE.tables.herd_state));
  }

  get hexiteExchangeEntryDesc(): HexiteExchangeEntryDescTableHandle {
    return new HexiteExchangeEntryDescTableHandle(this.connection.clientCache.getOrCreateTable<HexiteExchangeEntryDesc>(REMOTE_MODULE.tables.hexite_exchange_entry_desc));
  }

  get hideDeployableTimer(): HideDeployableTimerTableHandle {
    return new HideDeployableTimerTableHandle(this.connection.clientCache.getOrCreateTable<HideDeployableTimer>(REMOTE_MODULE.tables.hide_deployable_timer));
  }

  get identityRole(): IdentityRoleTableHandle {
    return new IdentityRoleTableHandle(this.connection.clientCache.getOrCreateTable<IdentityRole>(REMOTE_MODULE.tables.identity_role));
  }

  get interModuleMessage(): InterModuleMessageTableHandle {
    return new InterModuleMessageTableHandle(this.connection.clientCache.getOrCreateTable<InterModuleMessage>(REMOTE_MODULE.tables.inter_module_message));
  }

  get interModuleMessageCounter(): InterModuleMessageCounterTableHandle {
    return new InterModuleMessageCounterTableHandle(this.connection.clientCache.getOrCreateTable<InterModuleMessageCounter>(REMOTE_MODULE.tables.inter_module_message_counter));
  }

  get interModuleResponseMessageCounter(): InterModuleResponseMessageCounterTableHandle {
    return new InterModuleResponseMessageCounterTableHandle(this.connection.clientCache.getOrCreateTable<InterModuleResponseMessageCounter>(REMOTE_MODULE.tables.inter_module_response_message_counter));
  }

  get interiorCollapseTriggerState(): InteriorCollapseTriggerStateTableHandle {
    return new InteriorCollapseTriggerStateTableHandle(this.connection.clientCache.getOrCreateTable<InteriorCollapseTriggerState>(REMOTE_MODULE.tables.interior_collapse_trigger_state));
  }

  get interiorEnvironmentDesc(): InteriorEnvironmentDescTableHandle {
    return new InteriorEnvironmentDescTableHandle(this.connection.clientCache.getOrCreateTable<InteriorEnvironmentDesc>(REMOTE_MODULE.tables.interior_environment_desc));
  }

  get interiorInstanceDesc(): InteriorInstanceDescTableHandle {
    return new InteriorInstanceDescTableHandle(this.connection.clientCache.getOrCreateTable<InteriorInstanceDesc>(REMOTE_MODULE.tables.interior_instance_desc));
  }

  get interiorNetworkDesc(): InteriorNetworkDescTableHandle {
    return new InteriorNetworkDescTableHandle(this.connection.clientCache.getOrCreateTable<InteriorNetworkDesc>(REMOTE_MODULE.tables.interior_network_desc));
  }

  get interiorPortalConnectionsDesc(): InteriorPortalConnectionsDescTableHandle {
    return new InteriorPortalConnectionsDescTableHandle(this.connection.clientCache.getOrCreateTable<InteriorPortalConnectionsDesc>(REMOTE_MODULE.tables.interior_portal_connections_desc));
  }

  get interiorSetCollapsedTimer(): InteriorSetCollapsedTimerTableHandle {
    return new InteriorSetCollapsedTimerTableHandle(this.connection.clientCache.getOrCreateTable<InteriorSetCollapsedTimer>(REMOTE_MODULE.tables.interior_set_collapsed_timer));
  }

  get interiorShapeDesc(): InteriorShapeDescTableHandle {
    return new InteriorShapeDescTableHandle(this.connection.clientCache.getOrCreateTable<InteriorShapeDesc>(REMOTE_MODULE.tables.interior_shape_desc));
  }

  get interiorSpawnDesc(): InteriorSpawnDescTableHandle {
    return new InteriorSpawnDescTableHandle(this.connection.clientCache.getOrCreateTable<InteriorSpawnDesc>(REMOTE_MODULE.tables.interior_spawn_desc));
  }

  get inventoryState(): InventoryStateTableHandle {
    return new InventoryStateTableHandle(this.connection.clientCache.getOrCreateTable<InventoryState>(REMOTE_MODULE.tables.inventory_state));
  }

  get itemConversionRecipeDesc(): ItemConversionRecipeDescTableHandle {
    return new ItemConversionRecipeDescTableHandle(this.connection.clientCache.getOrCreateTable<ItemConversionRecipeDesc>(REMOTE_MODULE.tables.item_conversion_recipe_desc));
  }

  get itemDesc(): ItemDescTableHandle {
    return new ItemDescTableHandle(this.connection.clientCache.getOrCreateTable<ItemDesc>(REMOTE_MODULE.tables.item_desc));
  }

  get itemListDesc(): ItemListDescTableHandle {
    return new ItemListDescTableHandle(this.connection.clientCache.getOrCreateTable<ItemListDesc>(REMOTE_MODULE.tables.item_list_desc));
  }

  get knowledgeAchievementState(): KnowledgeAchievementStateTableHandle {
    return new KnowledgeAchievementStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeAchievementState>(REMOTE_MODULE.tables.knowledge_achievement_state));
  }

  get knowledgeBattleActionState(): KnowledgeBattleActionStateTableHandle {
    return new KnowledgeBattleActionStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeBattleActionState>(REMOTE_MODULE.tables.knowledge_battle_action_state));
  }

  get knowledgeBuildingState(): KnowledgeBuildingStateTableHandle {
    return new KnowledgeBuildingStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeBuildingState>(REMOTE_MODULE.tables.knowledge_building_state));
  }

  get knowledgeCargoState(): KnowledgeCargoStateTableHandle {
    return new KnowledgeCargoStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeCargoState>(REMOTE_MODULE.tables.knowledge_cargo_state));
  }

  get knowledgeClaimState(): KnowledgeClaimStateTableHandle {
    return new KnowledgeClaimStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeClaimState>(REMOTE_MODULE.tables.knowledge_claim_state));
  }

  get knowledgeConstructionState(): KnowledgeConstructionStateTableHandle {
    return new KnowledgeConstructionStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeConstructionState>(REMOTE_MODULE.tables.knowledge_construction_state));
  }

  get knowledgeCraftState(): KnowledgeCraftStateTableHandle {
    return new KnowledgeCraftStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeCraftState>(REMOTE_MODULE.tables.knowledge_craft_state));
  }

  get knowledgeDeployableState(): KnowledgeDeployableStateTableHandle {
    return new KnowledgeDeployableStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeDeployableState>(REMOTE_MODULE.tables.knowledge_deployable_state));
  }

  get knowledgeEnemyState(): KnowledgeEnemyStateTableHandle {
    return new KnowledgeEnemyStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeEnemyState>(REMOTE_MODULE.tables.knowledge_enemy_state));
  }

  get knowledgeExtractState(): KnowledgeExtractStateTableHandle {
    return new KnowledgeExtractStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeExtractState>(REMOTE_MODULE.tables.knowledge_extract_state));
  }

  get knowledgeItemState(): KnowledgeItemStateTableHandle {
    return new KnowledgeItemStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeItemState>(REMOTE_MODULE.tables.knowledge_item_state));
  }

  get knowledgeLoreState(): KnowledgeLoreStateTableHandle {
    return new KnowledgeLoreStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeLoreState>(REMOTE_MODULE.tables.knowledge_lore_state));
  }

  get knowledgeNpcState(): KnowledgeNpcStateTableHandle {
    return new KnowledgeNpcStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeNpcState>(REMOTE_MODULE.tables.knowledge_npc_state));
  }

  get knowledgePavingState(): KnowledgePavingStateTableHandle {
    return new KnowledgePavingStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgePavingState>(REMOTE_MODULE.tables.knowledge_paving_state));
  }

  get knowledgePillarShapingState(): KnowledgePillarShapingStateTableHandle {
    return new KnowledgePillarShapingStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgePillarShapingState>(REMOTE_MODULE.tables.knowledge_pillar_shaping_state));
  }

  get knowledgeResourcePlacementState(): KnowledgeResourcePlacementStateTableHandle {
    return new KnowledgeResourcePlacementStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeResourcePlacementState>(REMOTE_MODULE.tables.knowledge_resource_placement_state));
  }

  get knowledgeResourceState(): KnowledgeResourceStateTableHandle {
    return new KnowledgeResourceStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeResourceState>(REMOTE_MODULE.tables.knowledge_resource_state));
  }

  get knowledgeRuinsState(): KnowledgeRuinsStateTableHandle {
    return new KnowledgeRuinsStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeRuinsState>(REMOTE_MODULE.tables.knowledge_ruins_state));
  }

  get knowledgeScrollDesc(): KnowledgeScrollDescTableHandle {
    return new KnowledgeScrollDescTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeScrollDesc>(REMOTE_MODULE.tables.knowledge_scroll_desc));
  }

  get knowledgeScrollTypeDesc(): KnowledgeScrollTypeDescTableHandle {
    return new KnowledgeScrollTypeDescTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeScrollTypeDesc>(REMOTE_MODULE.tables.knowledge_scroll_type_desc));
  }

  get knowledgeSecondaryState(): KnowledgeSecondaryStateTableHandle {
    return new KnowledgeSecondaryStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeSecondaryState>(REMOTE_MODULE.tables.knowledge_secondary_state));
  }

  get knowledgeStatModifierDesc(): KnowledgeStatModifierDescTableHandle {
    return new KnowledgeStatModifierDescTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeStatModifierDesc>(REMOTE_MODULE.tables.knowledge_stat_modifier_desc));
  }

  get knowledgeVaultState(): KnowledgeVaultStateTableHandle {
    return new KnowledgeVaultStateTableHandle(this.connection.clientCache.getOrCreateTable<KnowledgeVaultState>(REMOTE_MODULE.tables.knowledge_vault_state));
  }

  get lightSourceState(): LightSourceStateTableHandle {
    return new LightSourceStateTableHandle(this.connection.clientCache.getOrCreateTable<LightSourceState>(REMOTE_MODULE.tables.light_source_state));
  }

  get locationCache(): LocationCacheTableHandle {
    return new LocationCacheTableHandle(this.connection.clientCache.getOrCreateTable<LocationCache>(REMOTE_MODULE.tables.location_cache));
  }

  get locationState(): LocationStateTableHandle {
    return new LocationStateTableHandle(this.connection.clientCache.getOrCreateTable<LocationState>(REMOTE_MODULE.tables.location_state));
  }

  get lootChestDesc(): LootChestDescTableHandle {
    return new LootChestDescTableHandle(this.connection.clientCache.getOrCreateTable<LootChestDesc>(REMOTE_MODULE.tables.loot_chest_desc));
  }

  get lootChestDespawnTimer(): LootChestDespawnTimerTableHandle {
    return new LootChestDespawnTimerTableHandle(this.connection.clientCache.getOrCreateTable<LootChestDespawnTimer>(REMOTE_MODULE.tables.loot_chest_despawn_timer));
  }

  get lootChestSpawnTimer(): LootChestSpawnTimerTableHandle {
    return new LootChestSpawnTimerTableHandle(this.connection.clientCache.getOrCreateTable<LootChestSpawnTimer>(REMOTE_MODULE.tables.loot_chest_spawn_timer));
  }

  get lootChestState(): LootChestStateTableHandle {
    return new LootChestStateTableHandle(this.connection.clientCache.getOrCreateTable<LootChestState>(REMOTE_MODULE.tables.loot_chest_state));
  }

  get lootRarityDesc(): LootRarityDescTableHandle {
    return new LootRarityDescTableHandle(this.connection.clientCache.getOrCreateTable<LootRarityDesc>(REMOTE_MODULE.tables.loot_rarity_desc));
  }

  get lootTableDesc(): LootTableDescTableHandle {
    return new LootTableDescTableHandle(this.connection.clientCache.getOrCreateTable<LootTableDesc>(REMOTE_MODULE.tables.loot_table_desc));
  }

  get lostItemsState(): LostItemsStateTableHandle {
    return new LostItemsStateTableHandle(this.connection.clientCache.getOrCreateTable<LostItemsState>(REMOTE_MODULE.tables.lost_items_state));
  }

  get mobileEntityState(): MobileEntityStateTableHandle {
    return new MobileEntityStateTableHandle(this.connection.clientCache.getOrCreateTable<MobileEntityState>(REMOTE_MODULE.tables.mobile_entity_state));
  }

  get moderationActionLogEntry(): ModerationActionLogEntryTableHandle {
    return new ModerationActionLogEntryTableHandle(this.connection.clientCache.getOrCreateTable<ModerationActionLogEntry>(REMOTE_MODULE.tables.moderation_action_log_entry));
  }

  get mountingState(): MountingStateTableHandle {
    return new MountingStateTableHandle(this.connection.clientCache.getOrCreateTable<MountingState>(REMOTE_MODULE.tables.mounting_state));
  }

  get moveValidationStrikeCounterState(): MoveValidationStrikeCounterStateTableHandle {
    return new MoveValidationStrikeCounterStateTableHandle(this.connection.clientCache.getOrCreateTable<MoveValidationStrikeCounterState>(REMOTE_MODULE.tables.move_validation_strike_counter_state));
  }

  get npcAiLoopTimer(): NpcAiLoopTimerTableHandle {
    return new NpcAiLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<NpcAiLoopTimer>(REMOTE_MODULE.tables.npc_ai_loop_timer));
  }

  get npcDesc(): NpcDescTableHandle {
    return new NpcDescTableHandle(this.connection.clientCache.getOrCreateTable<NpcDesc>(REMOTE_MODULE.tables.npc_desc));
  }

  get npcState(): NpcStateTableHandle {
    return new NpcStateTableHandle(this.connection.clientCache.getOrCreateTable<NpcState>(REMOTE_MODULE.tables.npc_state));
  }

  get onDurabilityZeroTimer(): OnDurabilityZeroTimerTableHandle {
    return new OnDurabilityZeroTimerTableHandle(this.connection.clientCache.getOrCreateTable<OnDurabilityZeroTimer>(REMOTE_MODULE.tables.on_durability_zero_timer));
  }

  get onboardingRewardDesc(): OnboardingRewardDescTableHandle {
    return new OnboardingRewardDescTableHandle(this.connection.clientCache.getOrCreateTable<OnboardingRewardDesc>(REMOTE_MODULE.tables.onboarding_reward_desc));
  }

  get onboardingState(): OnboardingStateTableHandle {
    return new OnboardingStateTableHandle(this.connection.clientCache.getOrCreateTable<OnboardingState>(REMOTE_MODULE.tables.onboarding_state));
  }

  get parametersDesc(): ParametersDescTableHandle {
    return new ParametersDescTableHandle(this.connection.clientCache.getOrCreateTable<ParametersDesc>(REMOTE_MODULE.tables.parameters_desc));
  }

  get parametersPlayerMoveDesc(): ParametersPlayerMoveDescTableHandle {
    return new ParametersPlayerMoveDescTableHandle(this.connection.clientCache.getOrCreateTable<ParametersPlayerMoveDesc>(REMOTE_MODULE.tables.parameters_player_move_desc));
  }

  get partialExperienceState(): PartialExperienceStateTableHandle {
    return new PartialExperienceStateTableHandle(this.connection.clientCache.getOrCreateTable<PartialExperienceState>(REMOTE_MODULE.tables.partial_experience_state));
  }

  get passiveCraftState(): PassiveCraftStateTableHandle {
    return new PassiveCraftStateTableHandle(this.connection.clientCache.getOrCreateTable<PassiveCraftState>(REMOTE_MODULE.tables.passive_craft_state));
  }

  get passiveCraftTimer(): PassiveCraftTimerTableHandle {
    return new PassiveCraftTimerTableHandle(this.connection.clientCache.getOrCreateTable<PassiveCraftTimer>(REMOTE_MODULE.tables.passive_craft_timer));
  }

  get pathfindingDesc(): PathfindingDescTableHandle {
    return new PathfindingDescTableHandle(this.connection.clientCache.getOrCreateTable<PathfindingDesc>(REMOTE_MODULE.tables.pathfinding_desc));
  }

  get pavedTileState(): PavedTileStateTableHandle {
    return new PavedTileStateTableHandle(this.connection.clientCache.getOrCreateTable<PavedTileState>(REMOTE_MODULE.tables.paved_tile_state));
  }

  get pavingTileDesc(): PavingTileDescTableHandle {
    return new PavingTileDescTableHandle(this.connection.clientCache.getOrCreateTable<PavingTileDesc>(REMOTE_MODULE.tables.paving_tile_desc));
  }

  get permissionState(): PermissionStateTableHandle {
    return new PermissionStateTableHandle(this.connection.clientCache.getOrCreateTable<PermissionState>(REMOTE_MODULE.tables.permission_state));
  }

  get pillarShapingDesc(): PillarShapingDescTableHandle {
    return new PillarShapingDescTableHandle(this.connection.clientCache.getOrCreateTable<PillarShapingDesc>(REMOTE_MODULE.tables.pillar_shaping_desc));
  }

  get pillarShapingState(): PillarShapingStateTableHandle {
    return new PillarShapingStateTableHandle(this.connection.clientCache.getOrCreateTable<PillarShapingState>(REMOTE_MODULE.tables.pillar_shaping_state));
  }

  get playerActionDesc(): PlayerActionDescTableHandle {
    return new PlayerActionDescTableHandle(this.connection.clientCache.getOrCreateTable<PlayerActionDesc>(REMOTE_MODULE.tables.player_action_desc));
  }

  get playerActionState(): PlayerActionStateTableHandle {
    return new PlayerActionStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerActionState>(REMOTE_MODULE.tables.player_action_state));
  }

  get playerDeathTimer(): PlayerDeathTimerTableHandle {
    return new PlayerDeathTimerTableHandle(this.connection.clientCache.getOrCreateTable<PlayerDeathTimer>(REMOTE_MODULE.tables.player_death_timer));
  }

  get playerHousingDesc(): PlayerHousingDescTableHandle {
    return new PlayerHousingDescTableHandle(this.connection.clientCache.getOrCreateTable<PlayerHousingDesc>(REMOTE_MODULE.tables.player_housing_desc));
  }

  get playerHousingEvictPlayerTimer(): PlayerHousingEvictPlayerTimerTableHandle {
    return new PlayerHousingEvictPlayerTimerTableHandle(this.connection.clientCache.getOrCreateTable<PlayerHousingEvictPlayerTimer>(REMOTE_MODULE.tables.player_housing_evict_player_timer));
  }

  get playerHousingIncomeLoopTimer(): PlayerHousingIncomeLoopTimerTableHandle {
    return new PlayerHousingIncomeLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<PlayerHousingIncomeLoopTimer>(REMOTE_MODULE.tables.player_housing_income_loop_timer));
  }

  get playerHousingState(): PlayerHousingStateTableHandle {
    return new PlayerHousingStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerHousingState>(REMOTE_MODULE.tables.player_housing_state));
  }

  get playerLowercaseUsernameState(): PlayerLowercaseUsernameStateTableHandle {
    return new PlayerLowercaseUsernameStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerLowercaseUsernameState>(REMOTE_MODULE.tables.player_lowercase_username_state));
  }

  get playerNoteState(): PlayerNoteStateTableHandle {
    return new PlayerNoteStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerNoteState>(REMOTE_MODULE.tables.player_note_state));
  }

  get playerNotificationEvent(): PlayerNotificationEventTableHandle {
    return new PlayerNotificationEventTableHandle(this.connection.clientCache.getOrCreateTable<PlayerNotificationEvent>(REMOTE_MODULE.tables.player_notification_event));
  }

  get playerPrefsState(): PlayerPrefsStateTableHandle {
    return new PlayerPrefsStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerPrefsState>(REMOTE_MODULE.tables.player_prefs_state));
  }

  get playerQueueState(): PlayerQueueStateTableHandle {
    return new PlayerQueueStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerQueueState>(REMOTE_MODULE.tables.player_queue_state));
  }

  get playerRegenLoopTimer(): PlayerRegenLoopTimerTableHandle {
    return new PlayerRegenLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<PlayerRegenLoopTimer>(REMOTE_MODULE.tables.player_regen_loop_timer));
  }

  get playerRegionTransferEvent(): PlayerRegionTransferEventTableHandle {
    return new PlayerRegionTransferEventTableHandle(this.connection.clientCache.getOrCreateTable<PlayerRegionTransferEvent>(REMOTE_MODULE.tables.player_region_transfer_event));
  }

  get playerReportState(): PlayerReportStateTableHandle {
    return new PlayerReportStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerReportState>(REMOTE_MODULE.tables.player_report_state));
  }

  get playerReportStateTimestamp(): PlayerReportStateTimestampTableHandle {
    return new PlayerReportStateTimestampTableHandle(this.connection.clientCache.getOrCreateTable<PlayerReportStateTimestamp>(REMOTE_MODULE.tables.player_report_state_timestamp));
  }

  get playerSetNameOutcomeEvent(): PlayerSetNameOutcomeEventTableHandle {
    return new PlayerSetNameOutcomeEventTableHandle(this.connection.clientCache.getOrCreateTable<PlayerSetNameOutcomeEvent>(REMOTE_MODULE.tables.player_set_name_outcome_event));
  }

  get playerState(): PlayerStateTableHandle {
    return new PlayerStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerState>(REMOTE_MODULE.tables.player_state));
  }

  get playerTimestampState(): PlayerTimestampStateTableHandle {
    return new PlayerTimestampStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerTimestampState>(REMOTE_MODULE.tables.player_timestamp_state));
  }

  get playerUseElevatorTimer(): PlayerUseElevatorTimerTableHandle {
    return new PlayerUseElevatorTimerTableHandle(this.connection.clientCache.getOrCreateTable<PlayerUseElevatorTimer>(REMOTE_MODULE.tables.player_use_elevator_timer));
  }

  get playerUsernameState(): PlayerUsernameStateTableHandle {
    return new PlayerUsernameStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerUsernameState>(REMOTE_MODULE.tables.player_username_state));
  }

  get playerVoteConcludeTimer(): PlayerVoteConcludeTimerTableHandle {
    return new PlayerVoteConcludeTimerTableHandle(this.connection.clientCache.getOrCreateTable<PlayerVoteConcludeTimer>(REMOTE_MODULE.tables.player_vote_conclude_timer));
  }

  get playerVoteState(): PlayerVoteStateTableHandle {
    return new PlayerVoteStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerVoteState>(REMOTE_MODULE.tables.player_vote_state));
  }

  get portalState(): PortalStateTableHandle {
    return new PortalStateTableHandle(this.connection.clientCache.getOrCreateTable<PortalState>(REMOTE_MODULE.tables.portal_state));
  }

  get privateParametersDesc(): PrivateParametersDescTableHandle {
    return new PrivateParametersDescTableHandle(this.connection.clientCache.getOrCreateTable<PrivateParametersDesc>(REMOTE_MODULE.tables.private_parameters_desc));
  }

  get progressiveActionState(): ProgressiveActionStateTableHandle {
    return new ProgressiveActionStateTableHandle(this.connection.clientCache.getOrCreateTable<ProgressiveActionState>(REMOTE_MODULE.tables.progressive_action_state));
  }

  get projectSiteState(): ProjectSiteStateTableHandle {
    return new ProjectSiteStateTableHandle(this.connection.clientCache.getOrCreateTable<ProjectSiteState>(REMOTE_MODULE.tables.project_site_state));
  }

  get publicProgressiveActionState(): PublicProgressiveActionStateTableHandle {
    return new PublicProgressiveActionStateTableHandle(this.connection.clientCache.getOrCreateTable<PublicProgressiveActionState>(REMOTE_MODULE.tables.public_progressive_action_state));
  }

  get regionConnectionInfo(): RegionConnectionInfoTableHandle {
    return new RegionConnectionInfoTableHandle(this.connection.clientCache.getOrCreateTable<RegionConnectionInfo>(REMOTE_MODULE.tables.region_connection_info));
  }

  get regionPopulationInfo(): RegionPopulationInfoTableHandle {
    return new RegionPopulationInfoTableHandle(this.connection.clientCache.getOrCreateTable<RegionPopulationInfo>(REMOTE_MODULE.tables.region_population_info));
  }

  get regionPopuplationLoopTimer(): RegionPopuplationLoopTimerTableHandle {
    return new RegionPopuplationLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<RegionPopulationLoopTimer>(REMOTE_MODULE.tables.region_popuplation_loop_timer));
  }

  get regionSignInParameters(): RegionSignInParametersTableHandle {
    return new RegionSignInParametersTableHandle(this.connection.clientCache.getOrCreateTable<RegionSignInParameters>(REMOTE_MODULE.tables.region_sign_in_parameters));
  }

  get rentCollectorLoopTimer(): RentCollectorLoopTimerTableHandle {
    return new RentCollectorLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<RentCollectorLoopTimer>(REMOTE_MODULE.tables.rent_collector_loop_timer));
  }

  get rentEvictTimer(): RentEvictTimerTableHandle {
    return new RentEvictTimerTableHandle(this.connection.clientCache.getOrCreateTable<RentEvictTimer>(REMOTE_MODULE.tables.rent_evict_timer));
  }

  get rentState(): RentStateTableHandle {
    return new RentStateTableHandle(this.connection.clientCache.getOrCreateTable<RentState>(REMOTE_MODULE.tables.rent_state));
  }

  get reservedNameDesc(): ReservedNameDescTableHandle {
    return new ReservedNameDescTableHandle(this.connection.clientCache.getOrCreateTable<ReservedNameDesc>(REMOTE_MODULE.tables.reserved_name_desc));
  }

  get resetChunkIndexTimer(): ResetChunkIndexTimerTableHandle {
    return new ResetChunkIndexTimerTableHandle(this.connection.clientCache.getOrCreateTable<ResetChunkIndexTimer>(REMOTE_MODULE.tables.reset_chunk_index_timer));
  }

  get resetMobileEntityTimer(): ResetMobileEntityTimerTableHandle {
    return new ResetMobileEntityTimerTableHandle(this.connection.clientCache.getOrCreateTable<ResetMobileEntityTimer>(REMOTE_MODULE.tables.reset_mobile_entity_timer));
  }

  get resourceClumpDesc(): ResourceClumpDescTableHandle {
    return new ResourceClumpDescTableHandle(this.connection.clientCache.getOrCreateTable<ResourceClumpDesc>(REMOTE_MODULE.tables.resource_clump_desc));
  }

  get resourceCount(): ResourceCountTableHandle {
    return new ResourceCountTableHandle(this.connection.clientCache.getOrCreateTable<ResourceCount>(REMOTE_MODULE.tables.resource_count));
  }

  get resourceDesc(): ResourceDescTableHandle {
    return new ResourceDescTableHandle(this.connection.clientCache.getOrCreateTable<ResourceDesc>(REMOTE_MODULE.tables.resource_desc));
  }

  get resourceGrowthRecipeDesc(): ResourceGrowthRecipeDescTableHandle {
    return new ResourceGrowthRecipeDescTableHandle(this.connection.clientCache.getOrCreateTable<ResourceGrowthRecipeDesc>(REMOTE_MODULE.tables.resource_growth_recipe_desc));
  }

  get resourceHealthState(): ResourceHealthStateTableHandle {
    return new ResourceHealthStateTableHandle(this.connection.clientCache.getOrCreateTable<ResourceHealthState>(REMOTE_MODULE.tables.resource_health_state));
  }

  get resourcePlacementRecipeDesc(): ResourcePlacementRecipeDescTableHandle {
    return new ResourcePlacementRecipeDescTableHandle(this.connection.clientCache.getOrCreateTable<ResourcePlacementRecipeDesc>(REMOTE_MODULE.tables.resource_placement_recipe_desc));
  }

  get resourceSpawnTimer(): ResourceSpawnTimerTableHandle {
    return new ResourceSpawnTimerTableHandle(this.connection.clientCache.getOrCreateTable<ResourceSpawnTimer>(REMOTE_MODULE.tables.resource_spawn_timer));
  }

  get resourceState(): ResourceStateTableHandle {
    return new ResourceStateTableHandle(this.connection.clientCache.getOrCreateTable<ResourceState>(REMOTE_MODULE.tables.resource_state));
  }

  get resourcesLog(): ResourcesLogTableHandle {
    return new ResourcesLogTableHandle(this.connection.clientCache.getOrCreateTable<ResourcesLog>(REMOTE_MODULE.tables.resources_log));
  }

  get resourcesRegenLoopTimer(): ResourcesRegenLoopTimerTableHandle {
    return new ResourcesRegenLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<ResourcesRegenLoopTimer>(REMOTE_MODULE.tables.resources_regen_loop_timer));
  }

  get respawnResourceInChunkTimer(): RespawnResourceInChunkTimerTableHandle {
    return new RespawnResourceInChunkTimerTableHandle(this.connection.clientCache.getOrCreateTable<RespawnResourceInChunkTimer>(REMOTE_MODULE.tables.respawn_resource_in_chunk_timer));
  }

  get rezSickLongTermState(): RezSickLongTermStateTableHandle {
    return new RezSickLongTermStateTableHandle(this.connection.clientCache.getOrCreateTable<RezSickLongTermState>(REMOTE_MODULE.tables.rez_sick_long_term_state));
  }

  get satiationState(): SatiationStateTableHandle {
    return new SatiationStateTableHandle(this.connection.clientCache.getOrCreateTable<SatiationState>(REMOTE_MODULE.tables.satiation_state));
  }

  get secondaryKnowledgeDesc(): SecondaryKnowledgeDescTableHandle {
    return new SecondaryKnowledgeDescTableHandle(this.connection.clientCache.getOrCreateTable<SecondaryKnowledgeDesc>(REMOTE_MODULE.tables.secondary_knowledge_desc));
  }

  get sellOrderState(): SellOrderStateTableHandle {
    return new SellOrderStateTableHandle(this.connection.clientCache.getOrCreateTable<AuctionListingState>(REMOTE_MODULE.tables.sell_order_state));
  }

  get serverIdentity(): ServerIdentityTableHandle {
    return new ServerIdentityTableHandle(this.connection.clientCache.getOrCreateTable<ServerIdentity>(REMOTE_MODULE.tables.server_identity));
  }

  get signedInPlayerState(): SignedInPlayerStateTableHandle {
    return new SignedInPlayerStateTableHandle(this.connection.clientCache.getOrCreateTable<SignedInPlayerState>(REMOTE_MODULE.tables.signed_in_player_state));
  }

  get singleResourceClumpInfo(): SingleResourceClumpInfoTableHandle {
    return new SingleResourceClumpInfoTableHandle(this.connection.clientCache.getOrCreateTable<SingleResourceClumpInfo>(REMOTE_MODULE.tables.single_resource_clump_info));
  }

  get singleResourceToClumpDesc(): SingleResourceToClumpDescTableHandle {
    return new SingleResourceToClumpDescTableHandle(this.connection.clientCache.getOrCreateTable<SingleResourceToClumpDesc>(REMOTE_MODULE.tables.single_resource_to_clump_desc));
  }

  get skillDesc(): SkillDescTableHandle {
    return new SkillDescTableHandle(this.connection.clientCache.getOrCreateTable<SkillDesc>(REMOTE_MODULE.tables.skill_desc));
  }

  get stagedStaticData(): StagedStaticDataTableHandle {
    return new StagedStaticDataTableHandle(this.connection.clientCache.getOrCreateTable<StagedStaticData>(REMOTE_MODULE.tables.staged_static_data));
  }

  get staminaState(): StaminaStateTableHandle {
    return new StaminaStateTableHandle(this.connection.clientCache.getOrCreateTable<StaminaState>(REMOTE_MODULE.tables.stamina_state));
  }

  get starvingLoopTimer(): StarvingLoopTimerTableHandle {
    return new StarvingLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<StarvingLoopTimer>(REMOTE_MODULE.tables.starving_loop_timer));
  }

  get starvingPlayerState(): StarvingPlayerStateTableHandle {
    return new StarvingPlayerStateTableHandle(this.connection.clientCache.getOrCreateTable<StarvingPlayerState>(REMOTE_MODULE.tables.starving_player_state));
  }

  get targetState(): TargetStateTableHandle {
    return new TargetStateTableHandle(this.connection.clientCache.getOrCreateTable<TargetState>(REMOTE_MODULE.tables.target_state));
  }

  get targetableState(): TargetableStateTableHandle {
    return new TargetableStateTableHandle(this.connection.clientCache.getOrCreateTable<TargetableState>(REMOTE_MODULE.tables.targetable_state));
  }

  get targetingMatrixDesc(): TargetingMatrixDescTableHandle {
    return new TargetingMatrixDescTableHandle(this.connection.clientCache.getOrCreateTable<TargetingMatrixDesc>(REMOTE_MODULE.tables.targeting_matrix_desc));
  }

  get teleportItemDesc(): TeleportItemDescTableHandle {
    return new TeleportItemDescTableHandle(this.connection.clientCache.getOrCreateTable<TeleportItemDesc>(REMOTE_MODULE.tables.teleport_item_desc));
  }

  get teleportPlayerTimer(): TeleportPlayerTimerTableHandle {
    return new TeleportPlayerTimerTableHandle(this.connection.clientCache.getOrCreateTable<TeleportPlayerTimer>(REMOTE_MODULE.tables.teleport_player_timer));
  }

  get teleportationEnergyRegenLoopTimer(): TeleportationEnergyRegenLoopTimerTableHandle {
    return new TeleportationEnergyRegenLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<TeleportationEnergyRegenLoopTimer>(REMOTE_MODULE.tables.teleportation_energy_regen_loop_timer));
  }

  get teleportationEnergyState(): TeleportationEnergyStateTableHandle {
    return new TeleportationEnergyStateTableHandle(this.connection.clientCache.getOrCreateTable<TeleportationEnergyState>(REMOTE_MODULE.tables.teleportation_energy_state));
  }

  get terraformProgressState(): TerraformProgressStateTableHandle {
    return new TerraformProgressStateTableHandle(this.connection.clientCache.getOrCreateTable<TerraformProgressState>(REMOTE_MODULE.tables.terraform_progress_state));
  }

  get terraformRecipeDesc(): TerraformRecipeDescTableHandle {
    return new TerraformRecipeDescTableHandle(this.connection.clientCache.getOrCreateTable<TerraformRecipeDesc>(REMOTE_MODULE.tables.terraform_recipe_desc));
  }

  get terrainChunkState(): TerrainChunkStateTableHandle {
    return new TerrainChunkStateTableHandle(this.connection.clientCache.getOrCreateTable<TerrainChunkState>(REMOTE_MODULE.tables.terrain_chunk_state));
  }

  get theGreatPlaceholderTable(): TheGreatPlaceholderTableTableHandle {
    return new TheGreatPlaceholderTableTableHandle(this.connection.clientCache.getOrCreateTable<TheGreatPlaceHolderTable>(REMOTE_MODULE.tables.the_great_placeholder_table));
  }

  get threatState(): ThreatStateTableHandle {
    return new ThreatStateTableHandle(this.connection.clientCache.getOrCreateTable<ThreatState>(REMOTE_MODULE.tables.threat_state));
  }

  get toolDesc(): ToolDescTableHandle {
    return new ToolDescTableHandle(this.connection.clientCache.getOrCreateTable<ToolDesc>(REMOTE_MODULE.tables.tool_desc));
  }

  get toolTypeDesc(): ToolTypeDescTableHandle {
    return new ToolTypeDescTableHandle(this.connection.clientCache.getOrCreateTable<ToolTypeDesc>(REMOTE_MODULE.tables.tool_type_desc));
  }

  get toolbarState(): ToolbarStateTableHandle {
    return new ToolbarStateTableHandle(this.connection.clientCache.getOrCreateTable<ToolbarState>(REMOTE_MODULE.tables.toolbar_state));
  }

  get tradeOrderState(): TradeOrderStateTableHandle {
    return new TradeOrderStateTableHandle(this.connection.clientCache.getOrCreateTable<TradeOrderState>(REMOTE_MODULE.tables.trade_order_state));
  }

  get tradeSessionLoopTimer(): TradeSessionLoopTimerTableHandle {
    return new TradeSessionLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<TradeSessionLoopTimer>(REMOTE_MODULE.tables.trade_session_loop_timer));
  }

  get tradeSessionState(): TradeSessionStateTableHandle {
    return new TradeSessionStateTableHandle(this.connection.clientCache.getOrCreateTable<TradeSessionState>(REMOTE_MODULE.tables.trade_session_state));
  }

  get transferPlayerTimer(): TransferPlayerTimerTableHandle {
    return new TransferPlayerTimerTableHandle(this.connection.clientCache.getOrCreateTable<TransferPlayerTimer>(REMOTE_MODULE.tables.transfer_player_timer));
  }

  get travelerTaskDesc(): TravelerTaskDescTableHandle {
    return new TravelerTaskDescTableHandle(this.connection.clientCache.getOrCreateTable<TravelerTaskDesc>(REMOTE_MODULE.tables.traveler_task_desc));
  }

  get travelerTaskLoopTimer(): TravelerTaskLoopTimerTableHandle {
    return new TravelerTaskLoopTimerTableHandle(this.connection.clientCache.getOrCreateTable<TravelerTaskLoopTimer>(REMOTE_MODULE.tables.traveler_task_loop_timer));
  }

  get travelerTaskState(): TravelerTaskStateTableHandle {
    return new TravelerTaskStateTableHandle(this.connection.clientCache.getOrCreateTable<TravelerTaskState>(REMOTE_MODULE.tables.traveler_task_state));
  }

  get travelerTradeOrderDesc(): TravelerTradeOrderDescTableHandle {
    return new TravelerTradeOrderDescTableHandle(this.connection.clientCache.getOrCreateTable<TravelerTradeOrderDesc>(REMOTE_MODULE.tables.traveler_trade_order_desc));
  }

  get unclaimedCollectiblesState(): UnclaimedCollectiblesStateTableHandle {
    return new UnclaimedCollectiblesStateTableHandle(this.connection.clientCache.getOrCreateTable<UnclaimedCollectiblesState>(REMOTE_MODULE.tables.unclaimed_collectibles_state));
  }

  get unclaimedShardsState(): UnclaimedShardsStateTableHandle {
    return new UnclaimedShardsStateTableHandle(this.connection.clientCache.getOrCreateTable<UnclaimedShardsState>(REMOTE_MODULE.tables.unclaimed_shards_state));
  }

  get userAuthenticationState(): UserAuthenticationStateTableHandle {
    return new UserAuthenticationStateTableHandle(this.connection.clientCache.getOrCreateTable<UserAuthenticationState>(REMOTE_MODULE.tables.user_authentication_state));
  }

  get userModerationState(): UserModerationStateTableHandle {
    return new UserModerationStateTableHandle(this.connection.clientCache.getOrCreateTable<UserModerationState>(REMOTE_MODULE.tables.user_moderation_state));
  }

  get userPreviousRegionState(): UserPreviousRegionStateTableHandle {
    return new UserPreviousRegionStateTableHandle(this.connection.clientCache.getOrCreateTable<UserPreviousRegionState>(REMOTE_MODULE.tables.user_previous_region_state));
  }

  get userState(): UserStateTableHandle {
    return new UserStateTableHandle(this.connection.clientCache.getOrCreateTable<UserState>(REMOTE_MODULE.tables.user_state));
  }

  get vaultState(): VaultStateTableHandle {
    return new VaultStateTableHandle(this.connection.clientCache.getOrCreateTable<VaultState>(REMOTE_MODULE.tables.vault_state));
  }

  get wallDesc(): WallDescTableHandle {
    return new WallDescTableHandle(this.connection.clientCache.getOrCreateTable<WallDesc>(REMOTE_MODULE.tables.wall_desc));
  }

  get weaponDesc(): WeaponDescTableHandle {
    return new WeaponDescTableHandle(this.connection.clientCache.getOrCreateTable<WeaponDesc>(REMOTE_MODULE.tables.weapon_desc));
  }

  get weaponTypeDesc(): WeaponTypeDescTableHandle {
    return new WeaponTypeDescTableHandle(this.connection.clientCache.getOrCreateTable<WeaponTypeDesc>(REMOTE_MODULE.tables.weapon_type_desc));
  }

  get worldRegionNameState(): WorldRegionNameStateTableHandle {
    return new WorldRegionNameStateTableHandle(this.connection.clientCache.getOrCreateTable<WorldRegionNameState>(REMOTE_MODULE.tables.world_region_name_state));
  }

  get worldRegionState(): WorldRegionStateTableHandle {
    return new WorldRegionStateTableHandle(this.connection.clientCache.getOrCreateTable<WorldRegionState>(REMOTE_MODULE.tables.world_region_state));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
