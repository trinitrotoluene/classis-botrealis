// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { ActionState as __ActionState } from "./action_state_type";
import { ActiveBuffState as __ActiveBuffState } from "./active_buff_state_type";
import { AttackOutcomeState as __AttackOutcomeState } from "./attack_outcome_state_type";
import { CharacterStatsState as __CharacterStatsState } from "./character_stats_state_type";
import { CombatState as __CombatState } from "./combat_state_type";
import { DeployableCollectibleState as __DeployableCollectibleState } from "./deployable_collectible_state_type";
import { DeployableState as __DeployableState } from "./deployable_state_type";
import { EquipmentState as __EquipmentState } from "./equipment_state_type";
import { ExperienceState as __ExperienceState } from "./experience_state_type";
import { ExplorationChunksState as __ExplorationChunksState } from "./exploration_chunks_state_type";
import { ExtractOutcomeState as __ExtractOutcomeState } from "./extract_outcome_state_type";
import { FloatHexTileMessage as __FloatHexTileMessage } from "./float_hex_tile_message_type";
import { HealthState as __HealthState } from "./health_state_type";
import { InventoryState as __InventoryState } from "./inventory_state_type";
import { KnowledgeAchievementState as __KnowledgeAchievementState } from "./knowledge_achievement_state_type";
import { KnowledgeBattleActionState as __KnowledgeBattleActionState } from "./knowledge_battle_action_state_type";
import { KnowledgeBuildingState as __KnowledgeBuildingState } from "./knowledge_building_state_type";
import { KnowledgeCargoState as __KnowledgeCargoState } from "./knowledge_cargo_state_type";
import { KnowledgeConstructionState as __KnowledgeConstructionState } from "./knowledge_construction_state_type";
import { KnowledgeCraftState as __KnowledgeCraftState } from "./knowledge_craft_state_type";
import { KnowledgeDeployableState as __KnowledgeDeployableState } from "./knowledge_deployable_state_type";
import { KnowledgeEnemyState as __KnowledgeEnemyState } from "./knowledge_enemy_state_type";
import { KnowledgeExtractState as __KnowledgeExtractState } from "./knowledge_extract_state_type";
import { KnowledgeItemState as __KnowledgeItemState } from "./knowledge_item_state_type";
import { KnowledgeLoreState as __KnowledgeLoreState } from "./knowledge_lore_state_type";
import { KnowledgeNpcState as __KnowledgeNpcState } from "./knowledge_npc_state_type";
import { KnowledgePavingState as __KnowledgePavingState } from "./knowledge_paving_state_type";
import { KnowledgePillarShapingState as __KnowledgePillarShapingState } from "./knowledge_pillar_shaping_state_type";
import { KnowledgeResourcePlacementState as __KnowledgeResourcePlacementState } from "./knowledge_resource_placement_state_type";
import { KnowledgeResourceState as __KnowledgeResourceState } from "./knowledge_resource_state_type";
import { KnowledgeRuinsState as __KnowledgeRuinsState } from "./knowledge_ruins_state_type";
import { KnowledgeSecondaryState as __KnowledgeSecondaryState } from "./knowledge_secondary_state_type";
import { KnowledgeVaultState as __KnowledgeVaultState } from "./knowledge_vault_state_type";
import { OnboardingState as __OnboardingState } from "./onboarding_state_type";
import { PlayerActionState as __PlayerActionState } from "./player_action_state_type";
import { PlayerPrefsState as __PlayerPrefsState } from "./player_prefs_state_type";
import { PlayerState as __PlayerState } from "./player_state_type";
import { SatiationState as __SatiationState } from "./satiation_state_type";
import { StaminaState as __StaminaState } from "./stamina_state_type";
import { UserState as __UserState } from "./user_state_type";
import { VaultState as __VaultState } from "./vault_state_type";
import { PlayerHousingState as __PlayerHousingState } from "./player_housing_state_type";
import { MoveValidationStrikeCounterState as __MoveValidationStrikeCounterState } from "./move_validation_strike_counter_state_type";
import { KnowledgeClaimState as __KnowledgeClaimState } from "./knowledge_claim_state_type";
import { PlayerUsernameState as __PlayerUsernameState } from "./player_username_state_type";
import { ToolbarState as __ToolbarState } from "./toolbar_state_type";
import { UnclaimedCollectiblesState as __UnclaimedCollectiblesState } from "./unclaimed_collectibles_state_type";
import { TeleportationEnergyState as __TeleportationEnergyState } from "./teleportation_energy_state_type";
import { TravelerTaskState as __TravelerTaskState } from "./traveler_task_state_type";

export type TransferPlayerMsg = {
  originalLocation: __FloatHexTileMessage,
  destinationLocation: __FloatHexTileMessage,
  allowCancel: boolean,
  teleportEnergyCost: number,
  vehicle: __DeployableState | undefined,
  vehicleInventory: __InventoryState | undefined,
  playerState: __PlayerState,
  userState: __UserState,
  moveValidationStrikeCounterState: __MoveValidationStrikeCounterState,
  healthState: __HealthState,
  staminaState: __StaminaState,
  experienceState: __ExperienceState,
  activeBuffState: __ActiveBuffState,
  knowledgeAchievementState: __KnowledgeAchievementState,
  knowledgeBattleActionState: __KnowledgeBattleActionState,
  knowledgeBuildingState: __KnowledgeBuildingState,
  knowledgeCargoState: __KnowledgeCargoState,
  knowledgeConstructionState: __KnowledgeConstructionState,
  knowledgeResourcePlacementState: __KnowledgeResourcePlacementState,
  knowledgeCraftState: __KnowledgeCraftState,
  knowledgeEnemyState: __KnowledgeEnemyState,
  knowledgeExtractState: __KnowledgeExtractState,
  knowledgeItemState: __KnowledgeItemState,
  knowledgeLoreState: __KnowledgeLoreState,
  knowledgeNpcState: __KnowledgeNpcState,
  knowledgeResourceState: __KnowledgeResourceState,
  knowledgeRuinsState: __KnowledgeRuinsState,
  knowledgeSecondaryState: __KnowledgeSecondaryState,
  knowledgeVaultState: __KnowledgeVaultState,
  knowledgeDeployableState: __KnowledgeDeployableState,
  knowledgePavingState: __KnowledgePavingState,
  knowledgeClaimState: __KnowledgeClaimState,
  knowledgePillarShapingState: __KnowledgePillarShapingState,
  equipmentState: __EquipmentState,
  inventoryState: __InventoryState[],
  characterStatsState: __CharacterStatsState,
  playerUsernameState: __PlayerUsernameState,
  playerActionState: __PlayerActionState[],
  deployableCollectibleState: __DeployableCollectibleState[],
  combatState: __CombatState,
  actionState: __ActionState[],
  toolbarState: __ToolbarState[],
  attackOutcomeState: __AttackOutcomeState,
  vaultState: __VaultState,
  explorationChunksState: __ExplorationChunksState,
  satiationState: __SatiationState,
  playerPrefsState: __PlayerPrefsState,
  onboardingState: __OnboardingState,
  unclaimedCollectiblesState: __UnclaimedCollectiblesState | undefined,
  teleportationEnergyState: __TeleportationEnergyState,
  playerHousingState: __PlayerHousingState | undefined,
  travelerTaskStates: __TravelerTaskState[],
  extractOutcomeState: __ExtractOutcomeState,
  undeployedDeployableStates: __DeployableState[],
};

/**
 * A namespace for generated helper functions.
 */
export namespace TransferPlayerMsg {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("originalLocation", __FloatHexTileMessage.getTypeScriptAlgebraicType()),
      new ProductTypeElement("destinationLocation", __FloatHexTileMessage.getTypeScriptAlgebraicType()),
      new ProductTypeElement("allowCancel", AlgebraicType.createBoolType()),
      new ProductTypeElement("teleportEnergyCost", AlgebraicType.createF32Type()),
      new ProductTypeElement("vehicle", AlgebraicType.createOptionType(__DeployableState.getTypeScriptAlgebraicType())),
      new ProductTypeElement("vehicleInventory", AlgebraicType.createOptionType(__InventoryState.getTypeScriptAlgebraicType())),
      new ProductTypeElement("playerState", __PlayerState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("userState", __UserState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("moveValidationStrikeCounterState", __MoveValidationStrikeCounterState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("healthState", __HealthState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("staminaState", __StaminaState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("experienceState", __ExperienceState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("activeBuffState", __ActiveBuffState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeAchievementState", __KnowledgeAchievementState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeBattleActionState", __KnowledgeBattleActionState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeBuildingState", __KnowledgeBuildingState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeCargoState", __KnowledgeCargoState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeConstructionState", __KnowledgeConstructionState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeResourcePlacementState", __KnowledgeResourcePlacementState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeCraftState", __KnowledgeCraftState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeEnemyState", __KnowledgeEnemyState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeExtractState", __KnowledgeExtractState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeItemState", __KnowledgeItemState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeLoreState", __KnowledgeLoreState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeNpcState", __KnowledgeNpcState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeResourceState", __KnowledgeResourceState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeRuinsState", __KnowledgeRuinsState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeSecondaryState", __KnowledgeSecondaryState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeVaultState", __KnowledgeVaultState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeDeployableState", __KnowledgeDeployableState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgePavingState", __KnowledgePavingState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgeClaimState", __KnowledgeClaimState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("knowledgePillarShapingState", __KnowledgePillarShapingState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("equipmentState", __EquipmentState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("inventoryState", AlgebraicType.createArrayType(__InventoryState.getTypeScriptAlgebraicType())),
      new ProductTypeElement("characterStatsState", __CharacterStatsState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("playerUsernameState", __PlayerUsernameState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("playerActionState", AlgebraicType.createArrayType(__PlayerActionState.getTypeScriptAlgebraicType())),
      new ProductTypeElement("deployableCollectibleState", AlgebraicType.createArrayType(__DeployableCollectibleState.getTypeScriptAlgebraicType())),
      new ProductTypeElement("combatState", __CombatState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("actionState", AlgebraicType.createArrayType(__ActionState.getTypeScriptAlgebraicType())),
      new ProductTypeElement("toolbarState", AlgebraicType.createArrayType(__ToolbarState.getTypeScriptAlgebraicType())),
      new ProductTypeElement("attackOutcomeState", __AttackOutcomeState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("vaultState", __VaultState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("explorationChunksState", __ExplorationChunksState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("satiationState", __SatiationState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("playerPrefsState", __PlayerPrefsState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("onboardingState", __OnboardingState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("unclaimedCollectiblesState", AlgebraicType.createOptionType(__UnclaimedCollectiblesState.getTypeScriptAlgebraicType())),
      new ProductTypeElement("teleportationEnergyState", __TeleportationEnergyState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("playerHousingState", AlgebraicType.createOptionType(__PlayerHousingState.getTypeScriptAlgebraicType())),
      new ProductTypeElement("travelerTaskStates", AlgebraicType.createArrayType(__TravelerTaskState.getTypeScriptAlgebraicType())),
      new ProductTypeElement("extractOutcomeState", __ExtractOutcomeState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("undeployedDeployableStates", AlgebraicType.createArrayType(__DeployableState.getTypeScriptAlgebraicType())),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: TransferPlayerMsg): void {
    TransferPlayerMsg.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): TransferPlayerMsg {
    return TransferPlayerMsg.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


