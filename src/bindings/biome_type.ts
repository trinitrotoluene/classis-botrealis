// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace Biome {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Dev = { tag: "Dev" };
  export type CalmForest = { tag: "CalmForest" };
  export type PineWoods = { tag: "PineWoods" };
  export type SnowyPeaks = { tag: "SnowyPeaks" };
  export type BreezyPlains = { tag: "BreezyPlains" };
  export type AutumnForest = { tag: "AutumnForest" };
  export type Tundra = { tag: "Tundra" };
  export type Desert = { tag: "Desert" };
  export type Swamp = { tag: "Swamp" };
  export type Canyon = { tag: "Canyon" };
  export type Ocean = { tag: "Ocean" };
  export type SafeMeadows = { tag: "SafeMeadows" };
  export type Cave = { tag: "Cave" };
  export type Jungle = { tag: "Jungle" };
  export type Sapwoods = { tag: "Sapwoods" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Dev = { tag: "Dev" };
  export const CalmForest = { tag: "CalmForest" };
  export const PineWoods = { tag: "PineWoods" };
  export const SnowyPeaks = { tag: "SnowyPeaks" };
  export const BreezyPlains = { tag: "BreezyPlains" };
  export const AutumnForest = { tag: "AutumnForest" };
  export const Tundra = { tag: "Tundra" };
  export const Desert = { tag: "Desert" };
  export const Swamp = { tag: "Swamp" };
  export const Canyon = { tag: "Canyon" };
  export const Ocean = { tag: "Ocean" };
  export const SafeMeadows = { tag: "SafeMeadows" };
  export const Cave = { tag: "Cave" };
  export const Jungle = { tag: "Jungle" };
  export const Sapwoods = { tag: "Sapwoods" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Dev", AlgebraicType.createProductType([])),
      new SumTypeVariant("CalmForest", AlgebraicType.createProductType([])),
      new SumTypeVariant("PineWoods", AlgebraicType.createProductType([])),
      new SumTypeVariant("SnowyPeaks", AlgebraicType.createProductType([])),
      new SumTypeVariant("BreezyPlains", AlgebraicType.createProductType([])),
      new SumTypeVariant("AutumnForest", AlgebraicType.createProductType([])),
      new SumTypeVariant("Tundra", AlgebraicType.createProductType([])),
      new SumTypeVariant("Desert", AlgebraicType.createProductType([])),
      new SumTypeVariant("Swamp", AlgebraicType.createProductType([])),
      new SumTypeVariant("Canyon", AlgebraicType.createProductType([])),
      new SumTypeVariant("Ocean", AlgebraicType.createProductType([])),
      new SumTypeVariant("SafeMeadows", AlgebraicType.createProductType([])),
      new SumTypeVariant("Cave", AlgebraicType.createProductType([])),
      new SumTypeVariant("Jungle", AlgebraicType.createProductType([])),
      new SumTypeVariant("Sapwoods", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Biome): void {
      Biome.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Biome {
      return Biome.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `Biome`.
export type Biome = Biome.Dev | Biome.CalmForest | Biome.PineWoods | Biome.SnowyPeaks | Biome.BreezyPlains | Biome.AutumnForest | Biome.Tundra | Biome.Desert | Biome.Swamp | Biome.Canyon | Biome.Ocean | Biome.SafeMeadows | Biome.Cave | Biome.Jungle | Biome.Sapwoods;

export default Biome;

