// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
import { BlockedIdentity as __BlockedIdentity } from "./blocked_identity_type";

// A namespace for generated variants and helper functions.
export namespace BlockedIdentityOp {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Insert = { tag: "Insert", value: __BlockedIdentity };
  export type Delete = { tag: "Delete", value: __BlockedIdentity };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Insert = (value: __BlockedIdentity): BlockedIdentityOp => ({ tag: "Insert", value });
  export const Delete = (value: __BlockedIdentity): BlockedIdentityOp => ({ tag: "Delete", value });

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Insert", __BlockedIdentity.getTypeScriptAlgebraicType()),
      new SumTypeVariant("Delete", __BlockedIdentity.getTypeScriptAlgebraicType()),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: BlockedIdentityOp): void {
      BlockedIdentityOp.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): BlockedIdentityOp {
      return BlockedIdentityOp.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `BlockedIdentityOp`.
export type BlockedIdentityOp = BlockedIdentityOp.Insert | BlockedIdentityOp.Delete;

export default BlockedIdentityOp;

