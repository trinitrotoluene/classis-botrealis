// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace CollectibleType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Default = { tag: "Default" };
  export type Hair = { tag: "Hair" };
  export type Mask = { tag: "Mask" };
  export type MaskPattern = { tag: "MaskPattern" };
  export type HairColor = { tag: "HairColor" };
  export type Nameplate = { tag: "Nameplate" };
  export type BodyColor = { tag: "BodyColor" };
  export type Emblem = { tag: "Emblem" };
  export type ClothesHead = { tag: "ClothesHead" };
  export type ClothesBelt = { tag: "ClothesBelt" };
  export type ClothesTorso = { tag: "ClothesTorso" };
  export type ClothesArms = { tag: "ClothesArms" };
  export type ClothesLegs = { tag: "ClothesLegs" };
  export type ClothesFeet = { tag: "ClothesFeet" };
  export type Deployable = { tag: "Deployable" };
  export type Title = { tag: "Title" };
  export type Crown = { tag: "Crown" };
  export type Pet = { tag: "Pet" };
  export type ClothesCape = { tag: "ClothesCape" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Default = { tag: "Default" };
  export const Hair = { tag: "Hair" };
  export const Mask = { tag: "Mask" };
  export const MaskPattern = { tag: "MaskPattern" };
  export const HairColor = { tag: "HairColor" };
  export const Nameplate = { tag: "Nameplate" };
  export const BodyColor = { tag: "BodyColor" };
  export const Emblem = { tag: "Emblem" };
  export const ClothesHead = { tag: "ClothesHead" };
  export const ClothesBelt = { tag: "ClothesBelt" };
  export const ClothesTorso = { tag: "ClothesTorso" };
  export const ClothesArms = { tag: "ClothesArms" };
  export const ClothesLegs = { tag: "ClothesLegs" };
  export const ClothesFeet = { tag: "ClothesFeet" };
  export const Deployable = { tag: "Deployable" };
  export const Title = { tag: "Title" };
  export const Crown = { tag: "Crown" };
  export const Pet = { tag: "Pet" };
  export const ClothesCape = { tag: "ClothesCape" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Default", AlgebraicType.createProductType([])),
      new SumTypeVariant("Hair", AlgebraicType.createProductType([])),
      new SumTypeVariant("Mask", AlgebraicType.createProductType([])),
      new SumTypeVariant("MaskPattern", AlgebraicType.createProductType([])),
      new SumTypeVariant("HairColor", AlgebraicType.createProductType([])),
      new SumTypeVariant("Nameplate", AlgebraicType.createProductType([])),
      new SumTypeVariant("BodyColor", AlgebraicType.createProductType([])),
      new SumTypeVariant("Emblem", AlgebraicType.createProductType([])),
      new SumTypeVariant("ClothesHead", AlgebraicType.createProductType([])),
      new SumTypeVariant("ClothesBelt", AlgebraicType.createProductType([])),
      new SumTypeVariant("ClothesTorso", AlgebraicType.createProductType([])),
      new SumTypeVariant("ClothesArms", AlgebraicType.createProductType([])),
      new SumTypeVariant("ClothesLegs", AlgebraicType.createProductType([])),
      new SumTypeVariant("ClothesFeet", AlgebraicType.createProductType([])),
      new SumTypeVariant("Deployable", AlgebraicType.createProductType([])),
      new SumTypeVariant("Title", AlgebraicType.createProductType([])),
      new SumTypeVariant("Crown", AlgebraicType.createProductType([])),
      new SumTypeVariant("Pet", AlgebraicType.createProductType([])),
      new SumTypeVariant("ClothesCape", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: CollectibleType): void {
      CollectibleType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): CollectibleType {
      return CollectibleType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `CollectibleType`.
export type CollectibleType = CollectibleType.Default | CollectibleType.Hair | CollectibleType.Mask | CollectibleType.MaskPattern | CollectibleType.HairColor | CollectibleType.Nameplate | CollectibleType.BodyColor | CollectibleType.Emblem | CollectibleType.ClothesHead | CollectibleType.ClothesBelt | CollectibleType.ClothesTorso | CollectibleType.ClothesArms | CollectibleType.ClothesLegs | CollectibleType.ClothesFeet | CollectibleType.Deployable | CollectibleType.Title | CollectibleType.Crown | CollectibleType.Pet | CollectibleType.ClothesCape;

export default CollectibleType;

