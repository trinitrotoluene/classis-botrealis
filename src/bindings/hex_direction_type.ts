// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit 080c501f238afc5fc0ccaedf8742ff4fe306727a).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace HexDirection {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Ne = { tag: "Ne" };
  export type Ene = { tag: "Ene" };
  export type E = { tag: "E" };
  export type Ese = { tag: "Ese" };
  export type Se = { tag: "Se" };
  export type S = { tag: "S" };
  export type Sw = { tag: "Sw" };
  export type Wsw = { tag: "Wsw" };
  export type W = { tag: "W" };
  export type Wnw = { tag: "Wnw" };
  export type Nw = { tag: "Nw" };
  export type N = { tag: "N" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const NE = { tag: "NE" };
  export const ENE = { tag: "ENE" };
  export const E = { tag: "E" };
  export const ESE = { tag: "ESE" };
  export const SE = { tag: "SE" };
  export const S = { tag: "S" };
  export const SW = { tag: "SW" };
  export const WSW = { tag: "WSW" };
  export const W = { tag: "W" };
  export const WNW = { tag: "WNW" };
  export const NW = { tag: "NW" };
  export const N = { tag: "N" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("NE", AlgebraicType.createProductType([])),
      new SumTypeVariant("ENE", AlgebraicType.createProductType([])),
      new SumTypeVariant("E", AlgebraicType.createProductType([])),
      new SumTypeVariant("ESE", AlgebraicType.createProductType([])),
      new SumTypeVariant("SE", AlgebraicType.createProductType([])),
      new SumTypeVariant("S", AlgebraicType.createProductType([])),
      new SumTypeVariant("SW", AlgebraicType.createProductType([])),
      new SumTypeVariant("WSW", AlgebraicType.createProductType([])),
      new SumTypeVariant("W", AlgebraicType.createProductType([])),
      new SumTypeVariant("WNW", AlgebraicType.createProductType([])),
      new SumTypeVariant("NW", AlgebraicType.createProductType([])),
      new SumTypeVariant("N", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: HexDirection): void {
      HexDirection.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): HexDirection {
      return HexDirection.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `HexDirection`.
export type HexDirection = HexDirection.Ne | HexDirection.Ene | HexDirection.E | HexDirection.Ese | HexDirection.Se | HexDirection.S | HexDirection.Sw | HexDirection.Wsw | HexDirection.W | HexDirection.Wnw | HexDirection.Nw | HexDirection.N;

export default HexDirection;

